/*
Package interfaces is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /tmp/ygot/genutil/names.go
using the following YANG input files:
  - Cisco-IOS-XR-pfi-im-cmd-oper.yang

Imported modules were sourced from:
  - yang/vendor/cisco/xr/732/...
*/
package interfaces

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Interfaces{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces struct {
	InterfaceBriefs      *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs      `path:"interface-briefs" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceNonDynamics *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics `path:"interface-non-dynamics" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceSummary     *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary     `path:"interface-summary" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceXr          *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr          `path:"interface-xr" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Interfaces           *Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces           `path:"interfaces" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InventorySummary     *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary     `path:"inventory-summary" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NodeTypeSets         *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets         `path:"node-type-sets" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-briefs YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs struct {
	InterfaceBrief map[string]*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief `path:"interface-brief" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs) IsYANGGoStruct() {}

// NewInterfaceBrief creates a new entry in the InterfaceBrief list of the
// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs) NewInterfaceBrief(InterfaceName string) (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterfaceBrief == nil {
		t.InterfaceBrief = make(map[string]*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterfaceBrief[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterfaceBrief", key)
	}

	t.InterfaceBrief[key] = &Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief{
		InterfaceName: &InterfaceName,
	}

	return t.InterfaceBrief[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-briefs/interface-brief YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief struct {
	ActualLineState         E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum `path:"actual-line-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ActualState             E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum `path:"actual-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Bandwidth               *uint32                                `path:"bandwidth" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Bandwidth64Bit          *uint64                                `path:"bandwidth64-bit" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Encapsulation           *string                                `path:"encapsulation" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	EncapsulationTypeString *string                                `path:"encapsulation-type-string" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Interface               *string                                `path:"interface" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceName           *string                                `path:"interface-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	L2Transport             *bool                                  `path:"l2-transport" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LineState               E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum `path:"line-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Mtu                     *uint32                                `path:"mtu" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ParentInterface         *string                                `path:"parent-interface" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	State                   E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum `path:"state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SubInterfaceMtuOverhead *uint32                                `path:"sub-interface-mtu-overhead" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Type                    *string                                `path:"type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief struct, which is a YANG list entry.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceBriefs_InterfaceBrief) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-non-dynamics YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics struct {
	InterfaceNonDynamic map[string]*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic `path:"interface-non-dynamic" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics) IsYANGGoStruct() {}

// NewInterfaceNonDynamic creates a new entry in the InterfaceNonDynamic list of the
// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics) NewInterfaceNonDynamic(InterfaceName string) (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterfaceNonDynamic == nil {
		t.InterfaceNonDynamic = make(map[string]*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterfaceNonDynamic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterfaceNonDynamic", key)
	}

	t.InterfaceNonDynamic[key] = &Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic{
		InterfaceName: &InterfaceName,
	}

	return t.InterfaceNonDynamic[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-non-dynamics/interface-non-dynamic YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic struct {
	AdminState      E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum  `path:"admin-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Bandwidth       *uint32                                 `path:"bandwidth" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	BurnedInAddress *string                                 `path:"burned-in-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Description     *string                                 `path:"description" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Duplexity       E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex `path:"duplexity" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceHandle *string                                 `path:"interface-handle" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceName   *string                                 `path:"interface-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceNameXr *string                                 `path:"interface-name-xr" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Ipv4Address     *string                                 `path:"ipv4-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsSubscriber    *bool                                   `path:"is-subscriber" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LinkType        *string                                 `path:"link-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAddress      *string                                 `path:"mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MaxBandwidth    *uint32                                 `path:"max-bandwidth" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Mtu             *uint32                                 `path:"mtu" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OperState       E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum  `path:"oper-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic struct, which is a YANG list entry.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceNonDynamics_InterfaceNonDynamic) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-summary YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary struct {
	InterfaceCounts *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceCounts `path:"interface-counts" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceType   []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType `path:"interface-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceCounts represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-summary/interface-counts YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceCounts struct {
	AdminDownInterfaceCount *uint32 `path:"admin-down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DownInterfaceCount      *uint32 `path:"down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceCount          *uint32 `path:"interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	UpInterfaceCount        *uint32 `path:"up-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceCounts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceCounts) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceCounts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceCounts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceCounts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceCounts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceCounts.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceCounts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-summary/interface-type YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType struct {
	InterfaceCounts          *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType_InterfaceCounts `path:"interface-counts" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceTypeDescription *string                                                                             `path:"interface-type-description" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceTypeName        *string                                                                             `path:"interface-type-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType_InterfaceCounts represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-summary/interface-type/interface-counts YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType_InterfaceCounts struct {
	AdminDownInterfaceCount *uint32 `path:"admin-down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DownInterfaceCount      *uint32 `path:"down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceCount          *uint32 `path:"interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	UpInterfaceCount        *uint32 `path:"up-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType_InterfaceCounts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType_InterfaceCounts) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType_InterfaceCounts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType_InterfaceCounts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType_InterfaceCounts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType_InterfaceCounts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType_InterfaceCounts.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceSummary_InterfaceType_InterfaceCounts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr struct {
	Interface map[string]*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface `path:"interface" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr) NewInterface(InterfaceName string) (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface struct {
	ArpInformation           *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_ArpInformation           `path:"arp-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Bandwidth                *uint32                                                                             `path:"bandwidth" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Bandwidth64Bit           *uint64                                                                             `path:"bandwidth64-bit" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	BurnedInAddress          *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_BurnedInAddress          `path:"burned-in-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	CarrierDelay             *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_CarrierDelay             `path:"carrier-delay" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	CrcLength                *uint32                                                                             `path:"crc-length" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DampeningInformation     *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DampeningInformation     `path:"dampening-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DataRates                *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DataRates                `path:"data-rates" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Description              *string                                                                             `path:"description" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Duplexity                E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex                                             `path:"duplexity" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Encapsulation            *string                                                                             `path:"encapsulation" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	EncapsulationInformation *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation `path:"encapsulation-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	EncapsulationTypeString  *string                                                                             `path:"encapsulation-type-string" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	FastShutdown             *bool                                                                               `path:"fast-shutdown" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	HardwareTypeString       *string                                                                             `path:"hardware-type-string" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IfIndex                  *uint32                                                                             `path:"if-index" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InFlowControl            E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl                                        `path:"in-flow-control" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceHandle          *string                                                                             `path:"interface-handle" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceName            *string                                                                             `path:"interface-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceStatistics      *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics      `path:"interface-statistics" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceType            *string                                                                             `path:"interface-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceTypeInformation *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation `path:"interface-type-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IpInformation            *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_IpInformation            `path:"ip-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsDampeningEnabled       *bool                                                                               `path:"is-dampening-enabled" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsDataInverted           *bool                                                                               `path:"is-data-inverted" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsIntfLogical            *bool                                                                               `path:"is-intf-logical" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsL2Looped               *bool                                                                               `path:"is-l2-looped" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsL2TransportEnabled     *bool                                                                               `path:"is-l2-transport-enabled" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsMaintenanceEnabled     *bool                                                                               `path:"is-maintenance-enabled" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsScrambleEnabled        *bool                                                                               `path:"is-scramble-enabled" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Keepalive                *uint32                                                                             `path:"keepalive" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	L2InterfaceStatistics    *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics    `path:"l2-interface-statistics" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LastStateTransitionTime  *uint64                                                                             `path:"last-state-transition-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LineState                E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum                                              `path:"line-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LinkType                 E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink                                               `path:"link-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LoopbackConfiguration    E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum                                        `path:"loopback-configuration" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAddress               *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_MacAddress               `path:"mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MaxBandwidth             *uint32                                                                             `path:"max-bandwidth" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MaxBandwidth64Bit        *uint64                                                                             `path:"max-bandwidth64-bit" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MediaType                E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia                                              `path:"media-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Mtu                      *uint32                                                                             `path:"mtu" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutFlowControl           E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl                                        `path:"out-flow-control" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ParentInterfaceName      *string                                                                             `path:"parent-interface-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Speed                    *uint32                                                                             `path:"speed" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	State                    E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum                                              `path:"state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	StateTransitionCount     *uint32                                                                             `path:"state-transition-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TransportMode            E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode                                      `path:"transport-mode" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface struct, which is a YANG list entry.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_ArpInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/arp-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_ArpInformation struct {
	ArpIsLearningDisabled *bool   `path:"arp-is-learning-disabled" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ArpTimeout            *uint32 `path:"arp-timeout" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ArpTypeName           *string `path:"arp-type-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_ArpInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_ArpInformation) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_ArpInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_ArpInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_ArpInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_ArpInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_ArpInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_ArpInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_BurnedInAddress represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/burned-in-address YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_BurnedInAddress struct {
	Address *string `path:"address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_BurnedInAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_BurnedInAddress) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_BurnedInAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_BurnedInAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_BurnedInAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_BurnedInAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_BurnedInAddress.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_BurnedInAddress) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_CarrierDelay represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/carrier-delay YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_CarrierDelay struct {
	CarrierDelayDown *uint32 `path:"carrier-delay-down" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	CarrierDelayUp   *uint32 `path:"carrier-delay-up" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_CarrierDelay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_CarrierDelay) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_CarrierDelay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_CarrierDelay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_CarrierDelay) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_CarrierDelay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_CarrierDelay.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_CarrierDelay) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DampeningInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/dampening-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DampeningInformation struct {
	HalfLife            *uint32 `path:"half-life" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsSuppressedEnabled *bool   `path:"is-suppressed-enabled" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MaximumSuppressTime *uint32 `path:"maximum-suppress-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Penalty             *uint32 `path:"penalty" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RestartPenalty      *uint32 `path:"restart-penalty" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ReuseThreshold      *uint32 `path:"reuse-threshold" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SecondsRemaining    *uint32 `path:"seconds-remaining" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SuppressThreshold   *uint32 `path:"suppress-threshold" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DampeningInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DampeningInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DampeningInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DampeningInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DampeningInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DampeningInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DampeningInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DampeningInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DataRates represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/data-rates YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DataRates struct {
	Bandwidth            *uint64 `path:"bandwidth" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputDataRate        *uint64 `path:"input-data-rate" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputLoad            *uint8  `path:"input-load" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputPacketRate      *uint64 `path:"input-packet-rate" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LoadInterval         *uint32 `path:"load-interval" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputDataRate       *uint64 `path:"output-data-rate" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputLoad           *uint8  `path:"output-load" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputPacketRate     *uint64 `path:"output-packet-rate" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PeakInputDataRate    *uint64 `path:"peak-input-data-rate" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PeakInputPacketRate  *uint64 `path:"peak-input-packet-rate" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PeakOutputDataRate   *uint64 `path:"peak-output-data-rate" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PeakOutputPacketRate *uint64 `path:"peak-output-packet-rate" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Reliability          *uint8  `path:"reliability" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DataRates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DataRates) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DataRates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DataRates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DataRates) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DataRates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DataRates.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_DataRates) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation struct {
	Dot1QInformation      *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation      `path:"dot1q-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	EncapsulationType     E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum                                                                `path:"encapsulation-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	FrameRelayInformation *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_FrameRelayInformation `path:"frame-relay-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PppInformation        *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation        `path:"ppp-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation struct {
	EncapsulationDetails *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails `path:"encapsulation-details" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	VlanSwitched         *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched         `path:"vlan-switched" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails struct {
	Dot1AdDot1QStack       *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Dot1AdDot1QStack       `path:"dot1ad-dot1q-stack" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Dot1AdNativeTag        *uint16                                                                                                                                          `path:"dot1ad-native-tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Dot1AdOuterTag         *uint16                                                                                                                                          `path:"dot1ad-outer-tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Dot1AdTag              *uint16                                                                                                                                          `path:"dot1ad-tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NativeTag              *uint16                                                                                                                                          `path:"native-tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OuterTag               *uint16                                                                                                                                          `path:"outer-tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ServiceInstanceDetails *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails `path:"service-instance-details" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Stack                  *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Stack                  `path:"stack" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Tag                    *uint16                                                                                                                                          `path:"tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	VlanEncapsulation      E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps                                                                                                            `path:"vlan-encapsulation" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Dot1AdDot1QStack represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/dot1ad-dot1q-stack YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Dot1AdDot1QStack struct {
	OuterTag  *uint16 `path:"outer-tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SecondTag *uint16 `path:"second-tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Dot1AdDot1QStack implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Dot1AdDot1QStack) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Dot1AdDot1QStack) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Dot1AdDot1QStack"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Dot1AdDot1QStack) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Dot1AdDot1QStack) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Dot1AdDot1QStack.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Dot1AdDot1QStack) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/service-instance-details YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails struct {
	DestinationMacMatch *string                                                                                                                                                            `path:"destination-mac-match" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsExactMatch        *int32                                                                                                                                                             `path:"is-exact-match" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsNativePreserving  *int32                                                                                                                                                             `path:"is-native-preserving" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsNativeVlan        *int32                                                                                                                                                             `path:"is-native-vlan" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LocalTrafficStack   *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack `path:"local-traffic-stack" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PayloadEthertype    E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype                                                                                                                         `path:"payload-ethertype" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Pushe               []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_Pushe           `path:"pushe" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SourceMacMatch      *string                                                                                                                                                            `path:"source-mac-match" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TagsPopped          *uint16                                                                                                                                                            `path:"tags-popped" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TagsToMatch         []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch     `path:"tags-to-match" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/service-instance-details/local-traffic-stack YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack struct {
	LocalTrafficTag []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack_LocalTrafficTag `path:"local-traffic-tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack_LocalTrafficTag represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/service-instance-details/local-traffic-stack/local-traffic-tag YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack_LocalTrafficTag struct {
	Ethertype E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype `path:"ethertype" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	VlanId    *uint16                                `path:"vlan-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack_LocalTrafficTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack_LocalTrafficTag) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack_LocalTrafficTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack_LocalTrafficTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack_LocalTrafficTag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack_LocalTrafficTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack_LocalTrafficTag.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_LocalTrafficStack_LocalTrafficTag) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_Pushe represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/service-instance-details/pushe YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_Pushe struct {
	Ethertype E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype `path:"ethertype" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	VlanId    *uint16                                `path:"vlan-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_Pushe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_Pushe) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_Pushe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_Pushe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_Pushe) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_Pushe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_Pushe.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_Pushe) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/service-instance-details/tags-to-match YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch struct {
	Ethertype E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype                                                                                                                                   `path:"ethertype" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Priority  E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority                                                                                                                                `path:"priority" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	VlanRange []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch_VlanRange `path:"vlan-range" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch_VlanRange represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/service-instance-details/tags-to-match/vlan-range YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch_VlanRange struct {
	VlanIdHigh *uint16 `path:"vlan-id-high" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	VlanIdLow  *uint16 `path:"vlan-id-low" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch_VlanRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch_VlanRange) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch_VlanRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch_VlanRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch_VlanRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch_VlanRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch_VlanRange.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_ServiceInstanceDetails_TagsToMatch_VlanRange) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Stack represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/stack YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Stack struct {
	OuterTag  *uint16 `path:"outer-tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SecondTag *uint16 `path:"second-tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Stack implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Stack) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Stack) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Stack"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Stack) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Stack) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Stack.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_EncapsulationDetails_Stack) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched struct {
	AccessVlan      *uint16                                                                                                                           `path:"access-vlan" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Mode            E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode                                                                                       `path:"mode" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TrunkVlanRanges *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges `path:"trunk-vlan-ranges" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/trunk-vlan-ranges YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges struct {
	DestinationMacMatch *string                                                                                                                                             `path:"destination-mac-match" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsExactMatch        *int32                                                                                                                                              `path:"is-exact-match" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsNativePreserving  *int32                                                                                                                                              `path:"is-native-preserving" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsNativeVlan        *int32                                                                                                                                              `path:"is-native-vlan" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LocalTrafficStack   *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack `path:"local-traffic-stack" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PayloadEthertype    E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype                                                                                                          `path:"payload-ethertype" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Pushe               []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_Pushe           `path:"pushe" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SourceMacMatch      *string                                                                                                                                             `path:"source-mac-match" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TagsPopped          *uint16                                                                                                                                             `path:"tags-popped" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TagsToMatch         []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch     `path:"tags-to-match" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/trunk-vlan-ranges/local-traffic-stack YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack struct {
	LocalTrafficTag []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack_LocalTrafficTag `path:"local-traffic-tag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack_LocalTrafficTag represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/trunk-vlan-ranges/local-traffic-stack/local-traffic-tag YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack_LocalTrafficTag struct {
	Ethertype E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype `path:"ethertype" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	VlanId    *uint16                                `path:"vlan-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack_LocalTrafficTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack_LocalTrafficTag) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack_LocalTrafficTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack_LocalTrafficTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack_LocalTrafficTag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack_LocalTrafficTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack_LocalTrafficTag.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_LocalTrafficStack_LocalTrafficTag) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_Pushe represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/trunk-vlan-ranges/pushe YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_Pushe struct {
	Ethertype E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype `path:"ethertype" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	VlanId    *uint16                                `path:"vlan-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_Pushe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_Pushe) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_Pushe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_Pushe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_Pushe) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_Pushe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_Pushe.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_Pushe) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/trunk-vlan-ranges/tags-to-match YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch struct {
	Ethertype E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype                                                                                                                    `path:"ethertype" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Priority  E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority                                                                                                                 `path:"priority" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	VlanRange []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch_VlanRange `path:"vlan-range" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch_VlanRange represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/trunk-vlan-ranges/tags-to-match/vlan-range YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch_VlanRange struct {
	VlanIdHigh *uint16 `path:"vlan-id-high" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	VlanIdLow  *uint16 `path:"vlan-id-low" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch_VlanRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch_VlanRange) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch_VlanRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch_VlanRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch_VlanRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch_VlanRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch_VlanRange.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_Dot1QInformation_VlanSwitched_TrunkVlanRanges_TagsToMatch_VlanRange) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_FrameRelayInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/frame-relay-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_FrameRelayInformation struct {
	EnquiriesReceived    *uint32                                     `path:"enquiries-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	EnquiriesSent        *uint32                                     `path:"enquiries-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	FrEncapsulationType  E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum  `path:"fr-encapsulation-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsDte                *bool                                       `path:"is-dte" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsLmiEnabled         *bool                                       `path:"is-lmi-enabled" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsLmiNniDceUp        *bool                                       `path:"is-lmi-nni-dce-up" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsLmiUp              *bool                                       `path:"is-lmi-up" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsNni                *bool                                       `path:"is-nni" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LmiType              E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum `path:"lmi-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Lmidlci              *uint32                                     `path:"lmidlci" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	StatusReceived       *uint32                                     `path:"status-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	StatusSent           *uint32                                     `path:"status-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	UpdateStatusReceived *uint32                                     `path:"update-status-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	UpdateStatusSent     *uint32                                     `path:"update-status-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_FrameRelayInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_FrameRelayInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_FrameRelayInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_FrameRelayInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_FrameRelayInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_FrameRelayInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_FrameRelayInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_FrameRelayInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/ppp-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation struct {
	IsLoopbackDetected *int32                                                                                                            `path:"is-loopback-detected" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsMpBundleMember   *int32                                                                                                            `path:"is-mp-bundle-member" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsMultilinkOpen    *int32                                                                                                            `path:"is-multilink-open" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	KeepalivePeriod    *uint32                                                                                                           `path:"keepalive-period" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LcpState           E_Cisco_IOS_XRPfiImCmdOper_PppFsmState                                                                            `path:"lcp-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NcpInfoArray       []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation_NcpInfoArray `path:"ncp-info-array" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation_NcpInfoArray represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/encapsulation-information/ppp-information/ncp-info-array YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation_NcpInfoArray struct {
	NcpIdentifier E_Cisco_IOS_XRPfiImCmdOper_NcpIdent    `path:"ncp-identifier" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NcpState      E_Cisco_IOS_XRPfiImCmdOper_PppFsmState `path:"ncp-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation_NcpInfoArray implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation_NcpInfoArray) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation_NcpInfoArray) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation_NcpInfoArray"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation_NcpInfoArray) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation_NcpInfoArray) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation_NcpInfoArray.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_EncapsulationInformation_PppInformation_NcpInfoArray) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-statistics YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics struct {
	BasicInterfaceStats *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_BasicInterfaceStats `path:"basic-interface-stats" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	FullInterfaceStats  *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_FullInterfaceStats  `path:"full-interface-stats" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	StatsType           E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum                                                          `path:"stats-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_BasicInterfaceStats represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-statistics/basic-interface-stats YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_BasicInterfaceStats struct {
	BytesReceived                  *uint64 `path:"bytes-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	BytesSent                      *uint64 `path:"bytes-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputDrops                     *uint32 `path:"input-drops" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputErrors                    *uint32 `path:"input-errors" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputQueueDrops                *uint32 `path:"input-queue-drops" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LastDataTime                   *uint32 `path:"last-data-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LastDiscontinuityTime          *uint32 `path:"last-discontinuity-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputDrops                    *uint32 `path:"output-drops" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputErrors                   *uint32 `path:"output-errors" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputQueueDrops               *uint32 `path:"output-queue-drops" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PacketsReceived                *uint64 `path:"packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PacketsSent                    *uint64 `path:"packets-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SecondsSinceLastClearCounters  *uint32 `path:"seconds-since-last-clear-counters" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SecondsSincePacketReceived     *uint32 `path:"seconds-since-packet-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SecondsSincePacketSent         *uint32 `path:"seconds-since-packet-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	UnknownProtocolPacketsReceived *uint32 `path:"unknown-protocol-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_BasicInterfaceStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_BasicInterfaceStats) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_BasicInterfaceStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_BasicInterfaceStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_BasicInterfaceStats) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_BasicInterfaceStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_BasicInterfaceStats.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_BasicInterfaceStats) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_FullInterfaceStats represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-statistics/full-interface-stats YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_FullInterfaceStats struct {
	Applique                       *uint32 `path:"applique" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	AvailabilityFlag               *uint32 `path:"availability-flag" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	BroadcastPacketsReceived       *uint64 `path:"broadcast-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	BroadcastPacketsSent           *uint64 `path:"broadcast-packets-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	BytesReceived                  *uint64 `path:"bytes-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	BytesSent                      *uint64 `path:"bytes-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	CarrierTransitions             *uint32 `path:"carrier-transitions" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	CrcErrors                      *uint32 `path:"crc-errors" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	FramingErrorsReceived          *uint32 `path:"framing-errors-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	GiantPacketsReceived           *uint32 `path:"giant-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	HardwareTimestamp              *uint64 `path:"hardware-timestamp" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputAborts                    *uint32 `path:"input-aborts" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputDrops                     *uint32 `path:"input-drops" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputErrors                    *uint32 `path:"input-errors" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputIgnoredPackets            *uint32 `path:"input-ignored-packets" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputOverruns                  *uint32 `path:"input-overruns" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputQueueDrops                *uint32 `path:"input-queue-drops" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LastDataTime                   *uint64 `path:"last-data-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LastDiscontinuityTime          *uint32 `path:"last-discontinuity-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MulticastPacketsReceived       *uint64 `path:"multicast-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MulticastPacketsSent           *uint64 `path:"multicast-packets-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputBufferFailures           *uint32 `path:"output-buffer-failures" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputBuffersSwappedOut        *uint32 `path:"output-buffers-swapped-out" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputDrops                    *uint32 `path:"output-drops" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputErrors                   *uint32 `path:"output-errors" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputQueueDrops               *uint32 `path:"output-queue-drops" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OutputUnderruns                *uint32 `path:"output-underruns" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PacketsReceived                *uint64 `path:"packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PacketsSent                    *uint64 `path:"packets-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ParityPacketsReceived          *uint32 `path:"parity-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Resets                         *uint32 `path:"resets" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RuntPacketsReceived            *uint32 `path:"runt-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SecondsSinceLastClearCounters  *uint32 `path:"seconds-since-last-clear-counters" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SecondsSincePacketReceived     *uint32 `path:"seconds-since-packet-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SecondsSincePacketSent         *uint32 `path:"seconds-since-packet-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ThrottledPacketsReceived       *uint32 `path:"throttled-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	UnknownProtocolPacketsReceived *uint32 `path:"unknown-protocol-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_FullInterfaceStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_FullInterfaceStats) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_FullInterfaceStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_FullInterfaceStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_FullInterfaceStats) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_FullInterfaceStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_FullInterfaceStats.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceStatistics_FullInterfaceStats) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation struct {
	BundleInformation            *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation            `path:"bundle-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	CemInformation               *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_CemInformation               `path:"cem-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	GccInformation               *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_GccInformation               `path:"gcc-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceTypeInfo            E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum                                                                     `path:"interface-type-info" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PseudowireHeadEndInformation *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_PseudowireHeadEndInformation `path:"pseudowire-head-end-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SerialInformation            *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SerialInformation            `path:"serial-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SonetPosInformation          *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SonetPosInformation          `path:"sonet-pos-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SrpInformation               *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation               `path:"srp-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TunnelGreInformation         *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation         `path:"tunnel-gre-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TunnelInformation            *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelInformation            `path:"tunnel-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/bundle-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation struct {
	Member []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member `path:"member" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/bundle-information/member YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member struct {
	Bandwidth        *uint32                                                                                                                    `path:"bandwidth" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Bandwidth64Bit   *uint64                                                                                                                    `path:"bandwidth64-bit" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Counters         *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_Counters      `path:"counters" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IccpNode         *uint32                                                                                                                    `path:"iccp-node" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceName    *string                                                                                                                    `path:"interface-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LacpEnabled      *string                                                                                                                    `path:"lacp-enabled" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LinkData         *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_LinkData      `path:"link-data" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LinkOrderNumber  *uint16                                                                                                                    `path:"link-order-number" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAddress       *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MacAddress    `path:"mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MemberMuxData    *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData `path:"member-mux-data" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MemberName       *string                                                                                                                    `path:"member-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MemberType       E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum                                                                               `path:"member-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PortNumber       *uint16                                                                                                                    `path:"port-number" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PortPriority     *uint16                                                                                                                    `path:"port-priority" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ReplicationError *uint32                                                                                                                    `path:"replication-error" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	UnderlyingLinkId *uint16                                                                                                                    `path:"underlying-link-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_Counters represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/counters YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_Counters struct {
	Defaulted                   *uint32 `path:"defaulted" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ExcessLacpdUsReceived       *uint32 `path:"excess-lacpd-us-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ExcessMarkerPacketsReceived *uint32 `path:"excess-marker-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Expired                     *uint32 `path:"expired" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IllegalPacketsReceived      *uint32 `path:"illegal-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LacpdUsReceived             *uint32 `path:"lacpd-us-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LacpdUsTransmitted          *uint32 `path:"lacpd-us-transmitted" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LastClearedNsec             *uint32 `path:"last-cleared-nsec" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LastClearedSec              *uint32 `path:"last-cleared-sec" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MarkerPacketsReceived       *uint32 `path:"marker-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MarkerResponsesTransmitted  *uint32 `path:"marker-responses-transmitted" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_Counters.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_Counters) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_LinkData represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/link-data YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_LinkData struct {
	ActorOperationalKey     *uint16 `path:"actor-operational-key" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ActorPortId             *uint16 `path:"actor-port-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ActorPortPriority       *uint16 `path:"actor-port-priority" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ActorPortState          *uint8  `path:"actor-port-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ActorSystemMacAddress   *string `path:"actor-system-mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ActorSystemPriority     *uint16 `path:"actor-system-priority" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	AttachedAggregatorId    *uint32 `path:"attached-aggregator-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceHandle         *string `path:"interface-handle" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PartnerOperationalKey   *uint16 `path:"partner-operational-key" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PartnerPortId           *uint16 `path:"partner-port-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PartnerPortPriority     *uint16 `path:"partner-port-priority" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PartnerPortState        *uint8  `path:"partner-port-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PartnerSystemMacAddress *string `path:"partner-system-mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PartnerSystemPriority   *uint16 `path:"partner-system-priority" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SelectedAggregatorId    *uint32 `path:"selected-aggregator-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_LinkData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_LinkData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_LinkData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_LinkData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_LinkData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_LinkData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_LinkData.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_LinkData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MacAddress represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/mac-address YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MacAddress struct {
	Address *string `path:"address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MacAddress) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MacAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MacAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MacAddress.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MacAddress) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/member-mux-data YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData struct {
	Error                    *uint32                                                                                                                                             `path:"error" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MemberMuxStateReason     E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason                                                                                                         `path:"member-mux-state-reason" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MemberMuxStateReasonData *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData_MemberMuxStateReasonData `path:"member-mux-state-reason-data" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MemberState              E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState                                                                                                           `path:"member-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MuxState                 E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate                                                                                                               `path:"mux-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MuxStateReason           E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason                                                                                                              `path:"mux-state-reason" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData_MemberMuxStateReasonData represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/member-mux-data/member-mux-state-reason-data YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData_MemberMuxStateReasonData struct {
	ReasonType E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget `path:"reason-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Severity   E_Cisco_IOS_XRPfiImCmdOper_BmSeverity          `path:"severity" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData_MemberMuxStateReasonData implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData_MemberMuxStateReasonData) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData_MemberMuxStateReasonData) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData_MemberMuxStateReasonData"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData_MemberMuxStateReasonData) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData_MemberMuxStateReasonData) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData_MemberMuxStateReasonData.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_BundleInformation_Member_MemberMuxData_MemberMuxStateReasonData) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_CemInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/cem-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_CemInformation struct {
	DejitterBuffer *uint16 `path:"dejitter-buffer" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Framing        *int32  `path:"framing" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Payload        *uint16 `path:"payload" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Timeslots      *string `path:"timeslots" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_CemInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_CemInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_CemInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_CemInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_CemInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_CemInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_CemInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_CemInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_GccInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/gcc-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_GccInformation struct {
	DerivedMode E_Cisco_IOS_XRPfiImCmdOper_GccDerState `path:"derived-mode" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SecState    E_Cisco_IOS_XRPfiImCmdOper_GccSecState `path:"sec-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_GccInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_GccInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_GccInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_GccInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_GccInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_GccInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_GccInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_GccInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_PseudowireHeadEndInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/pseudowire-head-end-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_PseudowireHeadEndInformation struct {
	InterfaceListName *string `path:"interface-list-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InternalLabel     *uint32 `path:"internal-label" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	L2Overhead        *uint32 `path:"l2-overhead" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_PseudowireHeadEndInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_PseudowireHeadEndInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_PseudowireHeadEndInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_PseudowireHeadEndInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_PseudowireHeadEndInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_PseudowireHeadEndInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_PseudowireHeadEndInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_PseudowireHeadEndInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SerialInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/serial-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SerialInformation struct {
	Timeslots *string `path:"timeslots" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SerialInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SerialInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SerialInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SerialInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SerialInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SerialInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SerialInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SerialInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SonetPosInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/sonet-pos-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SonetPosInformation struct {
	ApsState E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt `path:"aps-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SonetPosInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SonetPosInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SonetPosInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SonetPosInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SonetPosInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SonetPosInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SonetPosInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SonetPosInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation struct {
	SrpInformation *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation `path:"srp-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SrpStatistics  *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics  `path:"srp-statistics" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation struct {
	IpsInfo       *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo       `path:"ips-info" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RateLimitInfo *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo `path:"rate-limit-info" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SrrInfo       *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo       `path:"srr-info" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TopologyInfo  *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo  `path:"topology-info" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo struct {
	IsAdminDown      *int32                                                                                                                                       `path:"is-admin-down" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LocalInformation []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation `path:"local-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation struct {
	IsInterCardBusEnabled *int32                                                                                                                                           `path:"is-inter-card-bus-enabled" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAddress            *string                                                                                                                                          `path:"mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SideA                 *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA `path:"side-a" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SideB                 *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB `path:"side-b" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	WtrTimerPeriod        *uint32                                                                                                                                          `path:"wtr-timer-period" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA struct {
	AssertedFailure        []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA_AssertedFailure `path:"asserted-failure" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DelayKeepAliveTrigger  *uint32                                                                                                                                                            `path:"delay-keep-alive-trigger" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAddress             *string                                                                                                                                                            `path:"mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PacketSentTimer        *uint32                                                                                                                                                            `path:"packet-sent-timer" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RemoteRequest          E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq                                                                                                                           `path:"remote-request" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RxMessageType          E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq                                                                                                                           `path:"rx-message-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RxNeighborMacAddress   *string                                                                                                                                                            `path:"rx-neighbor-mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RxPacketTest           *int32                                                                                                                                                             `path:"rx-packet-test" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RxPathType             E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd                                                                                                                       `path:"rx-path-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RxTtl                  *uint32                                                                                                                                                            `path:"rx-ttl" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SelfDetectedRequest    E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq                                                                                                                           `path:"self-detected-request" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SendTimerTimeRemaining *uint32                                                                                                                                                            `path:"send-timer-time-remaining" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TxMessageType          E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq                                                                                                                           `path:"tx-message-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TxNeighborMacAddress   *string                                                                                                                                                            `path:"tx-neighbor-mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TxPacketTest           *int32                                                                                                                                                             `path:"tx-packet-test" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TxPathType             E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd                                                                                                                       `path:"tx-path-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TxTtl                  *uint32                                                                                                                                                            `path:"tx-ttl" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	WrapState              E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState                                                                                                                     `path:"wrap-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	WtrTimerRemaining      *uint32                                                                                                                                                            `path:"wtr-timer-remaining" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA_AssertedFailure represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/asserted-failure YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA_AssertedFailure struct {
	CurrentState   E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt `path:"current-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DebouncedDelay *uint32                                          `path:"debounced-delay" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DebouncedState E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt `path:"debounced-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ReportedState  E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt `path:"reported-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	StableTime     *uint64                                          `path:"stable-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Type           E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt      `path:"type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA_AssertedFailure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA_AssertedFailure) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA_AssertedFailure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA_AssertedFailure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA_AssertedFailure) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA_AssertedFailure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA_AssertedFailure.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideA_AssertedFailure) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB struct {
	AssertedFailure        []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB_AssertedFailure `path:"asserted-failure" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DelayKeepAliveTrigger  *uint32                                                                                                                                                            `path:"delay-keep-alive-trigger" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAddress             *string                                                                                                                                                            `path:"mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PacketSentTimer        *uint32                                                                                                                                                            `path:"packet-sent-timer" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RemoteRequest          E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq                                                                                                                           `path:"remote-request" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RxMessageType          E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq                                                                                                                           `path:"rx-message-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RxNeighborMacAddress   *string                                                                                                                                                            `path:"rx-neighbor-mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RxPacketTest           *int32                                                                                                                                                             `path:"rx-packet-test" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RxPathType             E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd                                                                                                                       `path:"rx-path-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RxTtl                  *uint32                                                                                                                                                            `path:"rx-ttl" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SelfDetectedRequest    E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq                                                                                                                           `path:"self-detected-request" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SendTimerTimeRemaining *uint32                                                                                                                                                            `path:"send-timer-time-remaining" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TxMessageType          E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq                                                                                                                           `path:"tx-message-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TxNeighborMacAddress   *string                                                                                                                                                            `path:"tx-neighbor-mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TxPacketTest           *int32                                                                                                                                                             `path:"tx-packet-test" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TxPathType             E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd                                                                                                                       `path:"tx-path-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TxTtl                  *uint32                                                                                                                                                            `path:"tx-ttl" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	WrapState              E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState                                                                                                                     `path:"wrap-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	WtrTimerRemaining      *uint32                                                                                                                                                            `path:"wtr-timer-remaining" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB_AssertedFailure represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/asserted-failure YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB_AssertedFailure struct {
	CurrentState   E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt `path:"current-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DebouncedDelay *uint32                                          `path:"debounced-delay" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DebouncedState E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt `path:"debounced-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ReportedState  E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt `path:"reported-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	StableTime     *uint64                                          `path:"stable-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Type           E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt      `path:"type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB_AssertedFailure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB_AssertedFailure) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB_AssertedFailure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB_AssertedFailure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB_AssertedFailure) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB_AssertedFailure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB_AssertedFailure.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_IpsInfo_LocalInformation_SideB_AssertedFailure) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/rate-limit-info YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo struct {
	IsAdminDown           *int32                                                                                                                                                  `path:"is-admin-down" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RateLimitDetailedInfo []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo_RateLimitDetailedInfo `path:"rate-limit-detailed-info" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo_RateLimitDetailedInfo represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/rate-limit-info/rate-limit-detailed-info YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo_RateLimitDetailedInfo struct {
	MinPriorityValue *uint16 `path:"min-priority-value" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo_RateLimitDetailedInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo_RateLimitDetailedInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo_RateLimitDetailedInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo_RateLimitDetailedInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo_RateLimitDetailedInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo_RateLimitDetailedInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo_RateLimitDetailedInfo.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_RateLimitInfo_RateLimitDetailedInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/srr-info YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo struct {
	IsAdminDown     *int32                                                                                                                                      `path:"is-admin-down" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsSrrEnabled    *int32                                                                                                                                      `path:"is-srr-enabled" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SrrDetailedInfo []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo `path:"srr-detailed-info" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/srr-info/srr-detailed-info YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo struct {
	InnerFailType               E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure                                                                                                               `path:"inner-fail-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsAnnounce                  *int32                                                                                                                                                     `path:"is-announce" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsInnerRingInUse            *int32                                                                                                                                                     `path:"is-inner-ring-in-use" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsOuterRingInUse            *int32                                                                                                                                                     `path:"is-outer-ring-in-use" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsWrongVersionReceived      *int32                                                                                                                                                     `path:"is-wrong-version-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LastWrongVersionReceiveTime *uint32                                                                                                                                                    `path:"last-wrong-version-receive-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAddress                  *string                                                                                                                                                    `path:"mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NextSrrPacketSendTime       *uint32                                                                                                                                                    `path:"next-srr-packet-send-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NodeState                   E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState                                                                                                             `path:"node-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NodesNotOnRing              []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesNotOnRing `path:"nodes-not-on-ring" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NodesOnRing                 []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesOnRing    `path:"nodes-on-ring" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OuterFailType               E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure                                                                                                               `path:"outer-fail-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PacketSendTimer             *uint32                                                                                                                                                    `path:"packet-send-timer" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SingleRingBw                *uint32                                                                                                                                                    `path:"single-ring-bw" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	VersionNumber               *uint32                                                                                                                                                    `path:"version-number" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	WtrTime                     *uint32                                                                                                                                                    `path:"wtr-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	WtrTimerRemainingInnerRing  *uint32                                                                                                                                                    `path:"wtr-timer-remaining-inner-ring" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	WtrTimerRemainingOuterRing  *uint32                                                                                                                                                    `path:"wtr-timer-remaining-outer-ring" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesNotOnRing represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/srr-info/srr-detailed-info/nodes-not-on-ring YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesNotOnRing struct {
	InnerFailure             E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure `path:"inner-failure" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsLastAnnounceReceived   *int32                                       `path:"is-last-announce-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LastAnnounceReceivedTime *uint32                                      `path:"last-announce-received-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAddress               *string                                      `path:"mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NodeName                 *string                                      `path:"node-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OuterFailure             E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure `path:"outer-failure" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SrrEntryExits            *int32                                       `path:"srr-entry-exits" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesNotOnRing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesNotOnRing) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesNotOnRing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesNotOnRing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesNotOnRing) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesNotOnRing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesNotOnRing.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesNotOnRing) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesOnRing represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/srr-info/srr-detailed-info/nodes-on-ring YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesOnRing struct {
	InnerFailure             E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure `path:"inner-failure" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsLastAnnounceReceived   *int32                                       `path:"is-last-announce-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LastAnnounceReceivedTime *uint32                                      `path:"last-announce-received-time" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAddress               *string                                      `path:"mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NodeName                 *string                                      `path:"node-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	OuterFailure             E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure `path:"outer-failure" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SrrEntryExits            *int32                                       `path:"srr-entry-exits" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesOnRing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesOnRing) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesOnRing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesOnRing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesOnRing) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesOnRing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesOnRing.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_SrrInfo_SrrDetailedInfo_NodesOnRing) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/topology-info YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo struct {
	IsAdminDown      *int32                                                                                                                                            `path:"is-admin-down" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LocalInformation []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation `path:"local-information" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/topology-info/local-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation struct {
	NextTopologyPacketDelay             *uint32                                                                                                                                                    `path:"next-topology-packet-delay" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NumberOfNodesOnRing                 *uint16                                                                                                                                                    `path:"number-of-nodes-on-ring" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	RingNode                            []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation_RingNode `path:"ring-node" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TimeSinceLastTopologyChange         *uint32                                                                                                                                                    `path:"time-since-last-topology-change" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TimeSinceLastTopologyPacketReceived *uint32                                                                                                                                                    `path:"time-since-last-topology-packet-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TopologyTimer                       *uint32                                                                                                                                                    `path:"topology-timer" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation_RingNode represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/topology-info/local-information/ring-node YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation_RingNode struct {
	HopCount       *uint16 `path:"hop-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Ipv4Address    *string `path:"ipv4-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsSrrSupported *int32  `path:"is-srr-supported" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IsWrapped      *int32  `path:"is-wrapped" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAddress     *string `path:"mac-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NodeName       *string `path:"node-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation_RingNode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation_RingNode) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation_RingNode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation_RingNode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation_RingNode) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation_RingNode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation_RingNode.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpInformation_TopologyInfo_LocalInformation_RingNode) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-statistics YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics struct {
	DataRateInterval *uint32                                                                                                                        `path:"data-rate-interval" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SideADataRate    *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideADataRate `path:"side-a-data-rate" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SideAErrors      *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideAErrors   `path:"side-a-errors" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SideBDataRate    *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBDataRate `path:"side-b-data-rate" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SideBErrors      *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBErrors   `path:"side-b-errors" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideADataRate represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-statistics/side-a-data-rate YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideADataRate struct {
	BitRateReceived    *uint32 `path:"bit-rate-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	BitRateSent        *uint32 `path:"bit-rate-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PacketRateReceived *uint32 `path:"packet-rate-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PacketRateSent     *uint32 `path:"packet-rate-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideADataRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideADataRate) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideADataRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideADataRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideADataRate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideADataRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideADataRate.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideADataRate) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideAErrors represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-statistics/side-a-errors YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideAErrors struct {
	CrcErrors                       *uint32 `path:"crc-errors" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ErrorPacketsReceived            *uint32 `path:"error-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	FramerAbortsReceived            *uint32 `path:"framer-aborts-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	FramerGiantPacketsReceived      *uint32 `path:"framer-giant-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	FramerRuntPacketsReceived       *uint32 `path:"framer-runt-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputInsufficientResourceEvents *uint32 `path:"input-insufficient-resource-events" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAbortsReceived               *uint32 `path:"mac-aborts-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacGiantPacketsReceived         *uint32 `path:"mac-giant-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacRuntPacketsReceived          *uint32 `path:"mac-runt-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideAErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideAErrors) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideAErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideAErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideAErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideAErrors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideAErrors.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideAErrors) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBDataRate represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-statistics/side-b-data-rate YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBDataRate struct {
	BitRateReceived    *uint32 `path:"bit-rate-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	BitRateSent        *uint32 `path:"bit-rate-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PacketRateReceived *uint32 `path:"packet-rate-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	PacketRateSent     *uint32 `path:"packet-rate-sent" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBDataRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBDataRate) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBDataRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBDataRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBDataRate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBDataRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBDataRate.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBDataRate) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBErrors represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-statistics/side-b-errors YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBErrors struct {
	CrcErrors                       *uint32 `path:"crc-errors" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ErrorPacketsReceived            *uint32 `path:"error-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	FramerAbortsReceived            *uint32 `path:"framer-aborts-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	FramerGiantPacketsReceived      *uint32 `path:"framer-giant-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	FramerRuntPacketsReceived       *uint32 `path:"framer-runt-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InputInsufficientResourceEvents *uint32 `path:"input-insufficient-resource-events" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacAbortsReceived               *uint32 `path:"mac-aborts-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacGiantPacketsReceived         *uint32 `path:"mac-giant-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	MacRuntPacketsReceived          *uint32 `path:"mac-runt-packets-received" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBErrors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBErrors) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBErrors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBErrors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBErrors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBErrors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBErrors.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_SrpInformation_SrpStatistics_SideBErrors) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/tunnel-gre-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation struct {
	DestinationIpAddress       *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_DestinationIpAddress `path:"destination-ip-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DestinationIpAddressLength *uint8                                                                                                                        `path:"destination-ip-address-length" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DfBitState                 E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState                                                                                    `path:"df-bit-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	KeepaliveMaximumRetry      *uint8                                                                                                                        `path:"keepalive-maximum-retry" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	KeepalivePeriod            *uint16                                                                                                                       `path:"keepalive-period" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	KeepaliveState             E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState                                                                                    `path:"keepalive-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Key                        *uint32                                                                                                                       `path:"key" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	KeyBitState                E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState                                                                                     `path:"key-bit-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SourceIpAddress            *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_SourceIpAddress      `path:"source-ip-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SourceName                 *string                                                                                                                       `path:"source-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TunnelMode                 E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode                                                                                      `path:"tunnel-mode" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TunnelModeDirection        E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir                                                                                      `path:"tunnel-mode-direction" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TunnelTos                  *uint32                                                                                                                       `path:"tunnel-tos" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TunnelTtl                  *uint32                                                                                                                       `path:"tunnel-ttl" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_DestinationIpAddress represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/tunnel-gre-information/destination-ip-address YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_DestinationIpAddress struct {
	Afi  E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId `path:"afi" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Ipv4 *string                                `path:"ipv4" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Ipv6 *string                                `path:"ipv6" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_DestinationIpAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_DestinationIpAddress) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_DestinationIpAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_DestinationIpAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_DestinationIpAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_DestinationIpAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_DestinationIpAddress.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_DestinationIpAddress) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_SourceIpAddress represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/tunnel-gre-information/source-ip-address YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_SourceIpAddress struct {
	Afi  E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId `path:"afi" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Ipv4 *string                                `path:"ipv4" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Ipv6 *string                                `path:"ipv6" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_SourceIpAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_SourceIpAddress) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_SourceIpAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_SourceIpAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_SourceIpAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_SourceIpAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_SourceIpAddress.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelGreInformation_SourceIpAddress) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/interface-type-information/tunnel-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelInformation struct {
	DestinationIpv4Address *string `path:"destination-ipv4-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Key                    *uint32 `path:"key" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SourceIpv4Address      *string `path:"source-ipv4-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SourceName             *string `path:"source-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Ttl                    *uint32 `path:"ttl" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TunnelType             *string `path:"tunnel-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelInformation) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_InterfaceTypeInformation_TunnelInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_IpInformation represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/ip-information YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_IpInformation struct {
	IpAddress        *string `path:"ip-address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	SubnetMaskLength *uint32 `path:"subnet-mask-length" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_IpInformation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_IpInformation) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_IpInformation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_IpInformation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_IpInformation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_IpInformation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_IpInformation.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_IpInformation) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/l2-interface-statistics YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics struct {
	BlockArray   []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_BlockArray   `path:"block-array" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Contents     E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents                                                    `path:"contents" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	ElementArray []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray `path:"element-array" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	StatsId      *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_StatsId        `path:"stats-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	StatsType    *uint32                                                                                         `path:"stats-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_BlockArray represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/l2-interface-statistics/block-array YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_BlockArray struct {
	Count *uint32                                 `path:"count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Data  *string                                 `path:"data" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Type  E_Cisco_IOS_XRPfiImCmdOper_StatsCounter `path:"type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_BlockArray implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_BlockArray) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_BlockArray) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_BlockArray"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_BlockArray) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_BlockArray) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_BlockArray.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_BlockArray) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/l2-interface-statistics/element-array YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray struct {
	BlockArray []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray_BlockArray `path:"block-array" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Key        *string                                                                                                    `path:"key" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray_BlockArray represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/l2-interface-statistics/element-array/block-array YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray_BlockArray struct {
	Count *uint32                                 `path:"count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Data  *string                                 `path:"data" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Type  E_Cisco_IOS_XRPfiImCmdOper_StatsCounter `path:"type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray_BlockArray implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray_BlockArray) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray_BlockArray) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray_BlockArray"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray_BlockArray) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray_BlockArray) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray_BlockArray.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_ElementArray_BlockArray) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_StatsId represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/l2-interface-statistics/stats-id YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_StatsId struct {
	FeatureId       *uint32                            `path:"feature-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Id              *uint32                            `path:"id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	IdType          E_Cisco_IOS_XRPfiImCmdOper_StatsId `path:"id-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceHandle *string                            `path:"interface-handle" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NodeId          *string                            `path:"node-id" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Unused          *uint32                            `path:"unused" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_StatsId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_StatsId) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_StatsId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_StatsId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_StatsId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_StatsId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_StatsId.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_L2InterfaceStatistics_StatsId) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_MacAddress represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interface-xr/interface/mac-address YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_MacAddress struct {
	Address *string `path:"address" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_MacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_MacAddress) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_MacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_MacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_MacAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_MacAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_MacAddress.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InterfaceXr_Interface_MacAddress) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interfaces YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces struct {
	Interface map[string]*Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface `path:"interface" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces) NewInterface(InterfaceName string) (*Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/interfaces/interface YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface struct {
	Description   *string                                `path:"description" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	Interface     *string                                `path:"interface" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceName *string                                `path:"interface-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	LineState     E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum `path:"line-state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	State         E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum `path:"state" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_Interfaces_Interface) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/inventory-summary YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary struct {
	InterfaceCounts *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceCounts `path:"interface-counts" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceType   []*Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType `path:"interface-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceCounts represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/inventory-summary/interface-counts YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceCounts struct {
	AdminDownInterfaceCount *uint32 `path:"admin-down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DownInterfaceCount      *uint32 `path:"down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceCount          *uint32 `path:"interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	UpInterfaceCount        *uint32 `path:"up-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceCounts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceCounts) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceCounts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceCounts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceCounts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceCounts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceCounts.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceCounts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/inventory-summary/interface-type YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType struct {
	InterfaceCounts          *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType_InterfaceCounts `path:"interface-counts" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceTypeDescription *string                                                                             `path:"interface-type-description" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceTypeName        *string                                                                             `path:"interface-type-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType_InterfaceCounts represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/inventory-summary/interface-type/interface-counts YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType_InterfaceCounts struct {
	AdminDownInterfaceCount *uint32 `path:"admin-down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DownInterfaceCount      *uint32 `path:"down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceCount          *uint32 `path:"interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	UpInterfaceCount        *uint32 `path:"up-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType_InterfaceCounts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType_InterfaceCounts) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType_InterfaceCounts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType_InterfaceCounts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType_InterfaceCounts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType_InterfaceCounts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType_InterfaceCounts.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_InventorySummary_InterfaceType_InterfaceCounts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/node-type-sets YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets struct {
	NodeTypeSet []*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet `path:"node-type-set" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/node-type-sets/node-type-set YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet struct {
	InterfaceSummary *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary `path:"interface-summary" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	NodeName         *string                                                                        `path:"node-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	TypeSetName      E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet                                    `path:"type-set-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/node-type-sets/node-type-set/interface-summary YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary struct {
	InterfaceCounts *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceCounts `path:"interface-counts" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceType   []*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType `path:"interface-type" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceCounts represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/node-type-sets/node-type-set/interface-summary/interface-counts YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceCounts struct {
	AdminDownInterfaceCount *uint32 `path:"admin-down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DownInterfaceCount      *uint32 `path:"down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceCount          *uint32 `path:"interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	UpInterfaceCount        *uint32 `path:"up-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceCounts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceCounts) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceCounts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceCounts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceCounts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceCounts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceCounts.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceCounts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/node-type-sets/node-type-set/interface-summary/interface-type YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType struct {
	InterfaceCounts          *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType_InterfaceCounts `path:"interface-counts" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceTypeDescription *string                                                                                                      `path:"interface-type-description" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceTypeName        *string                                                                                                      `path:"interface-type-name" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType_InterfaceCounts represents the /Cisco-IOS-XR-pfi-im-cmd-oper/interfaces/node-type-sets/node-type-set/interface-summary/interface-type/interface-counts YANG schema element.
type Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType_InterfaceCounts struct {
	AdminDownInterfaceCount *uint32 `path:"admin-down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	DownInterfaceCount      *uint32 `path:"down-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	InterfaceCount          *uint32 `path:"interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
	UpInterfaceCount        *uint32 `path:"up-interface-count" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType_InterfaceCounts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType_InterfaceCounts) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType_InterfaceCounts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType_InterfaceCounts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType_InterfaceCounts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType_InterfaceCounts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType_InterfaceCounts.
func (*Cisco_IOS_XRPfiImCmdOper_Interfaces_NodeTypeSets_NodeTypeSet_InterfaceSummary_InterfaceType_InterfaceCounts) ΛBelongingModule() string {
	return "Cisco-IOS-XR-pfi-im-cmd-oper"
}

// Interfaces represents the /interfaces YANG schema element.
type Interfaces struct {
	Interfaces *Cisco_IOS_XRPfiImCmdOper_Interfaces `path:"interfaces" module:"Cisco-IOS-XR-pfi-im-cmd-oper"`
}

// IsYANGGoStruct ensures that Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interfaces) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Interfaces.
func (*Interfaces) ΛBelongingModule() string {
	return ""
}

// E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason. An additional value named
// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason.
func (E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason.
func (e E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_UNSET E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 0
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_unknown corresponds to the value bm_mbr_state_reason_unknown of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_unknown E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 1
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_unselectable_unknown corresponds to the value bm_mbr_state_reason_unselectable_unknown of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_unselectable_unknown E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 2
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_link_down corresponds to the value bm_mbr_state_reason_link_down of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_link_down E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 3
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_link_deleting corresponds to the value bm_mbr_state_reason_link_deleting of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_link_deleting E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 4
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_creating corresponds to the value bm_mbr_state_reason_creating of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_creating E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 5
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_creating corresponds to the value bm_mbr_state_reason_bundle_creating of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_creating E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 6
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_deleting corresponds to the value bm_mbr_state_reason_bundle_deleting of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_deleting E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 7
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_admin_down corresponds to the value bm_mbr_state_reason_bundle_admin_down of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_admin_down E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 8
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_replicating corresponds to the value bm_mbr_state_reason_replicating of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_replicating E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 9
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bandwidth corresponds to the value bm_mbr_state_reason_bandwidth of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bandwidth E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 10
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_loop_back corresponds to the value bm_mbr_state_reason_loop_back of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_loop_back E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 11
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_activity_type corresponds to the value bm_mbr_state_reason_activity_type of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_activity_type E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 12
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_shutdown corresponds to the value bm_mbr_state_reason_bundle_shutdown of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_shutdown E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 13
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_min_selected corresponds to the value bm_mbr_state_reason_min_selected of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_min_selected E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 14
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_max_selected corresponds to the value bm_mbr_state_reason_max_selected of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_max_selected E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 15
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_link_limit corresponds to the value bm_mbr_state_reason_link_limit of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_link_limit E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 16
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_active_limit corresponds to the value bm_mbr_state_reason_active_limit of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_active_limit E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 17
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_standby_unknown corresponds to the value bm_mbr_state_reason_standby_unknown of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_standby_unknown E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 18
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_expired corresponds to the value bm_mbr_state_reason_expired of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_expired E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 19
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_defaulted corresponds to the value bm_mbr_state_reason_defaulted of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_defaulted E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 20
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_act_or_not_agg corresponds to the value bm_mbr_state_reason_act_or_not_agg of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_act_or_not_agg E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 21
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_partner_not_agg corresponds to the value bm_mbr_state_reason_partner_not_agg of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_partner_not_agg E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 22
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_lagid corresponds to the value bm_mbr_state_reason_lagid of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_lagid E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 23
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_not_cfgd corresponds to the value bm_mbr_state_reason_bundle_not_cfgd of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_not_cfgd E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 24
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_not_ready corresponds to the value bm_mbr_state_reason_bundle_not_ready of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_not_ready E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 25
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_partner_ood corresponds to the value bm_mbr_state_reason_partner_ood of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_partner_ood E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 26
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_partner_not_in_sync corresponds to the value bm_mbr_state_reason_partner_not_in_sync of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_partner_not_in_sync E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 27
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_foreign_partner_oos corresponds to the value bm_mbr_state_reason_foreign_partner_oos of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_foreign_partner_oos E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 28
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_attach_unknown corresponds to the value bm_mbr_state_reason_attach_unknown of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_attach_unknown E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 29
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_partner_not_collecting corresponds to the value bm_mbr_state_reason_partner_not_collecting of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_partner_not_collecting E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 30
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_collect_unknown corresponds to the value bm_mbr_state_reason_collect_unknown of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_collect_unknown E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 31
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_standby_foreign corresponds to the value bm_mbr_state_reason_standby_foreign of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_standby_foreign E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 32
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_starting corresponds to the value bm_mbr_state_reason_bfd_starting of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_starting E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 33
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_down corresponds to the value bm_mbr_state_reason_bfd_down of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_down E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 34
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_nbr_unconfig corresponds to the value bm_mbr_state_reason_bfd_nbr_unconfig of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_nbr_unconfig E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 35
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp corresponds to the value bm_mbr_state_reason_mlacp of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 36
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_pe_isolated corresponds to the value bm_mbr_state_reason_pe_isolated of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_pe_isolated E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 37
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_forced_switchover corresponds to the value bm_mbr_state_reason_forced_switchover of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_forced_switchover E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 38
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_errdis_unknown corresponds to the value bm_mbr_state_reason_errdis_unknown of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_errdis_unknown E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 39
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_no_mbr_state_info corresponds to the value bm_mbr_state_reason_mlacp_no_mbr_state_info of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_no_mbr_state_info E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 40
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_active corresponds to the value bm_mbr_state_reason_active of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_active E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 41
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_state_info corresponds to the value bm_mbr_state_reason_mlacp_no_bdl_state_info of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_state_info E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 42
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_config_info corresponds to the value bm_mbr_state_reason_mlacp_no_bdl_config_info of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_config_info E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 43
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_sync corresponds to the value bm_mbr_state_reason_mlacp_no_bdl_sync of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_sync E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 44
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_bdl_has_no_peer corresponds to the value bm_mbr_state_reason_mlacp_bdl_has_no_peer of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_bdl_has_no_peer E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 45
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_nak corresponds to the value bm_mbr_state_reason_mlacp_nak of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_nak E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 46
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_transport_unavailable corresponds to the value bm_mbr_state_reason_mlacp_transport_unavailable of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_transport_unavailable E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 47
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_not_configured corresponds to the value bm_mbr_state_reason_mlacp_not_configured of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_not_configured E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 48
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_recovery_timer corresponds to the value bm_mbr_state_reason_recovery_timer of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_recovery_timer E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 49
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_standby corresponds to the value bm_mbr_state_reason_mlacp_standby of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_standby E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 50
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_maximized_out corresponds to the value bm_mbr_state_reason_maximized_out of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_maximized_out E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 51
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_peer_selected corresponds to the value bm_mbr_state_reason_mlacp_peer_selected of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_peer_selected E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 52
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_connect_timer_running corresponds to the value bm_mbr_state_reason_mlacp_connect_timer_running of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_mlacp_connect_timer_running E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 53
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_not_mlacp corresponds to the value bm_mbr_state_reason_bundle_not_mlacp of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_not_mlacp E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 54
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_no_lon corresponds to the value bm_mbr_state_reason_no_lon of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_no_lon E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 55
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_cumul_rel_bw_limit corresponds to the value bm_mbr_state_reason_cumul_rel_bw_limit of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_cumul_rel_bw_limit E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 56
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_no_mac corresponds to the value bm_mbr_state_reason_no_mac of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_no_mac E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 57
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_no_system_id corresponds to the value bm_mbr_state_reason_no_system_id of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_no_system_id E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 58
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_link_shutdown corresponds to the value bm_mbr_state_reason_link_shutdown of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_link_shutdown E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 59
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_activity_mlacp corresponds to the value bm_mbr_state_reason_activity_mlacp of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_activity_mlacp E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 60
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_activity_iccp corresponds to the value bm_mbr_state_reason_activity_iccp of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_activity_iccp E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 61
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_icpe_mlacp corresponds to the value bm_mbr_state_reason_bundle_icpe_mlacp of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_icpe_mlacp E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 62
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_no_link_num corresponds to the value bm_mbr_state_reason_no_link_num of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_no_link_num E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 63
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_standby_peer_higher_prio corresponds to the value bm_mbr_state_reason_standby_peer_higher_prio of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_standby_peer_higher_prio E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 64
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_red_state_standby corresponds to the value bm_mbr_state_reason_red_state_standby of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_red_state_standby E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 65
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_other_red_state_standby corresponds to the value bm_mbr_state_reason_other_red_state_standby of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_other_red_state_standby E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 66
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_hold_ing corresponds to the value bm_mbr_state_reason_hold_ing of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_hold_ing E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 67
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_error_disabled corresponds to the value bm_mbr_state_reason_bundle_error_disabled of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_error_disabled E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 68
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_efd_disabled corresponds to the value bm_mbr_state_reason_bundle_efd_disabled of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bundle_efd_disabled E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 69
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_singleton_pe_isolated corresponds to the value bm_mbr_state_reason_singleton_pe_isolated of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_singleton_pe_isolated E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 70
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_starting corresponds to the value bm_mbr_state_reason_bfd_ipv6_starting of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_starting E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 71
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_down corresponds to the value bm_mbr_state_reason_bfd_ipv6_down of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_down E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 72
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_nbr_unconfig corresponds to the value bm_mbr_state_reason_bfd_ipv6_nbr_unconfig of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_nbr_unconfig E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 73
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_timer_running corresponds to the value bm_mbr_state_reason_timer_running of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_timer_running E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 74
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_client_bundle_ctrl corresponds to the value bm_mbr_state_reason_client_bundle_ctrl of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_client_bundle_ctrl E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 75
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_lacp_oos corresponds to the value bm_mbr_state_reason_lacp_oos of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_lacp_oos E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 76
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_errdis_bundle_oos corresponds to the value bm_mbr_state_reason_errdis_bundle_oos of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_errdis_bundle_oos E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 77
	// Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_count corresponds to the value bm_mbr_state_reason_count of Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason
	Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason_bm_mbr_state_reason_count E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason = 78
)

// E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_BmMuxreason. An additional value named
// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_BmMuxreason implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_BmMuxreason can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_BmMuxreason.
func (E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason.
func (e E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_UNSET E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 0
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_no_reason corresponds to the value bm_mux_reason_no_reason of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_no_reason E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 1
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_link_down corresponds to the value bm_mux_reason_link_down of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_link_down E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 2
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_link_deleted corresponds to the value bm_mux_reason_link_deleted of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_link_deleted E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 3
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_duplex corresponds to the value bm_mux_reason_duplex of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_duplex E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 4
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_bandwidth corresponds to the value bm_mux_reason_bandwidth of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_bandwidth E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 5
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_loop_back corresponds to the value bm_mux_reason_loop_back of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_loop_back E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 6
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_activity_type corresponds to the value bm_mux_reason_activity_type of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_activity_type E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 7
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_link_limit corresponds to the value bm_mux_reason_link_limit of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_link_limit E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 8
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_shared corresponds to the value bm_mux_reason_shared of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_shared E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 9
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_lagid corresponds to the value bm_mux_reason_lagid of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_lagid E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 10
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_no_bundle corresponds to the value bm_mux_reason_no_bundle of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_no_bundle E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 11
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_no_primary corresponds to the value bm_mux_reason_no_primary of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_no_primary E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 12
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_bundle_down corresponds to the value bm_mux_reason_bundle_down of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_bundle_down E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 13
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_individual corresponds to the value bm_mux_reason_individual of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_individual E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 14
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_defaulted corresponds to the value bm_mux_reason_defaulted of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_defaulted E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 15
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_in_sync corresponds to the value bm_mux_reason_in_sync of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_in_sync E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 16
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_collecting corresponds to the value bm_mux_reason_collecting of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_collecting E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 17
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_active_link_limit corresponds to the value bm_mux_reason_active_link_limit of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_active_link_limit E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 18
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_distributing corresponds to the value bm_mux_reason_distributing of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_distributing E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 19
	// Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_count corresponds to the value bm_mux_reason_count of Cisco_IOS_XRPfiImCmdOper_BmMuxreason
	Cisco_IOS_XRPfiImCmdOper_BmMuxreason_bm_mux_reason_count E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason = 20
)

// E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_BmMuxstate. An additional value named
// Cisco_IOS_XRPfiImCmdOper_BmMuxstate_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_BmMuxstate implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_BmMuxstate can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_BmMuxstate.
func (E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate.
func (e E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_BmMuxstate_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_BmMuxstate
	Cisco_IOS_XRPfiImCmdOper_BmMuxstate_UNSET E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate = 0
	// Cisco_IOS_XRPfiImCmdOper_BmMuxstate_detached corresponds to the value detached of Cisco_IOS_XRPfiImCmdOper_BmMuxstate
	Cisco_IOS_XRPfiImCmdOper_BmMuxstate_detached E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate = 1
	// Cisco_IOS_XRPfiImCmdOper_BmMuxstate_waiting corresponds to the value waiting of Cisco_IOS_XRPfiImCmdOper_BmMuxstate
	Cisco_IOS_XRPfiImCmdOper_BmMuxstate_waiting E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate = 2
	// Cisco_IOS_XRPfiImCmdOper_BmMuxstate_attached corresponds to the value attached of Cisco_IOS_XRPfiImCmdOper_BmMuxstate
	Cisco_IOS_XRPfiImCmdOper_BmMuxstate_attached E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate = 3
	// Cisco_IOS_XRPfiImCmdOper_BmMuxstate_collecting corresponds to the value collecting of Cisco_IOS_XRPfiImCmdOper_BmMuxstate
	Cisco_IOS_XRPfiImCmdOper_BmMuxstate_collecting E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate = 4
	// Cisco_IOS_XRPfiImCmdOper_BmMuxstate_distributing corresponds to the value distributing of Cisco_IOS_XRPfiImCmdOper_BmMuxstate
	Cisco_IOS_XRPfiImCmdOper_BmMuxstate_distributing E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate = 5
	// Cisco_IOS_XRPfiImCmdOper_BmMuxstate_collecting_distributing corresponds to the value collecting_distributing of Cisco_IOS_XRPfiImCmdOper_BmMuxstate
	Cisco_IOS_XRPfiImCmdOper_BmMuxstate_collecting_distributing E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate = 6
)

// E_Cisco_IOS_XRPfiImCmdOper_BmSeverity is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_BmSeverity. An additional value named
// Cisco_IOS_XRPfiImCmdOper_BmSeverity_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_BmSeverity int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_BmSeverity implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_BmSeverity can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_BmSeverity) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_BmSeverity.
func (E_Cisco_IOS_XRPfiImCmdOper_BmSeverity) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_BmSeverity.
func (e E_Cisco_IOS_XRPfiImCmdOper_BmSeverity) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_BmSeverity")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_BmSeverity_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_BmSeverity
	Cisco_IOS_XRPfiImCmdOper_BmSeverity_UNSET E_Cisco_IOS_XRPfiImCmdOper_BmSeverity = 0
	// Cisco_IOS_XRPfiImCmdOper_BmSeverity_ok corresponds to the value ok of Cisco_IOS_XRPfiImCmdOper_BmSeverity
	Cisco_IOS_XRPfiImCmdOper_BmSeverity_ok E_Cisco_IOS_XRPfiImCmdOper_BmSeverity = 1
	// Cisco_IOS_XRPfiImCmdOper_BmSeverity_information corresponds to the value information of Cisco_IOS_XRPfiImCmdOper_BmSeverity
	Cisco_IOS_XRPfiImCmdOper_BmSeverity_information E_Cisco_IOS_XRPfiImCmdOper_BmSeverity = 2
	// Cisco_IOS_XRPfiImCmdOper_BmSeverity_misconfiguration corresponds to the value misconfiguration of Cisco_IOS_XRPfiImCmdOper_BmSeverity
	Cisco_IOS_XRPfiImCmdOper_BmSeverity_misconfiguration E_Cisco_IOS_XRPfiImCmdOper_BmSeverity = 3
	// Cisco_IOS_XRPfiImCmdOper_BmSeverity_warning corresponds to the value warning of Cisco_IOS_XRPfiImCmdOper_BmSeverity
	Cisco_IOS_XRPfiImCmdOper_BmSeverity_warning E_Cisco_IOS_XRPfiImCmdOper_BmSeverity = 4
	// Cisco_IOS_XRPfiImCmdOper_BmSeverity_error corresponds to the value error of Cisco_IOS_XRPfiImCmdOper_BmSeverity
	Cisco_IOS_XRPfiImCmdOper_BmSeverity_error E_Cisco_IOS_XRPfiImCmdOper_BmSeverity = 5
)

// E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget. An additional value named
// Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget.
func (E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget.
func (e E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget
	Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget_UNSET E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget = 0
	// Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget_member_reason corresponds to the value member_reason of Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget
	Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget_member_reason E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget = 1
	// Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget_bundle_reason corresponds to the value bundle_reason of Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget
	Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget_bundle_reason E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget = 2
)

// E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_BmdMemberState. An additional value named
// Cisco_IOS_XRPfiImCmdOper_BmdMemberState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_BmdMemberState implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_BmdMemberState can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_BmdMemberState.
func (E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState.
func (e E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_BmdMemberState_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_BmdMemberState
	Cisco_IOS_XRPfiImCmdOper_BmdMemberState_UNSET E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState = 0
	// Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_configured corresponds to the value bmd_mbr_state_configured of Cisco_IOS_XRPfiImCmdOper_BmdMemberState
	Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_configured E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState = 1
	// Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_standby corresponds to the value bmd_mbr_state_standby of Cisco_IOS_XRPfiImCmdOper_BmdMemberState
	Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_standby E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState = 2
	// Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_hot_standby corresponds to the value bmd_mbr_state_hot_standby of Cisco_IOS_XRPfiImCmdOper_BmdMemberState
	Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_hot_standby E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState = 3
	// Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_negotiating corresponds to the value bmd_mbr_state_negotiating of Cisco_IOS_XRPfiImCmdOper_BmdMemberState
	Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_negotiating E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState = 4
	// Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_bfd_running corresponds to the value bmd_mbr_state_bfd_running of Cisco_IOS_XRPfiImCmdOper_BmdMemberState
	Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_bfd_running E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState = 5
	// Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_active corresponds to the value bmd_mbr_state_active of Cisco_IOS_XRPfiImCmdOper_BmdMemberState
	Cisco_IOS_XRPfiImCmdOper_BmdMemberState_bmd_mbr_state_active E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState = 6
)

// E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum. An additional value named
// Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum.
func (E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum.
func (e E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum
	Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum_UNSET E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum = 0
	// Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum_bmd_mbr_local corresponds to the value bmd_mbr_local of Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum
	Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum_bmd_mbr_local E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum = 1
	// Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum_bmd_mbr_foreign corresponds to the value bmd_mbr_foreign of Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum
	Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum_bmd_mbr_foreign E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum = 2
	// Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum_bmd_mbr_unknown corresponds to the value bmd_mbr_unknown of Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum
	Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum_bmd_mbr_unknown E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum = 3
)

// E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype. An additional value named
// Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype.
func (E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype.
func (e E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype
	Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype_UNSET E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype = 0
	// Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype_payload_ethertype_any corresponds to the value payload_ethertype_any of Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype
	Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype_payload_ethertype_any E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype = 1
	// Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype_payload_ethertype_ip corresponds to the value payload_ethertype_ip of Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype
	Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype_payload_ethertype_ip E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype = 2
	// Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype_payload_ethertype_pppoe corresponds to the value payload_ethertype_pppoe of Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype
	Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype_payload_ethertype_pppoe E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype = 3
)

// E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_EfpTagEtype. An additional value named
// Cisco_IOS_XRPfiImCmdOper_EfpTagEtype_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_EfpTagEtype implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_EfpTagEtype can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_EfpTagEtype.
func (E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype.
func (e E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_EfpTagEtype_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_EfpTagEtype
	Cisco_IOS_XRPfiImCmdOper_EfpTagEtype_UNSET E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype = 0
	// Cisco_IOS_XRPfiImCmdOper_EfpTagEtype_untagged corresponds to the value untagged of Cisco_IOS_XRPfiImCmdOper_EfpTagEtype
	Cisco_IOS_XRPfiImCmdOper_EfpTagEtype_untagged E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype = 1
	// Cisco_IOS_XRPfiImCmdOper_EfpTagEtype_dot1q corresponds to the value dot1q of Cisco_IOS_XRPfiImCmdOper_EfpTagEtype
	Cisco_IOS_XRPfiImCmdOper_EfpTagEtype_dot1q E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype = 2
	// Cisco_IOS_XRPfiImCmdOper_EfpTagEtype_dot1ad corresponds to the value dot1ad of Cisco_IOS_XRPfiImCmdOper_EfpTagEtype
	Cisco_IOS_XRPfiImCmdOper_EfpTagEtype_dot1ad E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype = 3
)

// E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_EfpTagPriority. An additional value named
// Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_EfpTagPriority implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_EfpTagPriority can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_EfpTagPriority.
func (E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority.
func (e E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_EfpTagPriority
	Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_UNSET E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority = 0
	// Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority0 corresponds to the value priority0 of Cisco_IOS_XRPfiImCmdOper_EfpTagPriority
	Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority0 E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority = 1
	// Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority1 corresponds to the value priority1 of Cisco_IOS_XRPfiImCmdOper_EfpTagPriority
	Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority1 E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority = 2
	// Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority2 corresponds to the value priority2 of Cisco_IOS_XRPfiImCmdOper_EfpTagPriority
	Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority2 E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority = 3
	// Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority3 corresponds to the value priority3 of Cisco_IOS_XRPfiImCmdOper_EfpTagPriority
	Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority3 E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority = 4
	// Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority4 corresponds to the value priority4 of Cisco_IOS_XRPfiImCmdOper_EfpTagPriority
	Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority4 E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority = 5
	// Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority5 corresponds to the value priority5 of Cisco_IOS_XRPfiImCmdOper_EfpTagPriority
	Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority5 E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority = 6
	// Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority6 corresponds to the value priority6 of Cisco_IOS_XRPfiImCmdOper_EfpTagPriority
	Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority6 E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority = 7
	// Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority7 corresponds to the value priority7 of Cisco_IOS_XRPfiImCmdOper_EfpTagPriority
	Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority7 E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority = 8
	// Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority_any corresponds to the value priority_any of Cisco_IOS_XRPfiImCmdOper_EfpTagPriority
	Cisco_IOS_XRPfiImCmdOper_EfpTagPriority_priority_any E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority = 9
)

// E_Cisco_IOS_XRPfiImCmdOper_GccDerState is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_GccDerState. An additional value named
// Cisco_IOS_XRPfiImCmdOper_GccDerState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_GccDerState int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_GccDerState implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_GccDerState can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_GccDerState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_GccDerState.
func (E_Cisco_IOS_XRPfiImCmdOper_GccDerState) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_GccDerState.
func (e E_Cisco_IOS_XRPfiImCmdOper_GccDerState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_GccDerState")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_GccDerState_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_GccDerState
	Cisco_IOS_XRPfiImCmdOper_GccDerState_UNSET E_Cisco_IOS_XRPfiImCmdOper_GccDerState = 0
	// Cisco_IOS_XRPfiImCmdOper_GccDerState_in_service corresponds to the value in_service of Cisco_IOS_XRPfiImCmdOper_GccDerState
	Cisco_IOS_XRPfiImCmdOper_GccDerState_in_service E_Cisco_IOS_XRPfiImCmdOper_GccDerState = 1
	// Cisco_IOS_XRPfiImCmdOper_GccDerState_out_of_service corresponds to the value out_of_service of Cisco_IOS_XRPfiImCmdOper_GccDerState
	Cisco_IOS_XRPfiImCmdOper_GccDerState_out_of_service E_Cisco_IOS_XRPfiImCmdOper_GccDerState = 2
	// Cisco_IOS_XRPfiImCmdOper_GccDerState_maintenance corresponds to the value maintenance of Cisco_IOS_XRPfiImCmdOper_GccDerState
	Cisco_IOS_XRPfiImCmdOper_GccDerState_maintenance E_Cisco_IOS_XRPfiImCmdOper_GccDerState = 3
	// Cisco_IOS_XRPfiImCmdOper_GccDerState_ais corresponds to the value ais of Cisco_IOS_XRPfiImCmdOper_GccDerState
	Cisco_IOS_XRPfiImCmdOper_GccDerState_ais E_Cisco_IOS_XRPfiImCmdOper_GccDerState = 4
)

// E_Cisco_IOS_XRPfiImCmdOper_GccSecState is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_GccSecState. An additional value named
// Cisco_IOS_XRPfiImCmdOper_GccSecState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_GccSecState int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_GccSecState implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_GccSecState can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_GccSecState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_GccSecState.
func (E_Cisco_IOS_XRPfiImCmdOper_GccSecState) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_GccSecState.
func (e E_Cisco_IOS_XRPfiImCmdOper_GccSecState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_GccSecState")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_GccSecState_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_GccSecState
	Cisco_IOS_XRPfiImCmdOper_GccSecState_UNSET E_Cisco_IOS_XRPfiImCmdOper_GccSecState = 0
	// Cisco_IOS_XRPfiImCmdOper_GccSecState_normal corresponds to the value normal of Cisco_IOS_XRPfiImCmdOper_GccSecState
	Cisco_IOS_XRPfiImCmdOper_GccSecState_normal E_Cisco_IOS_XRPfiImCmdOper_GccSecState = 1
	// Cisco_IOS_XRPfiImCmdOper_GccSecState_maintenance corresponds to the value maintenance of Cisco_IOS_XRPfiImCmdOper_GccSecState
	Cisco_IOS_XRPfiImCmdOper_GccSecState_maintenance E_Cisco_IOS_XRPfiImCmdOper_GccSecState = 2
	// Cisco_IOS_XRPfiImCmdOper_GccSecState_ais corresponds to the value ais of Cisco_IOS_XRPfiImCmdOper_GccSecState
	Cisco_IOS_XRPfiImCmdOper_GccSecState_ais E_Cisco_IOS_XRPfiImCmdOper_GccSecState = 3
)

// E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex.
func (E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex
	Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex = 0
	// Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex_im_attr_duplex_unknown corresponds to the value im_attr_duplex_unknown of Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex
	Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex_im_attr_duplex_unknown E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex = 1
	// Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex_im_attr_duplex_half corresponds to the value im_attr_duplex_half of Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex
	Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex_im_attr_duplex_half E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex = 2
	// Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex_im_attr_duplex_full corresponds to the value im_attr_duplex_full of Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex
	Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex_im_attr_duplex_full E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex = 3
)

// E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl.
func (E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl
	Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl = 0
	// Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl_im_attr_flow_control_off corresponds to the value im_attr_flow_control_off of Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl
	Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl_im_attr_flow_control_off E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl = 1
	// Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl_im_attr_flow_control_on corresponds to the value im_attr_flow_control_on of Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl
	Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl_im_attr_flow_control_on E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl = 2
	// Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl_im_attr_flow_control_not_sup corresponds to the value im_attr_flow_control_not_sup of Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl
	Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl_im_attr_flow_control_not_sup E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl = 3
	// Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl_im_attr_flow_control_priority corresponds to the value im_attr_flow_control_priority of Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl
	Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl_im_attr_flow_control_priority E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl = 4
)

// E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImAttrLink. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImAttrLink_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImAttrLink implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImAttrLink can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImAttrLink.
func (E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImAttrLink_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImAttrLink
	Cisco_IOS_XRPfiImCmdOper_ImAttrLink_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink = 0
	// Cisco_IOS_XRPfiImCmdOper_ImAttrLink_im_attr_link_type_auto corresponds to the value im_attr_link_type_auto of Cisco_IOS_XRPfiImCmdOper_ImAttrLink
	Cisco_IOS_XRPfiImCmdOper_ImAttrLink_im_attr_link_type_auto E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink = 1
	// Cisco_IOS_XRPfiImCmdOper_ImAttrLink_im_attr_link_type_force corresponds to the value im_attr_link_type_force of Cisco_IOS_XRPfiImCmdOper_ImAttrLink
	Cisco_IOS_XRPfiImCmdOper_ImAttrLink_im_attr_link_type_force E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink = 2
)

// E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImAttrMedia. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImAttrMedia implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImAttrMedia can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImAttrMedia.
func (E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 0
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_other corresponds to the value im_attr_media_other of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_other E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 1
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_unknown corresponds to the value im_attr_media_unknown of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_unknown E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 2
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_aui corresponds to the value im_attr_media_aui of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_aui E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 3
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base5 corresponds to the value im_attr_media_10base5 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base5 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 4
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_foirl corresponds to the value im_attr_media_foirl of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_foirl E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 5
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base2 corresponds to the value im_attr_media_10base2 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base2 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 6
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10broad36 corresponds to the value im_attr_media_10broad36 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10broad36 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 7
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base corresponds to the value im_attr_media_10base of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 8
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_thd corresponds to the value im_attr_media_10base_thd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_thd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 9
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_tfd corresponds to the value im_attr_media_10base_tfd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_tfd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 10
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_fp corresponds to the value im_attr_media_10base_fp of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_fp E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 11
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_fb corresponds to the value im_attr_media_10base_fb of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_fb E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 12
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_fl corresponds to the value im_attr_media_10base_fl of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_fl E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 13
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_flhd corresponds to the value im_attr_media_10base_flhd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_flhd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 14
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_flfd corresponds to the value im_attr_media_10base_flfd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10base_flfd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 15
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_t4 corresponds to the value im_attr_media_100base_t4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_t4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 16
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_tx corresponds to the value im_attr_media_100base_tx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_tx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 17
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_txhd corresponds to the value im_attr_media_100base_txhd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_txhd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 18
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_txfd corresponds to the value im_attr_media_100base_txfd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_txfd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 19
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_fx corresponds to the value im_attr_media_100base_fx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_fx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 20
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_fxhd corresponds to the value im_attr_media_100base_fxhd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_fxhd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 21
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_fxfd corresponds to the value im_attr_media_100base_fxfd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_fxfd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 22
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_ex corresponds to the value im_attr_media_100base_ex of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_ex E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 23
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_exhd corresponds to the value im_attr_media_100base_exhd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_exhd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 24
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_exfd corresponds to the value im_attr_media_100base_exfd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_exfd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 25
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_t2 corresponds to the value im_attr_media_100base_t2 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_t2 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 26
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_t2hd corresponds to the value im_attr_media_100base_t2hd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_t2hd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 27
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_t2fd corresponds to the value im_attr_media_100base_t2fd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_t2fd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 28
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_x corresponds to the value im_attr_media_1000base_x of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_x E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 29
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_xhdx corresponds to the value im_attr_media_1000base_xhdx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_xhdx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 30
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_xfd corresponds to the value im_attr_media_1000base_xfd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_xfd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 31
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_lx corresponds to the value im_attr_media_1000base_lx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_lx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 32
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_lxhd corresponds to the value im_attr_media_1000base_lxhd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_lxhd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 33
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_lxfdx corresponds to the value im_attr_media_1000base_lxfdx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_lxfdx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 34
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_sx corresponds to the value im_attr_media_1000base_sx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_sx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 35
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_sxhd corresponds to the value im_attr_media_1000base_sxhd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_sxhd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 36
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_sxfd corresponds to the value im_attr_media_1000base_sxfd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_sxfd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 37
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cx corresponds to the value im_attr_media_1000base_cx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 38
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cxhdx corresponds to the value im_attr_media_1000base_cxhdx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cxhdx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 39
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cxfd corresponds to the value im_attr_media_1000base_cxfd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cxfd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 40
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base corresponds to the value im_attr_media_1000base of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 41
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_thd corresponds to the value im_attr_media_1000base_thd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_thd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 42
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_tfd corresponds to the value im_attr_media_1000base_tfd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_tfd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 43
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_x corresponds to the value im_attr_media_10gbase_x of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_x E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 44
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_lx4 corresponds to the value im_attr_media_10gbase_lx4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_lx4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 45
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_r corresponds to the value im_attr_media_10gbase_r of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_r E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 46
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_er corresponds to the value im_attr_media_10gbase_er of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_er E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 47
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_lr corresponds to the value im_attr_media_10gbase_lr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_lr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 48
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_sr corresponds to the value im_attr_media_10gbase_sr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_sr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 49
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_csr corresponds to the value im_attr_media_10gbase_csr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_csr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 50
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_w corresponds to the value im_attr_media_10gbase_w of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_w E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 51
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_ew corresponds to the value im_attr_media_10gbase_ew of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_ew E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 52
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_lw corresponds to the value im_attr_media_10gbase_lw of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_lw E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 53
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_sw corresponds to the value im_attr_media_10gbase_sw of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_sw E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 54
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_zr corresponds to the value im_attr_media_10gbase_zr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_zr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 55
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_802_9a corresponds to the value im_attr_media_802_9a of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_802_9a E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 56
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_rj45 corresponds to the value im_attr_media_rj45 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_rj45 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 57
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_zx corresponds to the value im_attr_media_1000base_zx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_zx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 58
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm corresponds to the value im_attr_media_1000base_cwdm of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 59
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1470 corresponds to the value im_attr_media_1000base_cwdm_1470 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1470 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 60
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1490 corresponds to the value im_attr_media_1000base_cwdm_1490 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1490 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 61
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1510 corresponds to the value im_attr_media_1000base_cwdm_1510 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1510 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 62
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1530 corresponds to the value im_attr_media_1000base_cwdm_1530 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1530 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 63
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1550 corresponds to the value im_attr_media_1000base_cwdm_1550 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1550 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 64
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1570 corresponds to the value im_attr_media_1000base_cwdm_1570 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1570 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 65
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1590 corresponds to the value im_attr_media_1000base_cwdm_1590 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1590 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 66
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1610 corresponds to the value im_attr_media_1000base_cwdm_1610 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_cwdm_1610 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 67
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm corresponds to the value im_attr_media_10gbase_dwdm of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 68
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_lr4 corresponds to the value im_attr_media_100gbase_lr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_lr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 69
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm corresponds to the value im_attr_media_1000base_dwdm of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 70
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1533 corresponds to the value im_attr_media_1000base_dwdm_1533 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1533 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 71
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1537 corresponds to the value im_attr_media_1000base_dwdm_1537 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1537 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 72
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1541 corresponds to the value im_attr_media_1000base_dwdm_1541 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1541 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 73
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1545 corresponds to the value im_attr_media_1000base_dwdm_1545 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1545 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 74
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1549 corresponds to the value im_attr_media_1000base_dwdm_1549 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1549 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 75
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1553 corresponds to the value im_attr_media_1000base_dwdm_1553 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1553 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 76
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1557 corresponds to the value im_attr_media_1000base_dwdm_1557 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1557 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 77
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1561 corresponds to the value im_attr_media_1000base_dwdm_1561 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1561 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 78
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_lr4 corresponds to the value im_attr_media_40gbase_lr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_lr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 79
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_er4 corresponds to the value im_attr_media_40gbase_er4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_er4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 80
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_er4 corresponds to the value im_attr_media_100gbase_er4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_er4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 81
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_ex corresponds to the value im_attr_media_1000base_ex of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_ex E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 82
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx10_d corresponds to the value im_attr_media_1000base_bx10_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx10_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 83
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx10_u corresponds to the value im_attr_media_1000base_bx10_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx10_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 84
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1561_42 corresponds to the value im_attr_media_1000base_dwdm_1561_42 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1561_42 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 85
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1560_61 corresponds to the value im_attr_media_1000base_dwdm_1560_61 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1560_61 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 86
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1559_79 corresponds to the value im_attr_media_1000base_dwdm_1559_79 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1559_79 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 87
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1558_98 corresponds to the value im_attr_media_1000base_dwdm_1558_98 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1558_98 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 88
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1558_17 corresponds to the value im_attr_media_1000base_dwdm_1558_17 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1558_17 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 89
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1557_36 corresponds to the value im_attr_media_1000base_dwdm_1557_36 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1557_36 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 90
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1556_55 corresponds to the value im_attr_media_1000base_dwdm_1556_55 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1556_55 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 91
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1555_75 corresponds to the value im_attr_media_1000base_dwdm_1555_75 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1555_75 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 92
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1554_94 corresponds to the value im_attr_media_1000base_dwdm_1554_94 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1554_94 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 93
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1554_13 corresponds to the value im_attr_media_1000base_dwdm_1554_13 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1554_13 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 94
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1553_33 corresponds to the value im_attr_media_1000base_dwdm_1553_33 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1553_33 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 95
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1552_52 corresponds to the value im_attr_media_1000base_dwdm_1552_52 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1552_52 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 96
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1551_72 corresponds to the value im_attr_media_1000base_dwdm_1551_72 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1551_72 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 97
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1550_92 corresponds to the value im_attr_media_1000base_dwdm_1550_92 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1550_92 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 98
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1550_12 corresponds to the value im_attr_media_1000base_dwdm_1550_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1550_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 99
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1549_32 corresponds to the value im_attr_media_1000base_dwdm_1549_32 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1549_32 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 100
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1548_51 corresponds to the value im_attr_media_1000base_dwdm_1548_51 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1548_51 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 101
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1547_72 corresponds to the value im_attr_media_1000base_dwdm_1547_72 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1547_72 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 102
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1546_92 corresponds to the value im_attr_media_1000base_dwdm_1546_92 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1546_92 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 103
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1546_12 corresponds to the value im_attr_media_1000base_dwdm_1546_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1546_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 104
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1545_32 corresponds to the value im_attr_media_1000base_dwdm_1545_32 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1545_32 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 105
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1544_53 corresponds to the value im_attr_media_1000base_dwdm_1544_53 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1544_53 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 106
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1543_73 corresponds to the value im_attr_media_1000base_dwdm_1543_73 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1543_73 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 107
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1542_94 corresponds to the value im_attr_media_1000base_dwdm_1542_94 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1542_94 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 108
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1542_14 corresponds to the value im_attr_media_1000base_dwdm_1542_14 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1542_14 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 109
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1541_35 corresponds to the value im_attr_media_1000base_dwdm_1541_35 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1541_35 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 110
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1540_56 corresponds to the value im_attr_media_1000base_dwdm_1540_56 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1540_56 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 111
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1539_77 corresponds to the value im_attr_media_1000base_dwdm_1539_77 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1539_77 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 112
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1538_98 corresponds to the value im_attr_media_1000base_dwdm_1538_98 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1538_98 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 113
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1538_19 corresponds to the value im_attr_media_1000base_dwdm_1538_19 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1538_19 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 114
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1537_40 corresponds to the value im_attr_media_1000base_dwdm_1537_40 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1537_40 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 115
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1536_61 corresponds to the value im_attr_media_1000base_dwdm_1536_61 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1536_61 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 116
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1535_82 corresponds to the value im_attr_media_1000base_dwdm_1535_82 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1535_82 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 117
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1535_04 corresponds to the value im_attr_media_1000base_dwdm_1535_04 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1535_04 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 118
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1534_25 corresponds to the value im_attr_media_1000base_dwdm_1534_25 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1534_25 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 119
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1533_47 corresponds to the value im_attr_media_1000base_dwdm_1533_47 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1533_47 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 120
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1532_68 corresponds to the value im_attr_media_1000base_dwdm_1532_68 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1532_68 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 121
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1531_90 corresponds to the value im_attr_media_1000base_dwdm_1531_90 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1531_90 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 122
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1531_12 corresponds to the value im_attr_media_1000base_dwdm_1531_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1531_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 123
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1530_33 corresponds to the value im_attr_media_1000base_dwdm_1530_33 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_1530_33 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 124
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_tunable corresponds to the value im_attr_media_1000base_dwdm_tunable of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dwdm_tunable E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 125
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1561_42 corresponds to the value im_attr_media_10gbase_dwdm_1561_42 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1561_42 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 126
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1560_61 corresponds to the value im_attr_media_10gbase_dwdm_1560_61 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1560_61 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 127
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1559_79 corresponds to the value im_attr_media_10gbase_dwdm_1559_79 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1559_79 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 128
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1558_98 corresponds to the value im_attr_media_10gbase_dwdm_1558_98 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1558_98 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 129
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1558_17 corresponds to the value im_attr_media_10gbase_dwdm_1558_17 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1558_17 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 130
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1557_36 corresponds to the value im_attr_media_10gbase_dwdm_1557_36 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1557_36 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 131
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1556_55 corresponds to the value im_attr_media_10gbase_dwdm_1556_55 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1556_55 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 132
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1555_75 corresponds to the value im_attr_media_10gbase_dwdm_1555_75 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1555_75 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 133
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1554_94 corresponds to the value im_attr_media_10gbase_dwdm_1554_94 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1554_94 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 134
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1554_13 corresponds to the value im_attr_media_10gbase_dwdm_1554_13 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1554_13 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 135
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1553_33 corresponds to the value im_attr_media_10gbase_dwdm_1553_33 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1553_33 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 136
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1552_52 corresponds to the value im_attr_media_10gbase_dwdm_1552_52 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1552_52 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 137
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1551_72 corresponds to the value im_attr_media_10gbase_dwdm_1551_72 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1551_72 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 138
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1550_92 corresponds to the value im_attr_media_10gbase_dwdm_1550_92 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1550_92 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 139
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1550_12 corresponds to the value im_attr_media_10gbase_dwdm_1550_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1550_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 140
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1549_32 corresponds to the value im_attr_media_10gbase_dwdm_1549_32 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1549_32 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 141
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1548_51 corresponds to the value im_attr_media_10gbase_dwdm_1548_51 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1548_51 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 142
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1547_72 corresponds to the value im_attr_media_10gbase_dwdm_1547_72 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1547_72 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 143
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1546_92 corresponds to the value im_attr_media_10gbase_dwdm_1546_92 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1546_92 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 144
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1546_12 corresponds to the value im_attr_media_10gbase_dwdm_1546_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1546_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 145
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1545_32 corresponds to the value im_attr_media_10gbase_dwdm_1545_32 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1545_32 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 146
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1544_53 corresponds to the value im_attr_media_10gbase_dwdm_1544_53 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1544_53 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 147
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1543_73 corresponds to the value im_attr_media_10gbase_dwdm_1543_73 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1543_73 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 148
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1542_94 corresponds to the value im_attr_media_10gbase_dwdm_1542_94 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1542_94 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 149
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1542_14 corresponds to the value im_attr_media_10gbase_dwdm_1542_14 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1542_14 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 150
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1541_35 corresponds to the value im_attr_media_10gbase_dwdm_1541_35 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1541_35 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 151
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1540_56 corresponds to the value im_attr_media_10gbase_dwdm_1540_56 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1540_56 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 152
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1539_77 corresponds to the value im_attr_media_10gbase_dwdm_1539_77 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1539_77 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 153
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1538_98 corresponds to the value im_attr_media_10gbase_dwdm_1538_98 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1538_98 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 154
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1538_19 corresponds to the value im_attr_media_10gbase_dwdm_1538_19 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1538_19 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 155
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1537_40 corresponds to the value im_attr_media_10gbase_dwdm_1537_40 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1537_40 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 156
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1536_61 corresponds to the value im_attr_media_10gbase_dwdm_1536_61 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1536_61 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 157
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1535_82 corresponds to the value im_attr_media_10gbase_dwdm_1535_82 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1535_82 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 158
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1535_04 corresponds to the value im_attr_media_10gbase_dwdm_1535_04 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1535_04 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 159
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1534_25 corresponds to the value im_attr_media_10gbase_dwdm_1534_25 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1534_25 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 160
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1533_47 corresponds to the value im_attr_media_10gbase_dwdm_1533_47 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1533_47 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 161
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1532_68 corresponds to the value im_attr_media_10gbase_dwdm_1532_68 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1532_68 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 162
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1531_90 corresponds to the value im_attr_media_10gbase_dwdm_1531_90 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1531_90 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 163
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1531_12 corresponds to the value im_attr_media_10gbase_dwdm_1531_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1531_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 164
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1530_33 corresponds to the value im_attr_media_10gbase_dwdm_1530_33 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_1530_33 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 165
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_tunable corresponds to the value im_attr_media_10gbase_dwdm_tunable of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_dwdm_tunable E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 166
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1561_42 corresponds to the value im_attr_media_40gbase_dwdm_1561_42 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1561_42 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 167
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1560_61 corresponds to the value im_attr_media_40gbase_dwdm_1560_61 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1560_61 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 168
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1559_79 corresponds to the value im_attr_media_40gbase_dwdm_1559_79 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1559_79 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 169
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1558_98 corresponds to the value im_attr_media_40gbase_dwdm_1558_98 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1558_98 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 170
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1558_17 corresponds to the value im_attr_media_40gbase_dwdm_1558_17 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1558_17 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 171
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1557_36 corresponds to the value im_attr_media_40gbase_dwdm_1557_36 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1557_36 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 172
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1556_55 corresponds to the value im_attr_media_40gbase_dwdm_1556_55 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1556_55 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 173
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1555_75 corresponds to the value im_attr_media_40gbase_dwdm_1555_75 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1555_75 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 174
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1554_94 corresponds to the value im_attr_media_40gbase_dwdm_1554_94 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1554_94 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 175
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1554_13 corresponds to the value im_attr_media_40gbase_dwdm_1554_13 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1554_13 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 176
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1553_33 corresponds to the value im_attr_media_40gbase_dwdm_1553_33 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1553_33 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 177
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1552_52 corresponds to the value im_attr_media_40gbase_dwdm_1552_52 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1552_52 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 178
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1551_72 corresponds to the value im_attr_media_40gbase_dwdm_1551_72 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1551_72 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 179
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1550_92 corresponds to the value im_attr_media_40gbase_dwdm_1550_92 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1550_92 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 180
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1550_12 corresponds to the value im_attr_media_40gbase_dwdm_1550_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1550_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 181
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1549_32 corresponds to the value im_attr_media_40gbase_dwdm_1549_32 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1549_32 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 182
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1548_51 corresponds to the value im_attr_media_40gbase_dwdm_1548_51 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1548_51 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 183
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1547_72 corresponds to the value im_attr_media_40gbase_dwdm_1547_72 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1547_72 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 184
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1546_92 corresponds to the value im_attr_media_40gbase_dwdm_1546_92 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1546_92 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 185
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1546_12 corresponds to the value im_attr_media_40gbase_dwdm_1546_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1546_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 186
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1545_32 corresponds to the value im_attr_media_40gbase_dwdm_1545_32 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1545_32 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 187
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1544_53 corresponds to the value im_attr_media_40gbase_dwdm_1544_53 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1544_53 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 188
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1543_73 corresponds to the value im_attr_media_40gbase_dwdm_1543_73 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1543_73 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 189
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1542_94 corresponds to the value im_attr_media_40gbase_dwdm_1542_94 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1542_94 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 190
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1542_14 corresponds to the value im_attr_media_40gbase_dwdm_1542_14 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1542_14 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 191
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1541_35 corresponds to the value im_attr_media_40gbase_dwdm_1541_35 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1541_35 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 192
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1540_56 corresponds to the value im_attr_media_40gbase_dwdm_1540_56 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1540_56 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 193
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1539_77 corresponds to the value im_attr_media_40gbase_dwdm_1539_77 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1539_77 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 194
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1538_98 corresponds to the value im_attr_media_40gbase_dwdm_1538_98 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1538_98 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 195
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1538_19 corresponds to the value im_attr_media_40gbase_dwdm_1538_19 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1538_19 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 196
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1537_40 corresponds to the value im_attr_media_40gbase_dwdm_1537_40 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1537_40 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 197
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1536_61 corresponds to the value im_attr_media_40gbase_dwdm_1536_61 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1536_61 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 198
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1535_82 corresponds to the value im_attr_media_40gbase_dwdm_1535_82 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1535_82 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 199
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1535_04 corresponds to the value im_attr_media_40gbase_dwdm_1535_04 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1535_04 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 200
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1534_25 corresponds to the value im_attr_media_40gbase_dwdm_1534_25 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1534_25 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 201
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1533_47 corresponds to the value im_attr_media_40gbase_dwdm_1533_47 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1533_47 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 202
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1532_68 corresponds to the value im_attr_media_40gbase_dwdm_1532_68 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1532_68 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 203
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1531_90 corresponds to the value im_attr_media_40gbase_dwdm_1531_90 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1531_90 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 204
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1531_12 corresponds to the value im_attr_media_40gbase_dwdm_1531_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1531_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 205
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1530_33 corresponds to the value im_attr_media_40gbase_dwdm_1530_33 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_1530_33 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 206
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_tunable corresponds to the value im_attr_media_40gbase_dwdm_tunable of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_dwdm_tunable E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 207
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1561_42 corresponds to the value im_attr_media_100gbase_dwdm_1561_42 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1561_42 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 208
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1560_61 corresponds to the value im_attr_media_100gbase_dwdm_1560_61 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1560_61 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 209
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1559_79 corresponds to the value im_attr_media_100gbase_dwdm_1559_79 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1559_79 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 210
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1558_98 corresponds to the value im_attr_media_100gbase_dwdm_1558_98 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1558_98 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 211
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1558_17 corresponds to the value im_attr_media_100gbase_dwdm_1558_17 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1558_17 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 212
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1557_36 corresponds to the value im_attr_media_100gbase_dwdm_1557_36 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1557_36 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 213
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1556_55 corresponds to the value im_attr_media_100gbase_dwdm_1556_55 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1556_55 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 214
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1555_75 corresponds to the value im_attr_media_100gbase_dwdm_1555_75 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1555_75 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 215
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1554_94 corresponds to the value im_attr_media_100gbase_dwdm_1554_94 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1554_94 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 216
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1554_13 corresponds to the value im_attr_media_100gbase_dwdm_1554_13 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1554_13 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 217
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1553_33 corresponds to the value im_attr_media_100gbase_dwdm_1553_33 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1553_33 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 218
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1552_52 corresponds to the value im_attr_media_100gbase_dwdm_1552_52 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1552_52 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 219
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1551_72 corresponds to the value im_attr_media_100gbase_dwdm_1551_72 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1551_72 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 220
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1550_92 corresponds to the value im_attr_media_100gbase_dwdm_1550_92 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1550_92 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 221
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1550_12 corresponds to the value im_attr_media_100gbase_dwdm_1550_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1550_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 222
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1549_32 corresponds to the value im_attr_media_100gbase_dwdm_1549_32 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1549_32 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 223
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1548_51 corresponds to the value im_attr_media_100gbase_dwdm_1548_51 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1548_51 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 224
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1547_72 corresponds to the value im_attr_media_100gbase_dwdm_1547_72 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1547_72 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 225
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1546_92 corresponds to the value im_attr_media_100gbase_dwdm_1546_92 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1546_92 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 226
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1546_12 corresponds to the value im_attr_media_100gbase_dwdm_1546_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1546_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 227
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1545_32 corresponds to the value im_attr_media_100gbase_dwdm_1545_32 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1545_32 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 228
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1544_53 corresponds to the value im_attr_media_100gbase_dwdm_1544_53 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1544_53 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 229
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1543_73 corresponds to the value im_attr_media_100gbase_dwdm_1543_73 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1543_73 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 230
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1542_94 corresponds to the value im_attr_media_100gbase_dwdm_1542_94 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1542_94 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 231
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1542_14 corresponds to the value im_attr_media_100gbase_dwdm_1542_14 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1542_14 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 232
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1541_35 corresponds to the value im_attr_media_100gbase_dwdm_1541_35 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1541_35 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 233
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1540_56 corresponds to the value im_attr_media_100gbase_dwdm_1540_56 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1540_56 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 234
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1539_77 corresponds to the value im_attr_media_100gbase_dwdm_1539_77 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1539_77 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 235
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1538_98 corresponds to the value im_attr_media_100gbase_dwdm_1538_98 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1538_98 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 236
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1538_19 corresponds to the value im_attr_media_100gbase_dwdm_1538_19 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1538_19 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 237
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1537_40 corresponds to the value im_attr_media_100gbase_dwdm_1537_40 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1537_40 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 238
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1536_61 corresponds to the value im_attr_media_100gbase_dwdm_1536_61 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1536_61 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 239
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1535_82 corresponds to the value im_attr_media_100gbase_dwdm_1535_82 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1535_82 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 240
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1535_04 corresponds to the value im_attr_media_100gbase_dwdm_1535_04 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1535_04 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 241
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1534_25 corresponds to the value im_attr_media_100gbase_dwdm_1534_25 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1534_25 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 242
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1533_47 corresponds to the value im_attr_media_100gbase_dwdm_1533_47 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1533_47 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 243
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1532_68 corresponds to the value im_attr_media_100gbase_dwdm_1532_68 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1532_68 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 244
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1531_90 corresponds to the value im_attr_media_100gbase_dwdm_1531_90 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1531_90 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 245
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1531_12 corresponds to the value im_attr_media_100gbase_dwdm_1531_12 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1531_12 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 246
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1530_33 corresponds to the value im_attr_media_100gbase_dwdm_1530_33 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_1530_33 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 247
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_tunable corresponds to the value im_attr_media_100gbase_dwdm_tunable of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm_tunable E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 248
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_kr4 corresponds to the value im_attr_media_40gbase_kr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_kr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 249
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cr4 corresponds to the value im_attr_media_40gbase_cr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 250
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_sr4 corresponds to the value im_attr_media_40gbase_sr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_sr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 251
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_fr corresponds to the value im_attr_media_40gbase_fr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_fr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 252
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cr10 corresponds to the value im_attr_media_100gbase_cr10 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cr10 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 253
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_sr10 corresponds to the value im_attr_media_100gbase_sr10 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_sr10 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 254
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_csr4 corresponds to the value im_attr_media_40gbase_csr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_csr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 255
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm corresponds to the value im_attr_media_10gbase_cwdm of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 256
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_tunable corresponds to the value im_attr_media_10gbase_cwdm_tunable of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_tunable E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 257
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1470 corresponds to the value im_attr_media_10gbase_cwdm_1470 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1470 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 258
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1490 corresponds to the value im_attr_media_10gbase_cwdm_1490 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1490 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 259
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1510 corresponds to the value im_attr_media_10gbase_cwdm_1510 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1510 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 260
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1530 corresponds to the value im_attr_media_10gbase_cwdm_1530 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1530 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 261
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1550 corresponds to the value im_attr_media_10gbase_cwdm_1550 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1550 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 262
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1570 corresponds to the value im_attr_media_10gbase_cwdm_1570 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1570 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 263
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1590 corresponds to the value im_attr_media_10gbase_cwdm_1590 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1590 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 264
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1610 corresponds to the value im_attr_media_10gbase_cwdm_1610 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cwdm_1610 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 265
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm corresponds to the value im_attr_media_40gbase_cwdm of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 266
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_tunable corresponds to the value im_attr_media_40gbase_cwdm_tunable of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_tunable E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 267
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1470 corresponds to the value im_attr_media_40gbase_cwdm_1470 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1470 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 268
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1490 corresponds to the value im_attr_media_40gbase_cwdm_1490 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1490 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 269
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1510 corresponds to the value im_attr_media_40gbase_cwdm_1510 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1510 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 270
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1530 corresponds to the value im_attr_media_40gbase_cwdm_1530 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1530 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 271
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1550 corresponds to the value im_attr_media_40gbase_cwdm_1550 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1550 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 272
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1570 corresponds to the value im_attr_media_40gbase_cwdm_1570 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1570 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 273
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1590 corresponds to the value im_attr_media_40gbase_cwdm_1590 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1590 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 274
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1610 corresponds to the value im_attr_media_40gbase_cwdm_1610 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_cwdm_1610 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 275
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm corresponds to the value im_attr_media_100gbase_cwdm of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 276
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_tunable corresponds to the value im_attr_media_100gbase_cwdm_tunable of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_tunable E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 277
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1470 corresponds to the value im_attr_media_100gbase_cwdm_1470 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1470 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 278
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1490 corresponds to the value im_attr_media_100gbase_cwdm_1490 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1490 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 279
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1510 corresponds to the value im_attr_media_100gbase_cwdm_1510 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1510 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 280
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1530 corresponds to the value im_attr_media_100gbase_cwdm_1530 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1530 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 281
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1550 corresponds to the value im_attr_media_100gbase_cwdm_1550 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1550 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 282
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1570 corresponds to the value im_attr_media_100gbase_cwdm_1570 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1570 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 283
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1590 corresponds to the value im_attr_media_100gbase_cwdm_1590 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1590 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 284
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1610 corresponds to the value im_attr_media_100gbase_cwdm_1610 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm_1610 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 285
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_elpb corresponds to the value im_attr_media_40gbase_elpb of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_elpb E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 286
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_elpb corresponds to the value im_attr_media_100gbase_elpb of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_elpb E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 287
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_lr10 corresponds to the value im_attr_media_100gbase_lr10 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_lr10 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 288
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase corresponds to the value im_attr_media_40gbase of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 289
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_kp4 corresponds to the value im_attr_media_100gbase_kp4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_kp4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 290
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_kr4 corresponds to the value im_attr_media_100gbase_kr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_kr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 291
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_lrm corresponds to the value im_attr_media_10gbase_lrm of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_lrm E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 292
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cx4 corresponds to the value im_attr_media_10gbase_cx4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cx4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 293
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase corresponds to the value im_attr_media_10gbase of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 294
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_kx4 corresponds to the value im_attr_media_10gbase_kx4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_kx4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 295
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_kr corresponds to the value im_attr_media_10gbase_kr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_kr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 296
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_pr corresponds to the value im_attr_media_10gbase_pr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_pr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 297
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_lx corresponds to the value im_attr_media_100base_lx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_lx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 298
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_zx corresponds to the value im_attr_media_100base_zx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100base_zx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 299
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx_d corresponds to the value im_attr_media_1000base_bx_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 300
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx_u corresponds to the value im_attr_media_1000base_bx_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 301
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx20_d corresponds to the value im_attr_media_1000base_bx20_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx20_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 302
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx20_u corresponds to the value im_attr_media_1000base_bx20_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx20_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 303
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx40_d corresponds to the value im_attr_media_1000base_bx40_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx40_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 304
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx40_da corresponds to the value im_attr_media_1000base_bx40_da of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx40_da E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 305
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx40_u corresponds to the value im_attr_media_1000base_bx40_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx40_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 306
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx80_d corresponds to the value im_attr_media_1000base_bx80_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx80_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 307
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx80_u corresponds to the value im_attr_media_1000base_bx80_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx80_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 308
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx120_d corresponds to the value im_attr_media_1000base_bx120_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx120_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 309
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx120_u corresponds to the value im_attr_media_1000base_bx120_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_bx120_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 310
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx_d corresponds to the value im_attr_media_10gbase_bx_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 311
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx_u corresponds to the value im_attr_media_10gbase_bx_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 312
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx10_d corresponds to the value im_attr_media_10gbase_bx10_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx10_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 313
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx10_u corresponds to the value im_attr_media_10gbase_bx10_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx10_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 314
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx20_d corresponds to the value im_attr_media_10gbase_bx20_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx20_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 315
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx20_u corresponds to the value im_attr_media_10gbase_bx20_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx20_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 316
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx40_d corresponds to the value im_attr_media_10gbase_bx40_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx40_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 317
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx40_u corresponds to the value im_attr_media_10gbase_bx40_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx40_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 318
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx80_d corresponds to the value im_attr_media_10gbase_bx80_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx80_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 319
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx80_u corresponds to the value im_attr_media_10gbase_bx80_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx80_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 320
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx120_d corresponds to the value im_attr_media_10gbase_bx120_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx120_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 321
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx120_u corresponds to the value im_attr_media_10gbase_bx120_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_bx120_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 322
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dr_lx corresponds to the value im_attr_media_1000base_dr_lx of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_dr_lx E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 323
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_er4l corresponds to the value im_attr_media_100gbase_er4l of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_er4l E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 324
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_sr4 corresponds to the value im_attr_media_100gbase_sr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_sr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 325
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_sr_bd corresponds to the value im_attr_media_40gbase_sr_bd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_sr_bd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 326
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cr corresponds to the value im_attr_media_25gbase_cr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 327
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cr_s corresponds to the value im_attr_media_25gbase_cr_s of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cr_s E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 328
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_kr corresponds to the value im_attr_media_25gbase_kr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_kr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 329
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_kr_s corresponds to the value im_attr_media_25gbase_kr_s of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_kr_s E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 330
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_r corresponds to the value im_attr_media_25gbase_r of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_r E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 331
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_sr corresponds to the value im_attr_media_25gbase_sr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_sr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 332
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_csr corresponds to the value im_attr_media_25gbase_csr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_csr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 333
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_dwdm corresponds to the value im_attr_media_25gbase_dwdm of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_dwdm E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 334
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_dwdm_tunable corresponds to the value im_attr_media_25gbase_dwdm_tunable of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_dwdm_tunable E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 335
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cwdm corresponds to the value im_attr_media_25gbase_cwdm of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cwdm E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 336
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cwdm_tunable corresponds to the value im_attr_media_25gbase_cwdm_tunable of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cwdm_tunable E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 337
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_psm4 corresponds to the value im_attr_media_100gbase_psm4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_psm4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 338
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_er10 corresponds to the value im_attr_media_100gbase_er10 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_er10 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 339
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_er10l corresponds to the value im_attr_media_100gbase_er10l of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_er10l E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 340
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_acc corresponds to the value im_attr_media_100gbase_acc of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_acc E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 341
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_aoc corresponds to the value im_attr_media_100gbase_aoc of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_aoc E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 342
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm4 corresponds to the value im_attr_media_100gbase_cwdm4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cwdm4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 343
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_psm4 corresponds to the value im_attr_media_40gbase_psm4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_psm4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 344
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cr4 corresponds to the value im_attr_media_100gbase_cr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_cr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 345
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_act_loop corresponds to the value im_attr_media_100gbase_act_loop of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_act_loop E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 346
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_pas_loop corresponds to the value im_attr_media_100gbase_pas_loop of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_pas_loop E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 347
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_50gbase_cr2 corresponds to the value im_attr_media_50gbase_cr2 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_50gbase_cr2 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 348
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_50gbase_sr2 corresponds to the value im_attr_media_50gbase_sr2 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_50gbase_sr2 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 349
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_50gbase_psm2 corresponds to the value im_attr_media_50gbase_psm2 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_50gbase_psm2 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 350
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_200gbase_cr4 corresponds to the value im_attr_media_200gbase_cr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_200gbase_cr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 351
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_fr4 corresponds to the value im_attr_media_400gbase_fr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_fr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 352
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_dr4 corresponds to the value im_attr_media_400gbase_dr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_dr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 353
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cr corresponds to the value im_attr_media_10gbase_cr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 354
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc corresponds to the value im_attr_media_10gbase_aoc of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 355
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_aoc corresponds to the value im_attr_media_40gbase_aoc of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_aoc E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 356
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu corresponds to the value im_attr_media_40gbase_acu of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 357
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_acu corresponds to the value im_attr_media_100gbase_acu of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_acu E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 358
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu1m corresponds to the value im_attr_media_10gbase_cu1m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu1m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 359
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu3m corresponds to the value im_attr_media_10gbase_cu3m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu3m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 360
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu5m corresponds to the value im_attr_media_10gbase_cu5m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu5m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 361
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_acu7m corresponds to the value im_attr_media_10gbase_acu7m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_acu7m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 362
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_acu10m corresponds to the value im_attr_media_10gbase_acu10m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_acu10m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 363
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_4x10g_base_lr corresponds to the value im_attr_media_4x10g_base_lr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_4x10g_base_lr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 364
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu1_5m corresponds to the value im_attr_media_10gbase_cu1_5m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu1_5m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 365
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu2m corresponds to the value im_attr_media_10gbase_cu2m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu2m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 366
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu2_5m corresponds to the value im_attr_media_10gbase_cu2_5m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_cu2_5m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 367
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc1m corresponds to the value im_attr_media_10gbase_aoc1m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc1m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 368
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc2m corresponds to the value im_attr_media_10gbase_aoc2m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc2m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 369
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc3m corresponds to the value im_attr_media_10gbase_aoc3m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc3m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 370
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc5m corresponds to the value im_attr_media_10gbase_aoc5m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc5m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 371
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc7m corresponds to the value im_attr_media_10gbase_aoc7m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc7m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 372
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc10m corresponds to the value im_attr_media_10gbase_aoc10m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_10gbase_aoc10m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 373
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu1m corresponds to the value im_attr_media_40gbase_acu1m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu1m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 374
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu3m corresponds to the value im_attr_media_40gbase_acu3m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu3m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 375
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu5m corresponds to the value im_attr_media_40gbase_acu5m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu5m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 376
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu7m corresponds to the value im_attr_media_40gbase_acu7m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu7m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 377
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu10m corresponds to the value im_attr_media_40gbase_acu10m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_40gbase_acu10m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 378
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cu1m corresponds to the value im_attr_media_25gbase_cu1m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cu1m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 379
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cu2m corresponds to the value im_attr_media_25gbase_cu2m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cu2m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 380
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cu3m corresponds to the value im_attr_media_25gbase_cu3m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cu3m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 381
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cu5m corresponds to the value im_attr_media_25gbase_cu5m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_cu5m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 382
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_sm_sr corresponds to the value im_attr_media_100gbase_sm_sr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_sm_sr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 383
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_2bx_d corresponds to the value im_attr_media_1000base_2bx_d of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_2bx_d E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 384
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_2bx_d_i corresponds to the value im_attr_media_1000base_2bx_d_i of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_2bx_d_i E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 385
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_2bx_u corresponds to the value im_attr_media_1000base_2bx_u of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_2bx_u E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 386
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_2bx_u_i corresponds to the value im_attr_media_1000base_2bx_u_i of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_1000base_2bx_u_i E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 387
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_cr8 corresponds to the value im_attr_media_400gbase_cr8 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_cr8 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 388
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_sr_bd corresponds to the value im_attr_media_100gbase_sr_bd of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_sr_bd E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 389
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_lr8 corresponds to the value im_attr_media_400gbase_lr8 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_lr8 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 390
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_aoc corresponds to the value im_attr_media_400gbase_aoc of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_aoc E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 391
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_acc corresponds to the value im_attr_media_400gbase_acc of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_acc E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 392
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_act_loop corresponds to the value im_attr_media_400gbase_act_loop of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_act_loop E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 393
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_pas_loop corresponds to the value im_attr_media_400gbase_pas_loop of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_pas_loop E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 394
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_8x_sfp50gbase_cu corresponds to the value im_attr_media_8x_sfp50gbase_cu of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_8x_sfp50gbase_cu E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 395
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_2x100gbase_lr8_s corresponds to the value im_attr_media_2x100gbase_lr8_s of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_2x100gbase_lr8_s E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 396
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_2x100gbase_sr4 corresponds to the value im_attr_media_2x100gbase_sr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_2x100gbase_sr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 397
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_2x100gbase_psm4 corresponds to the value im_attr_media_2x100gbase_psm4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_2x100gbase_psm4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 398
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_2x100gbase_cwdm4 corresponds to the value im_attr_media_2x100gbase_cwdm4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_2x100gbase_cwdm4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 399
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_2x100gbase_lr4 corresponds to the value im_attr_media_2x100gbase_lr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_2x100gbase_lr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 400
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_fr corresponds to the value im_attr_media_100gbase_fr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_fr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 401
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_lr corresponds to the value im_attr_media_100gbase_lr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_lr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 402
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_er4f corresponds to the value im_attr_media_100gbase_er4f of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_er4f E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 403
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm2 corresponds to the value im_attr_media_100gbase_dwdm2 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dwdm2 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 404
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc1m corresponds to the value im_attr_media_25gbase_aoc1m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc1m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 405
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc2m corresponds to the value im_attr_media_25gbase_aoc2m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc2m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 406
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc3m corresponds to the value im_attr_media_25gbase_aoc3m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc3m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 407
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc5m corresponds to the value im_attr_media_25gbase_aoc5m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc5m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 408
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc7m corresponds to the value im_attr_media_25gbase_aoc7m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc7m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 409
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc10m corresponds to the value im_attr_media_25gbase_aoc10m of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_25gbase_aoc10m E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 410
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_aec corresponds to the value im_attr_media_400gbase_aec of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_aec E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 411
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_4x100gbase_fr corresponds to the value im_attr_media_4x100gbase_fr of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_4x100gbase_fr E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 412
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_zr_s corresponds to the value im_attr_media_400gbase_zr_s of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_zr_s E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 413
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_zr_plus_s corresponds to the value im_attr_media_400gbase_zr_plus_s of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_zr_plus_s E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 414
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dr_s corresponds to the value im_attr_media_100gbase_dr_s of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_100gbase_dr_s E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 415
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_lr4 corresponds to the value im_attr_media_400gbase_lr4 of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_400gbase_lr4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 416
	// Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_qsa corresponds to the value im_attr_media_qsa of Cisco_IOS_XRPfiImCmdOper_ImAttrMedia
	Cisco_IOS_XRPfiImCmdOper_ImAttrMedia_im_attr_media_qsa E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia = 417
)

// E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode.
func (E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode
	Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode = 0
	// Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_unknown corresponds to the value im_attr_transport_mode_unknown of Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode
	Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_unknown E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode = 1
	// Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_lan corresponds to the value im_attr_transport_mode_lan of Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode
	Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_lan E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode = 2
	// Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_wan corresponds to the value im_attr_transport_mode_wan of Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode
	Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_wan E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode = 3
	// Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_otn_bt_opu1e corresponds to the value im_attr_transport_mode_otn_bt_opu1e of Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode
	Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_otn_bt_opu1e E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode = 4
	// Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_otn_bt_opu2e corresponds to the value im_attr_transport_mode_otn_bt_opu2e of Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode
	Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_otn_bt_opu2e E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode = 5
	// Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_otn_opu3 corresponds to the value im_attr_transport_mode_otn_opu3 of Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode
	Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_otn_opu3 E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode = 6
	// Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_otn_opu4 corresponds to the value im_attr_transport_mode_otn_opu4 of Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode
	Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode_im_attr_transport_mode_otn_opu4 E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode = 7
)

// E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum = 0
	// Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum_frame_relay corresponds to the value frame_relay of Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum_frame_relay E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum = 1
	// Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum_vlan corresponds to the value vlan of Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum_vlan E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum = 2
	// Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum_ppp corresponds to the value ppp of Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum_ppp E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum = 3
)

// E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum = 0
	// Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum_frame_relay_cisco corresponds to the value frame_relay_cisco of Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum_frame_relay_cisco E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum = 1
	// Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum_frame_relay_ietf corresponds to the value frame_relay_ietf of Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum_frame_relay_ietf E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum = 2
)

// E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum = 0
	// Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_srp corresponds to the value srp of Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_srp E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum = 1
	// Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_tunnel corresponds to the value tunnel of Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_tunnel E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum = 2
	// Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_bundle corresponds to the value bundle of Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_bundle E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum = 3
	// Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_serial corresponds to the value serial of Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_serial E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum = 4
	// Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_sonet_pos corresponds to the value sonet_pos of Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_sonet_pos E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum = 5
	// Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_tunnel_gre corresponds to the value tunnel_gre of Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_tunnel_gre E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum = 6
	// Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_pseudowire_head_end corresponds to the value pseudowire_head_end of Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_pseudowire_head_end E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum = 7
	// Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_cem corresponds to the value cem of Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_cem E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum = 8
	// Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_gcc corresponds to the value gcc of Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum_gcc E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum = 9
)

// E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum = 0
	// Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum_lmi_type_auto corresponds to the value lmi_type_auto of Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum_lmi_type_auto E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum = 1
	// Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum_lmi_type_ansi corresponds to the value lmi_type_ansi of Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum_lmi_type_ansi E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum = 2
	// Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum_lmi_type_ccitt corresponds to the value lmi_type_ccitt of Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum_lmi_type_ccitt E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum = 3
	// Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum_lmi_type_cisco corresponds to the value lmi_type_cisco of Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum_lmi_type_cisco E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum = 4
)

// E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum = 0
	// Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum_no_loopback corresponds to the value no_loopback of Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum_no_loopback E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum = 1
	// Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum_internal_loopback corresponds to the value internal_loopback of Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum_internal_loopback E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum = 2
	// Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum_external_loopback corresponds to the value external_loopback of Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum_external_loopback E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum = 3
	// Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum_line_loopback corresponds to the value line_loopback of Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum_line_loopback E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum = 4
)

// E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum.
func (E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum = 0
	// Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum_full corresponds to the value full of Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum_full E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum = 1
	// Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum_basic corresponds to the value basic of Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum
	Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum_basic E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum = 2
)

// E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_ImStateEnum. An additional value named
// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_ImStateEnum implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_ImStateEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_ImStateEnum.
func (E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum.
func (e E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_UNSET E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 0
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_not_ready corresponds to the value im_state_not_ready of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_not_ready E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 1
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_admin_down corresponds to the value im_state_admin_down of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_admin_down E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 2
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_down corresponds to the value im_state_down of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_down E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 3
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_up corresponds to the value im_state_up of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_up E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 4
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_shutdown corresponds to the value im_state_shutdown of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_shutdown E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 5
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_err_disable corresponds to the value im_state_err_disable of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_err_disable E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 6
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_down_immediate corresponds to the value im_state_down_immediate of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_down_immediate E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 7
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_down_immediate_admin corresponds to the value im_state_down_immediate_admin of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_down_immediate_admin E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 8
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_down_graceful corresponds to the value im_state_down_graceful of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_down_graceful E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 9
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_begin_shutdown corresponds to the value im_state_begin_shutdown of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_begin_shutdown E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 10
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_end_shutdown corresponds to the value im_state_end_shutdown of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_end_shutdown E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 11
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_begin_error_disable corresponds to the value im_state_begin_error_disable of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_begin_error_disable E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 12
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_end_error_disable corresponds to the value im_state_end_error_disable of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_end_error_disable E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 13
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_begin_down_graceful corresponds to the value im_state_begin_down_graceful of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_begin_down_graceful E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 14
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_reset corresponds to the value im_state_reset of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_reset E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 15
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_operational corresponds to the value im_state_operational of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_operational E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 16
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_not_operational corresponds to the value im_state_not_operational of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_not_operational E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 17
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_unknown corresponds to the value im_state_unknown of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_unknown E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 18
	// Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_last corresponds to the value im_state_last of Cisco_IOS_XRPfiImCmdOper_ImStateEnum
	Cisco_IOS_XRPfiImCmdOper_ImStateEnum_im_state_last E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum = 19
)

// E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet. An additional value named
// Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet.
func (E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet.
func (e E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet
	Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet_UNSET E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet = 0
	// Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet_hardware_interfaces corresponds to the value hardware_interfaces of Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet
	Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet_hardware_interfaces E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet = 1
)

// E_Cisco_IOS_XRPfiImCmdOper_NcpIdent is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_NcpIdent. An additional value named
// Cisco_IOS_XRPfiImCmdOper_NcpIdent_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_NcpIdent int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_NcpIdent implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_NcpIdent can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_NcpIdent) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_NcpIdent.
func (E_Cisco_IOS_XRPfiImCmdOper_NcpIdent) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_NcpIdent.
func (e E_Cisco_IOS_XRPfiImCmdOper_NcpIdent) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_NcpIdent")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_NcpIdent_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_NcpIdent
	Cisco_IOS_XRPfiImCmdOper_NcpIdent_UNSET E_Cisco_IOS_XRPfiImCmdOper_NcpIdent = 0
	// Cisco_IOS_XRPfiImCmdOper_NcpIdent_cdpcp corresponds to the value cdpcp of Cisco_IOS_XRPfiImCmdOper_NcpIdent
	Cisco_IOS_XRPfiImCmdOper_NcpIdent_cdpcp E_Cisco_IOS_XRPfiImCmdOper_NcpIdent = 1
	// Cisco_IOS_XRPfiImCmdOper_NcpIdent_ipcp corresponds to the value ipcp of Cisco_IOS_XRPfiImCmdOper_NcpIdent
	Cisco_IOS_XRPfiImCmdOper_NcpIdent_ipcp E_Cisco_IOS_XRPfiImCmdOper_NcpIdent = 2
	// Cisco_IOS_XRPfiImCmdOper_NcpIdent_ipcpiw corresponds to the value ipcpiw of Cisco_IOS_XRPfiImCmdOper_NcpIdent
	Cisco_IOS_XRPfiImCmdOper_NcpIdent_ipcpiw E_Cisco_IOS_XRPfiImCmdOper_NcpIdent = 3
	// Cisco_IOS_XRPfiImCmdOper_NcpIdent_ipv6cp corresponds to the value ipv6cp of Cisco_IOS_XRPfiImCmdOper_NcpIdent
	Cisco_IOS_XRPfiImCmdOper_NcpIdent_ipv6cp E_Cisco_IOS_XRPfiImCmdOper_NcpIdent = 4
	// Cisco_IOS_XRPfiImCmdOper_NcpIdent_mplscp corresponds to the value mplscp of Cisco_IOS_XRPfiImCmdOper_NcpIdent
	Cisco_IOS_XRPfiImCmdOper_NcpIdent_mplscp E_Cisco_IOS_XRPfiImCmdOper_NcpIdent = 5
	// Cisco_IOS_XRPfiImCmdOper_NcpIdent_osicp corresponds to the value osicp of Cisco_IOS_XRPfiImCmdOper_NcpIdent
	Cisco_IOS_XRPfiImCmdOper_NcpIdent_osicp E_Cisco_IOS_XRPfiImCmdOper_NcpIdent = 6
)

// E_Cisco_IOS_XRPfiImCmdOper_PppFsmState is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_PppFsmState. An additional value named
// Cisco_IOS_XRPfiImCmdOper_PppFsmState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_PppFsmState int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_PppFsmState implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_PppFsmState can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_PppFsmState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_PppFsmState.
func (E_Cisco_IOS_XRPfiImCmdOper_PppFsmState) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_PppFsmState.
func (e E_Cisco_IOS_XRPfiImCmdOper_PppFsmState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_PppFsmState")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_PppFsmState_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_PppFsmState
	Cisco_IOS_XRPfiImCmdOper_PppFsmState_UNSET E_Cisco_IOS_XRPfiImCmdOper_PppFsmState = 0
	// Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_initial_0 corresponds to the value ppp_fsm_state_initial_0 of Cisco_IOS_XRPfiImCmdOper_PppFsmState
	Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_initial_0 E_Cisco_IOS_XRPfiImCmdOper_PppFsmState = 1
	// Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_starting_1 corresponds to the value ppp_fsm_state_starting_1 of Cisco_IOS_XRPfiImCmdOper_PppFsmState
	Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_starting_1 E_Cisco_IOS_XRPfiImCmdOper_PppFsmState = 2
	// Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_closed_2 corresponds to the value ppp_fsm_state_closed_2 of Cisco_IOS_XRPfiImCmdOper_PppFsmState
	Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_closed_2 E_Cisco_IOS_XRPfiImCmdOper_PppFsmState = 3
	// Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_stopped_3 corresponds to the value ppp_fsm_state_stopped_3 of Cisco_IOS_XRPfiImCmdOper_PppFsmState
	Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_stopped_3 E_Cisco_IOS_XRPfiImCmdOper_PppFsmState = 4
	// Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_closing_4 corresponds to the value ppp_fsm_state_closing_4 of Cisco_IOS_XRPfiImCmdOper_PppFsmState
	Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_closing_4 E_Cisco_IOS_XRPfiImCmdOper_PppFsmState = 5
	// Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_stopping_5 corresponds to the value ppp_fsm_state_stopping_5 of Cisco_IOS_XRPfiImCmdOper_PppFsmState
	Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_stopping_5 E_Cisco_IOS_XRPfiImCmdOper_PppFsmState = 6
	// Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_req_sent_6 corresponds to the value ppp_fsm_state_req_sent_6 of Cisco_IOS_XRPfiImCmdOper_PppFsmState
	Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_req_sent_6 E_Cisco_IOS_XRPfiImCmdOper_PppFsmState = 7
	// Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_ack_rcvd_7 corresponds to the value ppp_fsm_state_ack_rcvd_7 of Cisco_IOS_XRPfiImCmdOper_PppFsmState
	Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_ack_rcvd_7 E_Cisco_IOS_XRPfiImCmdOper_PppFsmState = 8
	// Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_ack_sent_8 corresponds to the value ppp_fsm_state_ack_sent_8 of Cisco_IOS_XRPfiImCmdOper_PppFsmState
	Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_ack_sent_8 E_Cisco_IOS_XRPfiImCmdOper_PppFsmState = 9
	// Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_opened_9 corresponds to the value ppp_fsm_state_opened_9 of Cisco_IOS_XRPfiImCmdOper_PppFsmState
	Cisco_IOS_XRPfiImCmdOper_PppFsmState_ppp_fsm_state_opened_9 E_Cisco_IOS_XRPfiImCmdOper_PppFsmState = 10
)

// E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_SonetApsEt. An additional value named
// Cisco_IOS_XRPfiImCmdOper_SonetApsEt_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_SonetApsEt implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_SonetApsEt can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_SonetApsEt.
func (E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt.
func (e E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_SonetApsEt_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_SonetApsEt
	Cisco_IOS_XRPfiImCmdOper_SonetApsEt_UNSET E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt = 0
	// Cisco_IOS_XRPfiImCmdOper_SonetApsEt_not_configured corresponds to the value not_configured of Cisco_IOS_XRPfiImCmdOper_SonetApsEt
	Cisco_IOS_XRPfiImCmdOper_SonetApsEt_not_configured E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt = 1
	// Cisco_IOS_XRPfiImCmdOper_SonetApsEt_working_active corresponds to the value working_active of Cisco_IOS_XRPfiImCmdOper_SonetApsEt
	Cisco_IOS_XRPfiImCmdOper_SonetApsEt_working_active E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt = 2
	// Cisco_IOS_XRPfiImCmdOper_SonetApsEt_protect_active corresponds to the value protect_active of Cisco_IOS_XRPfiImCmdOper_SonetApsEt
	Cisco_IOS_XRPfiImCmdOper_SonetApsEt_protect_active E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt = 3
	// Cisco_IOS_XRPfiImCmdOper_SonetApsEt_working_inactive corresponds to the value working_inactive of Cisco_IOS_XRPfiImCmdOper_SonetApsEt
	Cisco_IOS_XRPfiImCmdOper_SonetApsEt_working_inactive E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt = 4
	// Cisco_IOS_XRPfiImCmdOper_SonetApsEt_protect_inactive corresponds to the value protect_inactive of Cisco_IOS_XRPfiImCmdOper_SonetApsEt
	Cisco_IOS_XRPfiImCmdOper_SonetApsEt_protect_inactive E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt = 5
)

// E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt. An additional value named
// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt.
func (e E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_UNSET E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt = 0
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_hardware_missing_failure corresponds to the value hardware_missing_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_hardware_missing_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt = 1
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_layer1_admin_state_failure corresponds to the value layer1_admin_state_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_layer1_admin_state_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt = 2
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_layer1_error_failure corresponds to the value layer1_error_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_layer1_error_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt = 3
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_keepalive_missed_failure corresponds to the value keepalive_missed_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_keepalive_missed_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt = 4
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_link_quality_degraded_failure corresponds to the value link_quality_degraded_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_link_quality_degraded_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt = 5
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_mate_problem_failure corresponds to the value mate_problem_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_mate_problem_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt = 6
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_side_mismatch_failure corresponds to the value side_mismatch_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_side_mismatch_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt = 7
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_unknown_failure corresponds to the value unknown_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt_unknown_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt = 8
)

// E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt. An additional value named
// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt.
func (e E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_UNSET E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt = 0
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_idle_failure_state corresponds to the value idle_failure_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_idle_failure_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt = 1
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_wait_to_restore_failure_state corresponds to the value wait_to_restore_failure_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_wait_to_restore_failure_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt = 2
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_manual_switch_failure_state corresponds to the value manual_switch_failure_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_manual_switch_failure_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt = 3
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_signal_degrade_failure_state corresponds to the value signal_degrade_failure_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_signal_degrade_failure_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt = 4
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_signal_fail_failure_state corresponds to the value signal_fail_failure_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_signal_fail_failure_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt = 5
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_forced_switch_failure_state corresponds to the value forced_switch_failure_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_forced_switch_failure_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt = 6
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_shutdown_failure_state corresponds to the value shutdown_failure_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_shutdown_failure_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt = 7
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_invalid_failure_state corresponds to the value invalid_failure_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_invalid_failure_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt = 8
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_unknown_failure_state corresponds to the value unknown_failure_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt_unknown_failure_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt = 9
)

// E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd. An additional value named
// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd.
func (e E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd_UNSET E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd = 0
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd_short_path corresponds to the value short_path of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd_short_path E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd = 1
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd_long_path corresponds to the value long_path of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd_long_path E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd = 2
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd_unknown_path corresponds to the value unknown_path of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd_unknown_path E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd = 3
)

// E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq. An additional value named
// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq.
func (e E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_UNSET E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq = 0
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_idle_ips_request corresponds to the value idle_ips_request of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_idle_ips_request E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq = 1
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_wait_to_restore_ips_request corresponds to the value wait_to_restore_ips_request of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_wait_to_restore_ips_request E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq = 2
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_manual_switch_ips_request corresponds to the value manual_switch_ips_request of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_manual_switch_ips_request E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq = 3
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_signal_degrade_ips_request corresponds to the value signal_degrade_ips_request of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_signal_degrade_ips_request E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq = 4
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_signal_fail_ips_request corresponds to the value signal_fail_ips_request of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_signal_fail_ips_request E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq = 5
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_forced_switch_ips_request corresponds to the value forced_switch_ips_request of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_forced_switch_ips_request E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq = 6
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_unknown_ips_request corresponds to the value unknown_ips_request of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq_unknown_ips_request E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq = 7
)

// E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState. An additional value named
// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState.
func (e E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState_UNSET E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState = 0
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState_idle_wrap_state corresponds to the value idle_wrap_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState_idle_wrap_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState = 1
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState_wrapped_state corresponds to the value wrapped_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState_wrapped_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState = 2
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState_locked_out_wrap_state corresponds to the value locked_out_wrap_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState_locked_out_wrap_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState = 3
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState_unknown_wrap_state corresponds to the value unknown_wrap_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState_unknown_wrap_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState = 4
)

// E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure. An additional value named
// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure.
func (e E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_UNSET E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure = 0
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_idle_srr_failure corresponds to the value idle_srr_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_idle_srr_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure = 1
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_wait_to_restore_srr_failure corresponds to the value wait_to_restore_srr_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_wait_to_restore_srr_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure = 2
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_signal_fail_srr_failure corresponds to the value signal_fail_srr_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_signal_fail_srr_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure = 3
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_forced_switch_srr_failure corresponds to the value forced_switch_srr_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_forced_switch_srr_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure = 4
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_unknown_srr_failure corresponds to the value unknown_srr_failure of Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure_unknown_srr_failure E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure = 5
)

// E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState. An additional value named
// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState.
func (E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState.
func (e E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState_UNSET E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState = 0
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState_idle_srr_state corresponds to the value idle_srr_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState_idle_srr_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState = 1
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState_discovery_srr_state corresponds to the value discovery_srr_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState_discovery_srr_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState = 2
	// Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState_unknown_srr_state corresponds to the value unknown_srr_state of Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState
	Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState_unknown_srr_state E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState = 3
)

// E_Cisco_IOS_XRPfiImCmdOper_StatsCounter is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_StatsCounter. An additional value named
// Cisco_IOS_XRPfiImCmdOper_StatsCounter_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_StatsCounter int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_StatsCounter implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_StatsCounter can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_StatsCounter) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_StatsCounter.
func (E_Cisco_IOS_XRPfiImCmdOper_StatsCounter) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_StatsCounter.
func (e E_Cisco_IOS_XRPfiImCmdOper_StatsCounter) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_StatsCounter")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_UNSET E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 0
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_rate corresponds to the value stats_counter_rate of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_rate E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 1
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_uint32 corresponds to the value stats_counter_uint32 of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_uint32 E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 2
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_uint64 corresponds to the value stats_counter_uint64 of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_uint64 E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 3
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_generic corresponds to the value stats_counter_generic of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_generic E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 4
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_proto corresponds to the value stats_counter_proto of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_proto E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 5
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_srp corresponds to the value stats_counter_srp of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_srp E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 6
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_ipv4_prec corresponds to the value stats_counter_ipv4_prec of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_ipv4_prec E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 7
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_ipv4_dscp corresponds to the value stats_counter_ipv4_dscp of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_ipv4_dscp E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 8
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_mpls_exp corresponds to the value stats_counter_mpls_exp of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_mpls_exp E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 9
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_ipv4_bgp_pa corresponds to the value stats_counter_ipv4_bgp_pa of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_ipv4_bgp_pa E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 10
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_src_bgp_pa corresponds to the value stats_counter_src_bgp_pa of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_src_bgp_pa E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 11
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_basic corresponds to the value stats_counter_basic of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_basic E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 12
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_comp_generic corresponds to the value stats_counter_comp_generic of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_comp_generic E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 13
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_comp_proto corresponds to the value stats_counter_comp_proto of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_comp_proto E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 14
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_comp_basic corresponds to the value stats_counter_comp_basic of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_comp_basic E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 15
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_accounting corresponds to the value stats_counter_accounting of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_accounting E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 16
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_comp_accounting corresponds to the value stats_counter_comp_accounting of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_comp_accounting E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 17
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_flow corresponds to the value stats_counter_flow of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_flow E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 18
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_comp_flow corresponds to the value stats_counter_comp_flow of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_comp_flow E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 19
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_timestamp corresponds to the value stats_counter_timestamp of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_timestamp E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 20
	// Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_qos corresponds to the value stats_counter_qos of Cisco_IOS_XRPfiImCmdOper_StatsCounter
	Cisco_IOS_XRPfiImCmdOper_StatsCounter_stats_counter_qos E_Cisco_IOS_XRPfiImCmdOper_StatsCounter = 21
)

// E_Cisco_IOS_XRPfiImCmdOper_StatsId is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_StatsId. An additional value named
// Cisco_IOS_XRPfiImCmdOper_StatsId_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_StatsId int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_StatsId implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_StatsId can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_StatsId) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_StatsId.
func (E_Cisco_IOS_XRPfiImCmdOper_StatsId) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_StatsId.
func (e E_Cisco_IOS_XRPfiImCmdOper_StatsId) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_StatsId")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_StatsId_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_StatsId
	Cisco_IOS_XRPfiImCmdOper_StatsId_UNSET E_Cisco_IOS_XRPfiImCmdOper_StatsId = 0
	// Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_unknown corresponds to the value stats_id_type_unknown of Cisco_IOS_XRPfiImCmdOper_StatsId
	Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_unknown E_Cisco_IOS_XRPfiImCmdOper_StatsId = 1
	// Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_min corresponds to the value stats_id_type_min of Cisco_IOS_XRPfiImCmdOper_StatsId
	Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_min E_Cisco_IOS_XRPfiImCmdOper_StatsId = 2
	// Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_spare corresponds to the value stats_id_type_spare of Cisco_IOS_XRPfiImCmdOper_StatsId
	Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_spare E_Cisco_IOS_XRPfiImCmdOper_StatsId = 3
	// Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_node corresponds to the value stats_id_type_node of Cisco_IOS_XRPfiImCmdOper_StatsId
	Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_node E_Cisco_IOS_XRPfiImCmdOper_StatsId = 4
	// Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_other corresponds to the value stats_id_type_other of Cisco_IOS_XRPfiImCmdOper_StatsId
	Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_other E_Cisco_IOS_XRPfiImCmdOper_StatsId = 5
	// Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_feature corresponds to the value stats_id_type_feature of Cisco_IOS_XRPfiImCmdOper_StatsId
	Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_feature E_Cisco_IOS_XRPfiImCmdOper_StatsId = 6
	// Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_max corresponds to the value stats_id_type_max of Cisco_IOS_XRPfiImCmdOper_StatsId
	Cisco_IOS_XRPfiImCmdOper_StatsId_stats_id_type_max E_Cisco_IOS_XRPfiImCmdOper_StatsId = 7
)

// E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_StatsTypeContents. An additional value named
// Cisco_IOS_XRPfiImCmdOper_StatsTypeContents_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_StatsTypeContents implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_StatsTypeContents can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_StatsTypeContents.
func (E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents.
func (e E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_StatsTypeContents_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_StatsTypeContents
	Cisco_IOS_XRPfiImCmdOper_StatsTypeContents_UNSET E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents = 0
	// Cisco_IOS_XRPfiImCmdOper_StatsTypeContents_stats_type_single corresponds to the value stats_type_single of Cisco_IOS_XRPfiImCmdOper_StatsTypeContents
	Cisco_IOS_XRPfiImCmdOper_StatsTypeContents_stats_type_single E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents = 1
	// Cisco_IOS_XRPfiImCmdOper_StatsTypeContents_stats_type_variable corresponds to the value stats_type_variable of Cisco_IOS_XRPfiImCmdOper_StatsTypeContents
	Cisco_IOS_XRPfiImCmdOper_StatsTypeContents_stats_type_variable E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents = 2
)

// E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir. An additional value named
// Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir.
func (E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir.
func (e E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir
	Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir_UNSET E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir = 0
	// Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir_tunl_ip_mode_dir_none corresponds to the value tunl_ip_mode_dir_none of Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir
	Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir_tunl_ip_mode_dir_none E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir = 1
	// Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir_tunl_ip_mode_dir_decap corresponds to the value tunl_ip_mode_dir_decap of Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir
	Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir_tunl_ip_mode_dir_decap E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir = 2
	// Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir_tunl_ip_mode_dir_encap corresponds to the value tunl_ip_mode_dir_encap of Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir
	Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir_tunl_ip_mode_dir_encap E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir = 3
	// Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir_tunl_ip_mode_dir_max corresponds to the value tunl_ip_mode_dir_max of Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir
	Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir_tunl_ip_mode_dir_max E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir = 4
)

// E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId. An additional value named
// Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId.
func (E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId.
func (e E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId
	Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId_UNSET E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId = 0
	// Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId_tunl_pfi_af_id_none corresponds to the value tunl_pfi_af_id_none of Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId
	Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId_tunl_pfi_af_id_none E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId = 1
	// Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId_tunl_pfi_af_id_ipv4 corresponds to the value tunl_pfi_af_id_ipv4 of Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId
	Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId_tunl_pfi_af_id_ipv4 E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId = 2
	// Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId_tunl_pfi_af_id_ipv6 corresponds to the value tunl_pfi_af_id_ipv6 of Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId
	Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId_tunl_pfi_af_id_ipv6 E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId = 3
)

// E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_TunnelGreMode. An additional value named
// Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_TunnelGreMode implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_TunnelGreMode can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_TunnelGreMode.
func (E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode.
func (e E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_TunnelGreMode
	Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_UNSET E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode = 0
	// Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_unknown corresponds to the value unknown of Cisco_IOS_XRPfiImCmdOper_TunnelGreMode
	Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_unknown E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode = 1
	// Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_gr_eo_ipv4 corresponds to the value gr_eo_ipv4 of Cisco_IOS_XRPfiImCmdOper_TunnelGreMode
	Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_gr_eo_ipv4 E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode = 2
	// Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_gr_eo_ipv6 corresponds to the value gr_eo_ipv6 of Cisco_IOS_XRPfiImCmdOper_TunnelGreMode
	Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_gr_eo_ipv6 E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode = 3
	// Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_mgr_eo_ipv4 corresponds to the value mgr_eo_ipv4 of Cisco_IOS_XRPfiImCmdOper_TunnelGreMode
	Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_mgr_eo_ipv4 E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode = 4
	// Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_mgr_eo_ipv6 corresponds to the value mgr_eo_ipv6 of Cisco_IOS_XRPfiImCmdOper_TunnelGreMode
	Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_mgr_eo_ipv6 E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode = 5
	// Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_ipv4 corresponds to the value ipv4 of Cisco_IOS_XRPfiImCmdOper_TunnelGreMode
	Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_ipv4 E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode = 6
	// Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_ipv6 corresponds to the value ipv6 of Cisco_IOS_XRPfiImCmdOper_TunnelGreMode
	Cisco_IOS_XRPfiImCmdOper_TunnelGreMode_ipv6 E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode = 7
)

// E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState. An additional value named
// Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState.
func (E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState.
func (e E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState
	Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState_UNSET E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState = 0
	// Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState_disable corresponds to the value disable of Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState
	Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState_disable E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState = 1
	// Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState_enable corresponds to the value enable of Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState
	Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState_enable E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState = 2
)

// E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_TunnelKeyState. An additional value named
// Cisco_IOS_XRPfiImCmdOper_TunnelKeyState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_TunnelKeyState implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_TunnelKeyState can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_TunnelKeyState.
func (E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState.
func (e E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_TunnelKeyState_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_TunnelKeyState
	Cisco_IOS_XRPfiImCmdOper_TunnelKeyState_UNSET E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState = 0
	// Cisco_IOS_XRPfiImCmdOper_TunnelKeyState_absent corresponds to the value absent of Cisco_IOS_XRPfiImCmdOper_TunnelKeyState
	Cisco_IOS_XRPfiImCmdOper_TunnelKeyState_absent E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState = 1
	// Cisco_IOS_XRPfiImCmdOper_TunnelKeyState_present corresponds to the value present of Cisco_IOS_XRPfiImCmdOper_TunnelKeyState
	Cisco_IOS_XRPfiImCmdOper_TunnelKeyState_present E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState = 2
)

// E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_VlanEncaps. An additional value named
// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_VlanEncaps implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_VlanEncaps can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_VlanEncaps.
func (E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps.
func (e E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_VlanEncaps
	Cisco_IOS_XRPfiImCmdOper_VlanEncaps_UNSET E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps = 0
	// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_no_encapsulation corresponds to the value no_encapsulation of Cisco_IOS_XRPfiImCmdOper_VlanEncaps
	Cisco_IOS_XRPfiImCmdOper_VlanEncaps_no_encapsulation E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps = 1
	// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1q corresponds to the value dot1q of Cisco_IOS_XRPfiImCmdOper_VlanEncaps
	Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1q E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps = 2
	// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_qinq corresponds to the value qinq of Cisco_IOS_XRPfiImCmdOper_VlanEncaps
	Cisco_IOS_XRPfiImCmdOper_VlanEncaps_qinq E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps = 3
	// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_qin_any corresponds to the value qin_any of Cisco_IOS_XRPfiImCmdOper_VlanEncaps
	Cisco_IOS_XRPfiImCmdOper_VlanEncaps_qin_any E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps = 4
	// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1q_native corresponds to the value dot1q_native of Cisco_IOS_XRPfiImCmdOper_VlanEncaps
	Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1q_native E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps = 5
	// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1ad corresponds to the value dot1ad of Cisco_IOS_XRPfiImCmdOper_VlanEncaps
	Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1ad E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps = 6
	// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1ad_native corresponds to the value dot1ad_native of Cisco_IOS_XRPfiImCmdOper_VlanEncaps
	Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1ad_native E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps = 7
	// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_service_instance corresponds to the value service_instance of Cisco_IOS_XRPfiImCmdOper_VlanEncaps
	Cisco_IOS_XRPfiImCmdOper_VlanEncaps_service_instance E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps = 8
	// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1ad_dot1q corresponds to the value dot1ad_dot1q of Cisco_IOS_XRPfiImCmdOper_VlanEncaps
	Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1ad_dot1q E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps = 9
	// Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1ad_any corresponds to the value dot1ad_any of Cisco_IOS_XRPfiImCmdOper_VlanEncaps
	Cisco_IOS_XRPfiImCmdOper_VlanEncaps_dot1ad_any E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps = 10
)

// E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode is a derived int64 type which is used to represent
// the enumerated node Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode. An additional value named
// Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode int64

// IsYANGGoEnum ensures that Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode implements the yang.GoEnum
// interface. This ensures that Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode can be identified as a
// mapped type for a YANG enumeration.
func (E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode.
func (E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode.
func (e E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode")
}

const (
	// Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode_UNSET corresponds to the value UNSET of Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode
	Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode_UNSET E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode = 0
	// Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode_none corresponds to the value none of Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode
	Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode_none E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode = 1
	// Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode_trunk_port corresponds to the value trunk_port of Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode
	Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode_trunk_port E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode = 2
	// Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode_access_port corresponds to the value access_port of Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode
	Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode_access_port E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode = 3
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason": {
		1:  {Name: "bm-mbr-state-reason-unknown"},
		2:  {Name: "bm-mbr-state-reason-unselectable-unknown"},
		3:  {Name: "bm-mbr-state-reason-link-down"},
		4:  {Name: "bm-mbr-state-reason-link-deleting"},
		5:  {Name: "bm-mbr-state-reason-creating"},
		6:  {Name: "bm-mbr-state-reason-bundle-creating"},
		7:  {Name: "bm-mbr-state-reason-bundle-deleting"},
		8:  {Name: "bm-mbr-state-reason-bundle-admin-down"},
		9:  {Name: "bm-mbr-state-reason-replicating"},
		10: {Name: "bm-mbr-state-reason-bandwidth"},
		11: {Name: "bm-mbr-state-reason-loop-back"},
		12: {Name: "bm-mbr-state-reason-activity-type"},
		13: {Name: "bm-mbr-state-reason-bundle-shutdown"},
		14: {Name: "bm-mbr-state-reason-min-selected"},
		15: {Name: "bm-mbr-state-reason-max-selected"},
		16: {Name: "bm-mbr-state-reason-link-limit"},
		17: {Name: "bm-mbr-state-reason-active-limit"},
		18: {Name: "bm-mbr-state-reason-standby-unknown"},
		19: {Name: "bm-mbr-state-reason-expired"},
		20: {Name: "bm-mbr-state-reason-defaulted"},
		21: {Name: "bm-mbr-state-reason-act-or-not-agg"},
		22: {Name: "bm-mbr-state-reason-partner-not-agg"},
		23: {Name: "bm-mbr-state-reason-lagid"},
		24: {Name: "bm-mbr-state-reason-bundle-not-cfgd"},
		25: {Name: "bm-mbr-state-reason-bundle-not-ready"},
		26: {Name: "bm-mbr-state-reason-partner-ood"},
		27: {Name: "bm-mbr-state-reason-partner-not-in-sync"},
		28: {Name: "bm-mbr-state-reason-foreign-partner-oos"},
		29: {Name: "bm-mbr-state-reason-attach-unknown"},
		30: {Name: "bm-mbr-state-reason-partner-not-collecting"},
		31: {Name: "bm-mbr-state-reason-collect-unknown"},
		32: {Name: "bm-mbr-state-reason-standby-foreign"},
		33: {Name: "bm-mbr-state-reason-bfd-starting"},
		34: {Name: "bm-mbr-state-reason-bfd-down"},
		35: {Name: "bm-mbr-state-reason-bfd-nbr-unconfig"},
		36: {Name: "bm-mbr-state-reason-mlacp"},
		37: {Name: "bm-mbr-state-reason-pe-isolated"},
		38: {Name: "bm-mbr-state-reason-forced-switchover"},
		39: {Name: "bm-mbr-state-reason-errdis-unknown"},
		40: {Name: "bm-mbr-state-reason-mlacp-no-mbr-state-info"},
		41: {Name: "bm-mbr-state-reason-active"},
		42: {Name: "bm-mbr-state-reason-mlacp-no-bdl-state-info"},
		43: {Name: "bm-mbr-state-reason-mlacp-no-bdl-config-info"},
		44: {Name: "bm-mbr-state-reason-mlacp-no-bdl-sync"},
		45: {Name: "bm-mbr-state-reason-mlacp-bdl-has-no-peer"},
		46: {Name: "bm-mbr-state-reason-mlacp-nak"},
		47: {Name: "bm-mbr-state-reason-mlacp-transport-unavailable"},
		48: {Name: "bm-mbr-state-reason-mlacp-not-configured"},
		49: {Name: "bm-mbr-state-reason-recovery-timer"},
		50: {Name: "bm-mbr-state-reason-mlacp-standby"},
		51: {Name: "bm-mbr-state-reason-maximized-out"},
		52: {Name: "bm-mbr-state-reason-mlacp-peer-selected"},
		53: {Name: "bm-mbr-state-reason-mlacp-connect-timer-running"},
		54: {Name: "bm-mbr-state-reason-bundle-not-mlacp"},
		55: {Name: "bm-mbr-state-reason-no-lon"},
		56: {Name: "bm-mbr-state-reason-cumul-rel-bw-limit"},
		57: {Name: "bm-mbr-state-reason-no-mac"},
		58: {Name: "bm-mbr-state-reason-no-system-id"},
		59: {Name: "bm-mbr-state-reason-link-shutdown"},
		60: {Name: "bm-mbr-state-reason-activity-mlacp"},
		61: {Name: "bm-mbr-state-reason-activity-iccp"},
		62: {Name: "bm-mbr-state-reason-bundle-icpe-mlacp"},
		63: {Name: "bm-mbr-state-reason-no-link-num"},
		64: {Name: "bm-mbr-state-reason-standby-peer-higher-prio"},
		65: {Name: "bm-mbr-state-reason-red-state-standby"},
		66: {Name: "bm-mbr-state-reason-other-red-state-standby"},
		67: {Name: "bm-mbr-state-reason-hold-ing"},
		68: {Name: "bm-mbr-state-reason-bundle-error-disabled"},
		69: {Name: "bm-mbr-state-reason-bundle-efd-disabled"},
		70: {Name: "bm-mbr-state-reason-singleton-pe-isolated"},
		71: {Name: "bm-mbr-state-reason-bfd-ipv6-starting"},
		72: {Name: "bm-mbr-state-reason-bfd-ipv6-down"},
		73: {Name: "bm-mbr-state-reason-bfd-ipv6-nbr-unconfig"},
		74: {Name: "bm-mbr-state-reason-timer-running"},
		75: {Name: "bm-mbr-state-reason-client-bundle-ctrl"},
		76: {Name: "bm-mbr-state-reason-lacp-oos"},
		77: {Name: "bm-mbr-state-reason-errdis-bundle-oos"},
		78: {Name: "bm-mbr-state-reason-count"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason": {
		1:  {Name: "bm-mux-reason-no-reason"},
		2:  {Name: "bm-mux-reason-link-down"},
		3:  {Name: "bm-mux-reason-link-deleted"},
		4:  {Name: "bm-mux-reason-duplex"},
		5:  {Name: "bm-mux-reason-bandwidth"},
		6:  {Name: "bm-mux-reason-loop-back"},
		7:  {Name: "bm-mux-reason-activity-type"},
		8:  {Name: "bm-mux-reason-link-limit"},
		9:  {Name: "bm-mux-reason-shared"},
		10: {Name: "bm-mux-reason-lagid"},
		11: {Name: "bm-mux-reason-no-bundle"},
		12: {Name: "bm-mux-reason-no-primary"},
		13: {Name: "bm-mux-reason-bundle-down"},
		14: {Name: "bm-mux-reason-individual"},
		15: {Name: "bm-mux-reason-defaulted"},
		16: {Name: "bm-mux-reason-in-sync"},
		17: {Name: "bm-mux-reason-collecting"},
		18: {Name: "bm-mux-reason-active-link-limit"},
		19: {Name: "bm-mux-reason-distributing"},
		20: {Name: "bm-mux-reason-count"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate": {
		1: {Name: "detached"},
		2: {Name: "waiting"},
		3: {Name: "attached"},
		4: {Name: "collecting"},
		5: {Name: "distributing"},
		6: {Name: "collecting-distributing"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_BmSeverity": {
		1: {Name: "ok"},
		2: {Name: "information"},
		3: {Name: "misconfiguration"},
		4: {Name: "warning"},
		5: {Name: "error"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget": {
		1: {Name: "member-reason"},
		2: {Name: "bundle-reason"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState": {
		1: {Name: "bmd-mbr-state-configured"},
		2: {Name: "bmd-mbr-state-standby"},
		3: {Name: "bmd-mbr-state-hot-standby"},
		4: {Name: "bmd-mbr-state-negotiating"},
		5: {Name: "bmd-mbr-state-bfd-running"},
		6: {Name: "bmd-mbr-state-active"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum": {
		1: {Name: "bmd-mbr-local"},
		2: {Name: "bmd-mbr-foreign"},
		3: {Name: "bmd-mbr-unknown"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype": {
		1: {Name: "payload-ethertype-any"},
		2: {Name: "payload-ethertype-ip"},
		3: {Name: "payload-ethertype-pppoe"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype": {
		1: {Name: "untagged"},
		2: {Name: "dot1q"},
		3: {Name: "dot1ad"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority": {
		1: {Name: "priority0"},
		2: {Name: "priority1"},
		3: {Name: "priority2"},
		4: {Name: "priority3"},
		5: {Name: "priority4"},
		6: {Name: "priority5"},
		7: {Name: "priority6"},
		8: {Name: "priority7"},
		9: {Name: "priority-any"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_GccDerState": {
		1: {Name: "in-service"},
		2: {Name: "out-of-service"},
		3: {Name: "maintenance"},
		4: {Name: "ais"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_GccSecState": {
		1: {Name: "normal"},
		2: {Name: "maintenance"},
		3: {Name: "ais"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex": {
		1: {Name: "im-attr-duplex-unknown"},
		2: {Name: "im-attr-duplex-half"},
		3: {Name: "im-attr-duplex-full"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl": {
		1: {Name: "im-attr-flow-control-off"},
		2: {Name: "im-attr-flow-control-on"},
		3: {Name: "im-attr-flow-control-not-sup"},
		4: {Name: "im-attr-flow-control-priority"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink": {
		1: {Name: "im-attr-link-type-auto"},
		2: {Name: "im-attr-link-type-force"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia": {
		1:   {Name: "im-attr-media-other"},
		2:   {Name: "im-attr-media-unknown"},
		3:   {Name: "im-attr-media-aui"},
		4:   {Name: "im-attr-media-10base5"},
		5:   {Name: "im-attr-media-foirl"},
		6:   {Name: "im-attr-media-10base2"},
		7:   {Name: "im-attr-media-10broad36"},
		8:   {Name: "im-attr-media-10base"},
		9:   {Name: "im-attr-media-10base-thd"},
		10:  {Name: "im-attr-media-10base-tfd"},
		11:  {Name: "im-attr-media-10base-fp"},
		12:  {Name: "im-attr-media-10base-fb"},
		13:  {Name: "im-attr-media-10base-fl"},
		14:  {Name: "im-attr-media-10base-flhd"},
		15:  {Name: "im-attr-media-10base-flfd"},
		16:  {Name: "im-attr-media-100base-t4"},
		17:  {Name: "im-attr-media-100base-tx"},
		18:  {Name: "im-attr-media-100base-txhd"},
		19:  {Name: "im-attr-media-100base-txfd"},
		20:  {Name: "im-attr-media-100base-fx"},
		21:  {Name: "im-attr-media-100base-fxhd"},
		22:  {Name: "im-attr-media-100base-fxfd"},
		23:  {Name: "im-attr-media-100base-ex"},
		24:  {Name: "im-attr-media-100base-exhd"},
		25:  {Name: "im-attr-media-100base-exfd"},
		26:  {Name: "im-attr-media-100base-t2"},
		27:  {Name: "im-attr-media-100base-t2hd"},
		28:  {Name: "im-attr-media-100base-t2fd"},
		29:  {Name: "im-attr-media-1000base-x"},
		30:  {Name: "im-attr-media-1000base-xhdx"},
		31:  {Name: "im-attr-media-1000base-xfd"},
		32:  {Name: "im-attr-media-1000base-lx"},
		33:  {Name: "im-attr-media-1000base-lxhd"},
		34:  {Name: "im-attr-media-1000base-lxfdx"},
		35:  {Name: "im-attr-media-1000base-sx"},
		36:  {Name: "im-attr-media-1000base-sxhd"},
		37:  {Name: "im-attr-media-1000base-sxfd"},
		38:  {Name: "im-attr-media-1000base-cx"},
		39:  {Name: "im-attr-media-1000base-cxhdx"},
		40:  {Name: "im-attr-media-1000base-cxfd"},
		41:  {Name: "im-attr-media-1000base"},
		42:  {Name: "im-attr-media-1000base-thd"},
		43:  {Name: "im-attr-media-1000base-tfd"},
		44:  {Name: "im-attr-media-10gbase-x"},
		45:  {Name: "im-attr-media-10gbase-lx4"},
		46:  {Name: "im-attr-media-10gbase-r"},
		47:  {Name: "im-attr-media-10gbase-er"},
		48:  {Name: "im-attr-media-10gbase-lr"},
		49:  {Name: "im-attr-media-10gbase-sr"},
		50:  {Name: "im-attr-media-10gbase-csr"},
		51:  {Name: "im-attr-media-10gbase-w"},
		52:  {Name: "im-attr-media-10gbase-ew"},
		53:  {Name: "im-attr-media-10gbase-lw"},
		54:  {Name: "im-attr-media-10gbase-sw"},
		55:  {Name: "im-attr-media-10gbase-zr"},
		56:  {Name: "im-attr-media-802-9a"},
		57:  {Name: "im-attr-media-rj45"},
		58:  {Name: "im-attr-media-1000base-zx"},
		59:  {Name: "im-attr-media-1000base-cwdm"},
		60:  {Name: "im-attr-media-1000base-cwdm-1470"},
		61:  {Name: "im-attr-media-1000base-cwdm-1490"},
		62:  {Name: "im-attr-media-1000base-cwdm-1510"},
		63:  {Name: "im-attr-media-1000base-cwdm-1530"},
		64:  {Name: "im-attr-media-1000base-cwdm-1550"},
		65:  {Name: "im-attr-media-1000base-cwdm-1570"},
		66:  {Name: "im-attr-media-1000base-cwdm-1590"},
		67:  {Name: "im-attr-media-1000base-cwdm-1610"},
		68:  {Name: "im-attr-media-10gbase-dwdm"},
		69:  {Name: "im-attr-media-100gbase-lr4"},
		70:  {Name: "im-attr-media-1000base-dwdm"},
		71:  {Name: "im-attr-media-1000base-dwdm-1533"},
		72:  {Name: "im-attr-media-1000base-dwdm-1537"},
		73:  {Name: "im-attr-media-1000base-dwdm-1541"},
		74:  {Name: "im-attr-media-1000base-dwdm-1545"},
		75:  {Name: "im-attr-media-1000base-dwdm-1549"},
		76:  {Name: "im-attr-media-1000base-dwdm-1553"},
		77:  {Name: "im-attr-media-1000base-dwdm-1557"},
		78:  {Name: "im-attr-media-1000base-dwdm-1561"},
		79:  {Name: "im-attr-media-40gbase-lr4"},
		80:  {Name: "im-attr-media-40gbase-er4"},
		81:  {Name: "im-attr-media-100gbase-er4"},
		82:  {Name: "im-attr-media-1000base-ex"},
		83:  {Name: "im-attr-media-1000base-bx10-d"},
		84:  {Name: "im-attr-media-1000base-bx10-u"},
		85:  {Name: "im-attr-media-1000base-dwdm-1561-42"},
		86:  {Name: "im-attr-media-1000base-dwdm-1560-61"},
		87:  {Name: "im-attr-media-1000base-dwdm-1559-79"},
		88:  {Name: "im-attr-media-1000base-dwdm-1558-98"},
		89:  {Name: "im-attr-media-1000base-dwdm-1558-17"},
		90:  {Name: "im-attr-media-1000base-dwdm-1557-36"},
		91:  {Name: "im-attr-media-1000base-dwdm-1556-55"},
		92:  {Name: "im-attr-media-1000base-dwdm-1555-75"},
		93:  {Name: "im-attr-media-1000base-dwdm-1554-94"},
		94:  {Name: "im-attr-media-1000base-dwdm-1554-13"},
		95:  {Name: "im-attr-media-1000base-dwdm-1553-33"},
		96:  {Name: "im-attr-media-1000base-dwdm-1552-52"},
		97:  {Name: "im-attr-media-1000base-dwdm-1551-72"},
		98:  {Name: "im-attr-media-1000base-dwdm-1550-92"},
		99:  {Name: "im-attr-media-1000base-dwdm-1550-12"},
		100: {Name: "im-attr-media-1000base-dwdm-1549-32"},
		101: {Name: "im-attr-media-1000base-dwdm-1548-51"},
		102: {Name: "im-attr-media-1000base-dwdm-1547-72"},
		103: {Name: "im-attr-media-1000base-dwdm-1546-92"},
		104: {Name: "im-attr-media-1000base-dwdm-1546-12"},
		105: {Name: "im-attr-media-1000base-dwdm-1545-32"},
		106: {Name: "im-attr-media-1000base-dwdm-1544-53"},
		107: {Name: "im-attr-media-1000base-dwdm-1543-73"},
		108: {Name: "im-attr-media-1000base-dwdm-1542-94"},
		109: {Name: "im-attr-media-1000base-dwdm-1542-14"},
		110: {Name: "im-attr-media-1000base-dwdm-1541-35"},
		111: {Name: "im-attr-media-1000base-dwdm-1540-56"},
		112: {Name: "im-attr-media-1000base-dwdm-1539-77"},
		113: {Name: "im-attr-media-1000base-dwdm-1538-98"},
		114: {Name: "im-attr-media-1000base-dwdm-1538-19"},
		115: {Name: "im-attr-media-1000base-dwdm-1537-40"},
		116: {Name: "im-attr-media-1000base-dwdm-1536-61"},
		117: {Name: "im-attr-media-1000base-dwdm-1535-82"},
		118: {Name: "im-attr-media-1000base-dwdm-1535-04"},
		119: {Name: "im-attr-media-1000base-dwdm-1534-25"},
		120: {Name: "im-attr-media-1000base-dwdm-1533-47"},
		121: {Name: "im-attr-media-1000base-dwdm-1532-68"},
		122: {Name: "im-attr-media-1000base-dwdm-1531-90"},
		123: {Name: "im-attr-media-1000base-dwdm-1531-12"},
		124: {Name: "im-attr-media-1000base-dwdm-1530-33"},
		125: {Name: "im-attr-media-1000base-dwdm-tunable"},
		126: {Name: "im-attr-media-10gbase-dwdm-1561-42"},
		127: {Name: "im-attr-media-10gbase-dwdm-1560-61"},
		128: {Name: "im-attr-media-10gbase-dwdm-1559-79"},
		129: {Name: "im-attr-media-10gbase-dwdm-1558-98"},
		130: {Name: "im-attr-media-10gbase-dwdm-1558-17"},
		131: {Name: "im-attr-media-10gbase-dwdm-1557-36"},
		132: {Name: "im-attr-media-10gbase-dwdm-1556-55"},
		133: {Name: "im-attr-media-10gbase-dwdm-1555-75"},
		134: {Name: "im-attr-media-10gbase-dwdm-1554-94"},
		135: {Name: "im-attr-media-10gbase-dwdm-1554-13"},
		136: {Name: "im-attr-media-10gbase-dwdm-1553-33"},
		137: {Name: "im-attr-media-10gbase-dwdm-1552-52"},
		138: {Name: "im-attr-media-10gbase-dwdm-1551-72"},
		139: {Name: "im-attr-media-10gbase-dwdm-1550-92"},
		140: {Name: "im-attr-media-10gbase-dwdm-1550-12"},
		141: {Name: "im-attr-media-10gbase-dwdm-1549-32"},
		142: {Name: "im-attr-media-10gbase-dwdm-1548-51"},
		143: {Name: "im-attr-media-10gbase-dwdm-1547-72"},
		144: {Name: "im-attr-media-10gbase-dwdm-1546-92"},
		145: {Name: "im-attr-media-10gbase-dwdm-1546-12"},
		146: {Name: "im-attr-media-10gbase-dwdm-1545-32"},
		147: {Name: "im-attr-media-10gbase-dwdm-1544-53"},
		148: {Name: "im-attr-media-10gbase-dwdm-1543-73"},
		149: {Name: "im-attr-media-10gbase-dwdm-1542-94"},
		150: {Name: "im-attr-media-10gbase-dwdm-1542-14"},
		151: {Name: "im-attr-media-10gbase-dwdm-1541-35"},
		152: {Name: "im-attr-media-10gbase-dwdm-1540-56"},
		153: {Name: "im-attr-media-10gbase-dwdm-1539-77"},
		154: {Name: "im-attr-media-10gbase-dwdm-1538-98"},
		155: {Name: "im-attr-media-10gbase-dwdm-1538-19"},
		156: {Name: "im-attr-media-10gbase-dwdm-1537-40"},
		157: {Name: "im-attr-media-10gbase-dwdm-1536-61"},
		158: {Name: "im-attr-media-10gbase-dwdm-1535-82"},
		159: {Name: "im-attr-media-10gbase-dwdm-1535-04"},
		160: {Name: "im-attr-media-10gbase-dwdm-1534-25"},
		161: {Name: "im-attr-media-10gbase-dwdm-1533-47"},
		162: {Name: "im-attr-media-10gbase-dwdm-1532-68"},
		163: {Name: "im-attr-media-10gbase-dwdm-1531-90"},
		164: {Name: "im-attr-media-10gbase-dwdm-1531-12"},
		165: {Name: "im-attr-media-10gbase-dwdm-1530-33"},
		166: {Name: "im-attr-media-10gbase-dwdm-tunable"},
		167: {Name: "im-attr-media-40gbase-dwdm-1561-42"},
		168: {Name: "im-attr-media-40gbase-dwdm-1560-61"},
		169: {Name: "im-attr-media-40gbase-dwdm-1559-79"},
		170: {Name: "im-attr-media-40gbase-dwdm-1558-98"},
		171: {Name: "im-attr-media-40gbase-dwdm-1558-17"},
		172: {Name: "im-attr-media-40gbase-dwdm-1557-36"},
		173: {Name: "im-attr-media-40gbase-dwdm-1556-55"},
		174: {Name: "im-attr-media-40gbase-dwdm-1555-75"},
		175: {Name: "im-attr-media-40gbase-dwdm-1554-94"},
		176: {Name: "im-attr-media-40gbase-dwdm-1554-13"},
		177: {Name: "im-attr-media-40gbase-dwdm-1553-33"},
		178: {Name: "im-attr-media-40gbase-dwdm-1552-52"},
		179: {Name: "im-attr-media-40gbase-dwdm-1551-72"},
		180: {Name: "im-attr-media-40gbase-dwdm-1550-92"},
		181: {Name: "im-attr-media-40gbase-dwdm-1550-12"},
		182: {Name: "im-attr-media-40gbase-dwdm-1549-32"},
		183: {Name: "im-attr-media-40gbase-dwdm-1548-51"},
		184: {Name: "im-attr-media-40gbase-dwdm-1547-72"},
		185: {Name: "im-attr-media-40gbase-dwdm-1546-92"},
		186: {Name: "im-attr-media-40gbase-dwdm-1546-12"},
		187: {Name: "im-attr-media-40gbase-dwdm-1545-32"},
		188: {Name: "im-attr-media-40gbase-dwdm-1544-53"},
		189: {Name: "im-attr-media-40gbase-dwdm-1543-73"},
		190: {Name: "im-attr-media-40gbase-dwdm-1542-94"},
		191: {Name: "im-attr-media-40gbase-dwdm-1542-14"},
		192: {Name: "im-attr-media-40gbase-dwdm-1541-35"},
		193: {Name: "im-attr-media-40gbase-dwdm-1540-56"},
		194: {Name: "im-attr-media-40gbase-dwdm-1539-77"},
		195: {Name: "im-attr-media-40gbase-dwdm-1538-98"},
		196: {Name: "im-attr-media-40gbase-dwdm-1538-19"},
		197: {Name: "im-attr-media-40gbase-dwdm-1537-40"},
		198: {Name: "im-attr-media-40gbase-dwdm-1536-61"},
		199: {Name: "im-attr-media-40gbase-dwdm-1535-82"},
		200: {Name: "im-attr-media-40gbase-dwdm-1535-04"},
		201: {Name: "im-attr-media-40gbase-dwdm-1534-25"},
		202: {Name: "im-attr-media-40gbase-dwdm-1533-47"},
		203: {Name: "im-attr-media-40gbase-dwdm-1532-68"},
		204: {Name: "im-attr-media-40gbase-dwdm-1531-90"},
		205: {Name: "im-attr-media-40gbase-dwdm-1531-12"},
		206: {Name: "im-attr-media-40gbase-dwdm-1530-33"},
		207: {Name: "im-attr-media-40gbase-dwdm-tunable"},
		208: {Name: "im-attr-media-100gbase-dwdm-1561-42"},
		209: {Name: "im-attr-media-100gbase-dwdm-1560-61"},
		210: {Name: "im-attr-media-100gbase-dwdm-1559-79"},
		211: {Name: "im-attr-media-100gbase-dwdm-1558-98"},
		212: {Name: "im-attr-media-100gbase-dwdm-1558-17"},
		213: {Name: "im-attr-media-100gbase-dwdm-1557-36"},
		214: {Name: "im-attr-media-100gbase-dwdm-1556-55"},
		215: {Name: "im-attr-media-100gbase-dwdm-1555-75"},
		216: {Name: "im-attr-media-100gbase-dwdm-1554-94"},
		217: {Name: "im-attr-media-100gbase-dwdm-1554-13"},
		218: {Name: "im-attr-media-100gbase-dwdm-1553-33"},
		219: {Name: "im-attr-media-100gbase-dwdm-1552-52"},
		220: {Name: "im-attr-media-100gbase-dwdm-1551-72"},
		221: {Name: "im-attr-media-100gbase-dwdm-1550-92"},
		222: {Name: "im-attr-media-100gbase-dwdm-1550-12"},
		223: {Name: "im-attr-media-100gbase-dwdm-1549-32"},
		224: {Name: "im-attr-media-100gbase-dwdm-1548-51"},
		225: {Name: "im-attr-media-100gbase-dwdm-1547-72"},
		226: {Name: "im-attr-media-100gbase-dwdm-1546-92"},
		227: {Name: "im-attr-media-100gbase-dwdm-1546-12"},
		228: {Name: "im-attr-media-100gbase-dwdm-1545-32"},
		229: {Name: "im-attr-media-100gbase-dwdm-1544-53"},
		230: {Name: "im-attr-media-100gbase-dwdm-1543-73"},
		231: {Name: "im-attr-media-100gbase-dwdm-1542-94"},
		232: {Name: "im-attr-media-100gbase-dwdm-1542-14"},
		233: {Name: "im-attr-media-100gbase-dwdm-1541-35"},
		234: {Name: "im-attr-media-100gbase-dwdm-1540-56"},
		235: {Name: "im-attr-media-100gbase-dwdm-1539-77"},
		236: {Name: "im-attr-media-100gbase-dwdm-1538-98"},
		237: {Name: "im-attr-media-100gbase-dwdm-1538-19"},
		238: {Name: "im-attr-media-100gbase-dwdm-1537-40"},
		239: {Name: "im-attr-media-100gbase-dwdm-1536-61"},
		240: {Name: "im-attr-media-100gbase-dwdm-1535-82"},
		241: {Name: "im-attr-media-100gbase-dwdm-1535-04"},
		242: {Name: "im-attr-media-100gbase-dwdm-1534-25"},
		243: {Name: "im-attr-media-100gbase-dwdm-1533-47"},
		244: {Name: "im-attr-media-100gbase-dwdm-1532-68"},
		245: {Name: "im-attr-media-100gbase-dwdm-1531-90"},
		246: {Name: "im-attr-media-100gbase-dwdm-1531-12"},
		247: {Name: "im-attr-media-100gbase-dwdm-1530-33"},
		248: {Name: "im-attr-media-100gbase-dwdm-tunable"},
		249: {Name: "im-attr-media-40gbase-kr4"},
		250: {Name: "im-attr-media-40gbase-cr4"},
		251: {Name: "im-attr-media-40gbase-sr4"},
		252: {Name: "im-attr-media-40gbase-fr"},
		253: {Name: "im-attr-media-100gbase-cr10"},
		254: {Name: "im-attr-media-100gbase-sr10"},
		255: {Name: "im-attr-media-40gbase-csr4"},
		256: {Name: "im-attr-media-10gbase-cwdm"},
		257: {Name: "im-attr-media-10gbase-cwdm-tunable"},
		258: {Name: "im-attr-media-10gbase-cwdm-1470"},
		259: {Name: "im-attr-media-10gbase-cwdm-1490"},
		260: {Name: "im-attr-media-10gbase-cwdm-1510"},
		261: {Name: "im-attr-media-10gbase-cwdm-1530"},
		262: {Name: "im-attr-media-10gbase-cwdm-1550"},
		263: {Name: "im-attr-media-10gbase-cwdm-1570"},
		264: {Name: "im-attr-media-10gbase-cwdm-1590"},
		265: {Name: "im-attr-media-10gbase-cwdm-1610"},
		266: {Name: "im-attr-media-40gbase-cwdm"},
		267: {Name: "im-attr-media-40gbase-cwdm-tunable"},
		268: {Name: "im-attr-media-40gbase-cwdm-1470"},
		269: {Name: "im-attr-media-40gbase-cwdm-1490"},
		270: {Name: "im-attr-media-40gbase-cwdm-1510"},
		271: {Name: "im-attr-media-40gbase-cwdm-1530"},
		272: {Name: "im-attr-media-40gbase-cwdm-1550"},
		273: {Name: "im-attr-media-40gbase-cwdm-1570"},
		274: {Name: "im-attr-media-40gbase-cwdm-1590"},
		275: {Name: "im-attr-media-40gbase-cwdm-1610"},
		276: {Name: "im-attr-media-100gbase-cwdm"},
		277: {Name: "im-attr-media-100gbase-cwdm-tunable"},
		278: {Name: "im-attr-media-100gbase-cwdm-1470"},
		279: {Name: "im-attr-media-100gbase-cwdm-1490"},
		280: {Name: "im-attr-media-100gbase-cwdm-1510"},
		281: {Name: "im-attr-media-100gbase-cwdm-1530"},
		282: {Name: "im-attr-media-100gbase-cwdm-1550"},
		283: {Name: "im-attr-media-100gbase-cwdm-1570"},
		284: {Name: "im-attr-media-100gbase-cwdm-1590"},
		285: {Name: "im-attr-media-100gbase-cwdm-1610"},
		286: {Name: "im-attr-media-40gbase-elpb"},
		287: {Name: "im-attr-media-100gbase-elpb"},
		288: {Name: "im-attr-media-100gbase-lr10"},
		289: {Name: "im-attr-media-40gbase"},
		290: {Name: "im-attr-media-100gbase-kp4"},
		291: {Name: "im-attr-media-100gbase-kr4"},
		292: {Name: "im-attr-media-10gbase-lrm"},
		293: {Name: "im-attr-media-10gbase-cx4"},
		294: {Name: "im-attr-media-10gbase"},
		295: {Name: "im-attr-media-10gbase-kx4"},
		296: {Name: "im-attr-media-10gbase-kr"},
		297: {Name: "im-attr-media-10gbase-pr"},
		298: {Name: "im-attr-media-100base-lx"},
		299: {Name: "im-attr-media-100base-zx"},
		300: {Name: "im-attr-media-1000base-bx-d"},
		301: {Name: "im-attr-media-1000base-bx-u"},
		302: {Name: "im-attr-media-1000base-bx20-d"},
		303: {Name: "im-attr-media-1000base-bx20-u"},
		304: {Name: "im-attr-media-1000base-bx40-d"},
		305: {Name: "im-attr-media-1000base-bx40-da"},
		306: {Name: "im-attr-media-1000base-bx40-u"},
		307: {Name: "im-attr-media-1000base-bx80-d"},
		308: {Name: "im-attr-media-1000base-bx80-u"},
		309: {Name: "im-attr-media-1000base-bx120-d"},
		310: {Name: "im-attr-media-1000base-bx120-u"},
		311: {Name: "im-attr-media-10gbase-bx-d"},
		312: {Name: "im-attr-media-10gbase-bx-u"},
		313: {Name: "im-attr-media-10gbase-bx10-d"},
		314: {Name: "im-attr-media-10gbase-bx10-u"},
		315: {Name: "im-attr-media-10gbase-bx20-d"},
		316: {Name: "im-attr-media-10gbase-bx20-u"},
		317: {Name: "im-attr-media-10gbase-bx40-d"},
		318: {Name: "im-attr-media-10gbase-bx40-u"},
		319: {Name: "im-attr-media-10gbase-bx80-d"},
		320: {Name: "im-attr-media-10gbase-bx80-u"},
		321: {Name: "im-attr-media-10gbase-bx120-d"},
		322: {Name: "im-attr-media-10gbase-bx120-u"},
		323: {Name: "im-attr-media-1000base-dr-lx"},
		324: {Name: "im-attr-media-100gbase-er4l"},
		325: {Name: "im-attr-media-100gbase-sr4"},
		326: {Name: "im-attr-media-40gbase-sr-bd"},
		327: {Name: "im-attr-media-25gbase-cr"},
		328: {Name: "im-attr-media-25gbase-cr-s"},
		329: {Name: "im-attr-media-25gbase-kr"},
		330: {Name: "im-attr-media-25gbase-kr-s"},
		331: {Name: "im-attr-media-25gbase-r"},
		332: {Name: "im-attr-media-25gbase-sr"},
		333: {Name: "im-attr-media-25gbase-csr"},
		334: {Name: "im-attr-media-25gbase-dwdm"},
		335: {Name: "im-attr-media-25gbase-dwdm-tunable"},
		336: {Name: "im-attr-media-25gbase-cwdm"},
		337: {Name: "im-attr-media-25gbase-cwdm-tunable"},
		338: {Name: "im-attr-media-100gbase-psm4"},
		339: {Name: "im-attr-media-100gbase-er10"},
		340: {Name: "im-attr-media-100gbase-er10l"},
		341: {Name: "im-attr-media-100gbase-acc"},
		342: {Name: "im-attr-media-100gbase-aoc"},
		343: {Name: "im-attr-media-100gbase-cwdm4"},
		344: {Name: "im-attr-media-40gbase-psm4"},
		345: {Name: "im-attr-media-100gbase-cr4"},
		346: {Name: "im-attr-media-100gbase-act-loop"},
		347: {Name: "im-attr-media-100gbase-pas-loop"},
		348: {Name: "im-attr-media-50gbase-cr2"},
		349: {Name: "im-attr-media-50gbase-sr2"},
		350: {Name: "im-attr-media-50gbase-psm2"},
		351: {Name: "im-attr-media-200gbase-cr4"},
		352: {Name: "im-attr-media-400gbase-fr4"},
		353: {Name: "im-attr-media-400gbase-dr4"},
		354: {Name: "im-attr-media-10gbase-cr"},
		355: {Name: "im-attr-media-10gbase-aoc"},
		356: {Name: "im-attr-media-40gbase-aoc"},
		357: {Name: "im-attr-media-40gbase-acu"},
		358: {Name: "im-attr-media-100gbase-acu"},
		359: {Name: "im-attr-media-10gbase-cu1m"},
		360: {Name: "im-attr-media-10gbase-cu3m"},
		361: {Name: "im-attr-media-10gbase-cu5m"},
		362: {Name: "im-attr-media-10gbase-acu7m"},
		363: {Name: "im-attr-media-10gbase-acu10m"},
		364: {Name: "im-attr-media-4x10g-base-lr"},
		365: {Name: "im-attr-media-10gbase-cu1-5m"},
		366: {Name: "im-attr-media-10gbase-cu2m"},
		367: {Name: "im-attr-media-10gbase-cu2-5m"},
		368: {Name: "im-attr-media-10gbase-aoc1m"},
		369: {Name: "im-attr-media-10gbase-aoc2m"},
		370: {Name: "im-attr-media-10gbase-aoc3m"},
		371: {Name: "im-attr-media-10gbase-aoc5m"},
		372: {Name: "im-attr-media-10gbase-aoc7m"},
		373: {Name: "im-attr-media-10gbase-aoc10m"},
		374: {Name: "im-attr-media-40gbase-acu1m"},
		375: {Name: "im-attr-media-40gbase-acu3m"},
		376: {Name: "im-attr-media-40gbase-acu5m"},
		377: {Name: "im-attr-media-40gbase-acu7m"},
		378: {Name: "im-attr-media-40gbase-acu10m"},
		379: {Name: "im-attr-media-25gbase-cu1m"},
		380: {Name: "im-attr-media-25gbase-cu2m"},
		381: {Name: "im-attr-media-25gbase-cu3m"},
		382: {Name: "im-attr-media-25gbase-cu5m"},
		383: {Name: "im-attr-media-100gbase-sm-sr"},
		384: {Name: "im-attr-media-1000base-2bx-d"},
		385: {Name: "im-attr-media-1000base-2bx-d-i"},
		386: {Name: "im-attr-media-1000base-2bx-u"},
		387: {Name: "im-attr-media-1000base-2bx-u-i"},
		388: {Name: "im-attr-media-400gbase-cr8"},
		389: {Name: "im-attr-media-100gbase-sr-bd"},
		390: {Name: "im-attr-media-400gbase-lr8"},
		391: {Name: "im-attr-media-400gbase-aoc"},
		392: {Name: "im-attr-media-400gbase-acc"},
		393: {Name: "im-attr-media-400gbase-act-loop"},
		394: {Name: "im-attr-media-400gbase-pas-loop"},
		395: {Name: "im-attr-media-8x-sfp50gbase-cu"},
		396: {Name: "im-attr-media-2x100gbase-lr8-s"},
		397: {Name: "im-attr-media-2x100gbase-sr4"},
		398: {Name: "im-attr-media-2x100gbase-psm4"},
		399: {Name: "im-attr-media-2x100gbase-cwdm4"},
		400: {Name: "im-attr-media-2x100gbase-lr4"},
		401: {Name: "im-attr-media-100gbase-fr"},
		402: {Name: "im-attr-media-100gbase-lr"},
		403: {Name: "im-attr-media-100gbase-er4f"},
		404: {Name: "im-attr-media-100gbase-dwdm2"},
		405: {Name: "im-attr-media-25gbase-aoc1m"},
		406: {Name: "im-attr-media-25gbase-aoc2m"},
		407: {Name: "im-attr-media-25gbase-aoc3m"},
		408: {Name: "im-attr-media-25gbase-aoc5m"},
		409: {Name: "im-attr-media-25gbase-aoc7m"},
		410: {Name: "im-attr-media-25gbase-aoc10m"},
		411: {Name: "im-attr-media-400gbase-aec"},
		412: {Name: "im-attr-media-4x100gbase-fr"},
		413: {Name: "im-attr-media-400gbase-zr-s"},
		414: {Name: "im-attr-media-400gbase-zr-plus-s"},
		415: {Name: "im-attr-media-100gbase-dr-s"},
		416: {Name: "im-attr-media-400gbase-lr4"},
		417: {Name: "im-attr-media-qsa"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode": {
		1: {Name: "im-attr-transport-mode-unknown"},
		2: {Name: "im-attr-transport-mode-lan"},
		3: {Name: "im-attr-transport-mode-wan"},
		4: {Name: "im-attr-transport-mode-otn-bt-opu1e"},
		5: {Name: "im-attr-transport-mode-otn-bt-opu2e"},
		6: {Name: "im-attr-transport-mode-otn-opu3"},
		7: {Name: "im-attr-transport-mode-otn-opu4"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum": {
		1: {Name: "frame-relay"},
		2: {Name: "vlan"},
		3: {Name: "ppp"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum": {
		1: {Name: "frame-relay-cisco"},
		2: {Name: "frame-relay-ietf"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum": {
		1: {Name: "srp"},
		2: {Name: "tunnel"},
		3: {Name: "bundle"},
		4: {Name: "serial"},
		5: {Name: "sonet-pos"},
		6: {Name: "tunnel-gre"},
		7: {Name: "pseudowire-head-end"},
		8: {Name: "cem"},
		9: {Name: "gcc"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum": {
		1: {Name: "lmi-type-auto"},
		2: {Name: "lmi-type-ansi"},
		3: {Name: "lmi-type-ccitt"},
		4: {Name: "lmi-type-cisco"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum": {
		1: {Name: "no-loopback"},
		2: {Name: "internal-loopback"},
		3: {Name: "external-loopback"},
		4: {Name: "line-loopback"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum": {
		1: {Name: "full"},
		2: {Name: "basic"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum": {
		1:  {Name: "im-state-not-ready"},
		2:  {Name: "im-state-admin-down"},
		3:  {Name: "im-state-down"},
		4:  {Name: "im-state-up"},
		5:  {Name: "im-state-shutdown"},
		6:  {Name: "im-state-err-disable"},
		7:  {Name: "im-state-down-immediate"},
		8:  {Name: "im-state-down-immediate-admin"},
		9:  {Name: "im-state-down-graceful"},
		10: {Name: "im-state-begin-shutdown"},
		11: {Name: "im-state-end-shutdown"},
		12: {Name: "im-state-begin-error-disable"},
		13: {Name: "im-state-end-error-disable"},
		14: {Name: "im-state-begin-down-graceful"},
		15: {Name: "im-state-reset"},
		16: {Name: "im-state-operational"},
		17: {Name: "im-state-not-operational"},
		18: {Name: "im-state-unknown"},
		19: {Name: "im-state-last"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet": {
		1: {Name: "hardware-interfaces"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_NcpIdent": {
		1: {Name: "cdpcp"},
		2: {Name: "ipcp"},
		3: {Name: "ipcpiw"},
		4: {Name: "ipv6cp"},
		5: {Name: "mplscp"},
		6: {Name: "osicp"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_PppFsmState": {
		1:  {Name: "ppp-fsm-state-initial-0"},
		2:  {Name: "ppp-fsm-state-starting-1"},
		3:  {Name: "ppp-fsm-state-closed-2"},
		4:  {Name: "ppp-fsm-state-stopped-3"},
		5:  {Name: "ppp-fsm-state-closing-4"},
		6:  {Name: "ppp-fsm-state-stopping-5"},
		7:  {Name: "ppp-fsm-state-req-sent-6"},
		8:  {Name: "ppp-fsm-state-ack-rcvd-7"},
		9:  {Name: "ppp-fsm-state-ack-sent-8"},
		10: {Name: "ppp-fsm-state-opened-9"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt": {
		1: {Name: "not-configured"},
		2: {Name: "working-active"},
		3: {Name: "protect-active"},
		4: {Name: "working-inactive"},
		5: {Name: "protect-inactive"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt": {
		1: {Name: "hardware-missing-failure"},
		2: {Name: "layer1-admin-state-failure"},
		3: {Name: "layer1-error-failure"},
		4: {Name: "keepalive-missed-failure"},
		5: {Name: "link-quality-degraded-failure"},
		6: {Name: "mate-problem-failure"},
		7: {Name: "side-mismatch-failure"},
		8: {Name: "unknown-failure"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt": {
		1: {Name: "idle-failure-state"},
		2: {Name: "wait-to-restore-failure-state"},
		3: {Name: "manual-switch-failure-state"},
		4: {Name: "signal-degrade-failure-state"},
		5: {Name: "signal-fail-failure-state"},
		6: {Name: "forced-switch-failure-state"},
		7: {Name: "shutdown-failure-state"},
		8: {Name: "invalid-failure-state"},
		9: {Name: "unknown-failure-state"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd": {
		1: {Name: "short-path"},
		2: {Name: "long-path"},
		3: {Name: "unknown-path"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq": {
		1: {Name: "idle-ips-request"},
		2: {Name: "wait-to-restore-ips-request"},
		3: {Name: "manual-switch-ips-request"},
		4: {Name: "signal-degrade-ips-request"},
		5: {Name: "signal-fail-ips-request"},
		6: {Name: "forced-switch-ips-request"},
		7: {Name: "unknown-ips-request"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState": {
		1: {Name: "idle-wrap-state"},
		2: {Name: "wrapped-state"},
		3: {Name: "locked-out-wrap-state"},
		4: {Name: "unknown-wrap-state"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure": {
		1: {Name: "idle-srr-failure"},
		2: {Name: "wait-to-restore-srr-failure"},
		3: {Name: "signal-fail-srr-failure"},
		4: {Name: "forced-switch-srr-failure"},
		5: {Name: "unknown-srr-failure"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState": {
		1: {Name: "idle-srr-state"},
		2: {Name: "discovery-srr-state"},
		3: {Name: "unknown-srr-state"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_StatsCounter": {
		1:  {Name: "stats-counter-rate"},
		2:  {Name: "stats-counter-uint32"},
		3:  {Name: "stats-counter-uint64"},
		4:  {Name: "stats-counter-generic"},
		5:  {Name: "stats-counter-proto"},
		6:  {Name: "stats-counter-srp"},
		7:  {Name: "stats-counter-ipv4-prec"},
		8:  {Name: "stats-counter-ipv4-dscp"},
		9:  {Name: "stats-counter-mpls-exp"},
		10: {Name: "stats-counter-ipv4-bgp-pa"},
		11: {Name: "stats-counter-src-bgp-pa"},
		12: {Name: "stats-counter-basic"},
		13: {Name: "stats-counter-comp-generic"},
		14: {Name: "stats-counter-comp-proto"},
		15: {Name: "stats-counter-comp-basic"},
		16: {Name: "stats-counter-accounting"},
		17: {Name: "stats-counter-comp-accounting"},
		18: {Name: "stats-counter-flow"},
		19: {Name: "stats-counter-comp-flow"},
		20: {Name: "stats-counter-timestamp"},
		21: {Name: "stats-counter-qos"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_StatsId": {
		1: {Name: "stats-id-type-unknown"},
		2: {Name: "stats-id-type-min"},
		3: {Name: "stats-id-type-spare"},
		4: {Name: "stats-id-type-node"},
		5: {Name: "stats-id-type-other"},
		6: {Name: "stats-id-type-feature"},
		7: {Name: "stats-id-type-max"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents": {
		1: {Name: "stats-type-single"},
		2: {Name: "stats-type-variable"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir": {
		1: {Name: "tunl-ip-mode-dir-none"},
		2: {Name: "tunl-ip-mode-dir-decap"},
		3: {Name: "tunl-ip-mode-dir-encap"},
		4: {Name: "tunl-ip-mode-dir-max"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId": {
		1: {Name: "tunl-pfi-af-id-none"},
		2: {Name: "tunl-pfi-af-id-ipv4"},
		3: {Name: "tunl-pfi-af-id-ipv6"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode": {
		1: {Name: "unknown"},
		2: {Name: "gr-eo-ipv4"},
		3: {Name: "gr-eo-ipv6"},
		4: {Name: "mgr-eo-ipv4"},
		5: {Name: "mgr-eo-ipv6"},
		6: {Name: "ipv4"},
		7: {Name: "ipv6"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState": {
		1: {Name: "disable"},
		2: {Name: "enable"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState": {
		1: {Name: "absent"},
		2: {Name: "present"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps": {
		1:  {Name: "no-encapsulation"},
		2:  {Name: "dot1q"},
		3:  {Name: "qinq"},
		4:  {Name: "qin-any"},
		5:  {Name: "dot1q-native"},
		6:  {Name: "dot1ad"},
		7:  {Name: "dot1ad-native"},
		8:  {Name: "service-instance"},
		9:  {Name: "dot1ad-dot1q"},
		10: {Name: "dot1ad-any"},
	},
	"E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode": {
		1: {Name: "none"},
		2: {Name: "trunk-port"},
		3: {Name: "access-port"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xfd, 0x61, 0x6f, 0xdb, 0x48,
		0xd2, 0xef, 0x0d, 0xbf, 0xcf, 0xa7, 0x20, 0x04, 0x3c, 0x98, 0x5d, 0x5c, 0xe1, 0xd8, 0x92, 0x65,
		0xc9, 0x16, 0xb0, 0x78, 0x90, 0x99, 0x64, 0xcf, 0x31, 0xce, 0xcc, 0x24, 0x3b, 0x09, 0x16, 0x83,
		0x33, 0x97, 0x61, 0xb4, 0xc9, 0x96, 0xcd, 0x3b, 0x14, 0xc9, 0x69, 0x36, 0x63, 0xfb, 0xda, 0x3b,
		0xdf, 0xfd, 0x06, 0x29, 0x99, 0xa2, 0x24, 0x4a, 0x16, 0xc9, 0xaa, 0x26, 0x25, 0xff, 0xf3, 0x62,
		0xd7, 0xf1, 0x44, 0x5d, 0x14, 0xbb, 0xba, 0xea, 0x57, 0xd5, 0xd5, 0xd5, 0xff, 0x79, 0x63, 0x59,
		0x96, 0xd5, 0xfb, 0x4d, 0xcc, 0x64, 0x6f, 0x62, 0xf5, 0xbc, 0x40, 0x4b, 0x35, 0x15, 0x8e, 0x8c,
		0x7b, 0x6f, 0xe7, 0xff, 0xe5, 0xff, 0x78, 0x81, 0xdb, 0x9b, 0x58, 0xfd, 0xc5, 0x5f, 0x7f, 0x0e,
		0x83, 0xa9, 0x77, 0xd7, 0x9b, 0x58, 0xa7, 0x8b, 0x5f, 0xbc, 0xf7, 0x54, 0x6f, 0x62, 0xcd, 0x87,
		0xc9, 0x7e, 0x51, 0x18, 0xa2, 0xf8, 0xfb, 0xdd, 0x62, 0xf2, 0x7f, 0xb1, 0x2a, 0x2e, 0xff, 0x75,
		0x2e, 0x76, 0xb0, 0xf6, 0x1f, 0x3e, 0x29, 0x39, 0xf5, 0x1e, 0x37, 0x24, 0xad, 0x48, 0x8b, 0xa6,
		0x9e, 0xed, 0xcd, 0x6c, 0x67, 0xe6, 0xda, 0x61, 0x24, 0xd5, 0x9a, 0xc8, 0xec, 0x9f, 0x7e, 0x0e,
		0x13, 0xe5, 0xc8, 0xd2, 0x61, 0xe6, 0x8f, 0x25, 0x9f, 0x1e, 0x42, 0xe5, 0x66, 0xa3, 0xcd, 0x25,
		0xbe, 0x2d, 0xff, 0x87, 0xff, 0x5b, 0xc4, 0xef, 0xd4, 0x5d, 0x32, 0x93, 0x81, 0xee, 0x4d, 0x2c,
		0xad, 0x12, 0xb9, 0xe5, 0x1f, 0x16, 0xfe, 0xd5, 0xc6, 0x03, 0x6e, 0x7c, 0xe2, 0xfb, 0xca, 0x6f,
		0xbe, 0xaf, 0xbd, 0x83, 0xf5, 0x29, 0xd8, 0x9c, 0x0a, 0xfb, 0x56, 0x79, 0x72, 0x1a, 0x6f, 0xff,
		0x7e, 0x1b, 0x13, 0xf3, 0xfc, 0x89, 0x2d, 0x4f, 0x5f, 0x3e, 0x4d, 0x9b, 0xd3, 0x75, 0xba, 0xe5,
		0x1f, 0xec, 0x98, 0xb6, 0x1a, 0xd3, 0xb7, 0xef, 0x34, 0x56, 0x9e, 0xce, 0xca, 0xd3, 0x5a, 0x6f,
		0x7a, 0xcb, 0xa7, 0x79, 0xcb, 0x74, 0xbf, 0x38, 0xed, 0xdb, 0xa6, 0xff, 0xe5, 0xd7, 0xb2, 0x45,
		0x0b, 0x5e, 0x7a, 0x39, 0xbb, 0x95, 0x61, 0x6f, 0xa5, 0xa8, 0xa2, 0x1c, 0x0d, 0x94, 0xa4, 0xaa,
		0xb2, 0xd4, 0x56, 0x9a, 0xda, 0xca, 0xd3, 0x4c, 0x89, 0x76, 0x2b, 0xd3, 0x0b, 0x4a, 0xb5, 0xb7,
		0x72, 0xe5, 0xff, 0x50, 0x38, 0x3a, 0x11, 0xbe, 0xed, 0x7b, 0x81, 0xb4, 0x63, 0x2d, 0x74, 0x85,
		0x17, 0xfa, 0x3c, 0x77, 0x9b, 0x43, 0xec, 0xf9, 0x7e, 0x16, 0x8a, 0x77, 0xba, 0xe7, 0x3f, 0xdf,
		0x57, 0x01, 0xeb, 0x28, 0xe2, 0xc6, 0x97, 0xfa, 0xd9, 0x8b, 0x9d, 0xd0, 0xbe, 0xfa, 0xf8, 0xd9,
		0xfe, 0xe3, 0x77, 0xbb, 0xba, 0x76, 0xd6, 0xd5, 0xd2, 0xc6, 0xda, 0xda, 0x58, 0x6b, 0x4b, 0xb5,
		0x77, 0xe7, 0xdb, 0xd8, 0x7b, 0xd8, 0xef, 0x7b, 0xfd, 0xcb, 0xef, 0x7b, 0xce, 0xee, 0x97, 0xa7,
		0x48, 0xd6, 0x9b, 0xdb, 0xab, 0xd9, 0x5c, 0x4f, 0x6d, 0x19, 0x24, 0xb3, 0x2a, 0x93, 0xf9, 0x6c,
		0x29, 0x87, 0x15, 0x3e, 0xf3, 0x21, 0x95, 0x51, 0x79, 0xfa, 0xbf, 0x84, 0x9f, 0xb5, 0xf2, 0x82,
		0xbb, 0xca, 0x9f, 0xcc, 0x3e, 0x7d, 0x9a, 0x79, 0x81, 0xe7, 0x6f, 0x19, 0x84, 0xda, 0x56, 0x52,
		0xb8, 0x4f, 0x15, 0x55, 0x28, 0x1b, 0xaa, 0xbf, 0x32, 0x94, 0x70, 0x67, 0x5e, 0x60, 0xbb, 0xe1,
		0x43, 0x50, 0x6b, 0xac, 0xd5, 0xe7, 0x92, 0x81, 0x6b, 0xc7, 0xf7, 0x89, 0xae, 0x3d, 0xdc, 0xea,
		0xb3, 0xdd, 0xca, 0x3b, 0x2f, 0xb0, 0xa5, 0x52, 0xa1, 0xb2, 0x5d, 0x2f, 0x16, 0xb7, 0xbe, 0xac,
		0x35, 0xea, 0x60, 0xe3, 0x21, 0x9b, 0x8f, 0x79, 0x56, 0xf2, 0xa4, 0xe9, 0xd7, 0xb6, 0xef, 0x94,
		0x70, 0xe4, 0x34, 0xf1, 0x6b, 0x8d, 0x3a, 0x5c, 0x19, 0x55, 0xc9, 0x58, 0xea, 0x5a, 0xe3, 0x9c,
		0xaf, 0x8c, 0x93, 0xae, 0x69, 0xa1, 0xbd, 0x30, 0x10, 0xf5, 0x9e, 0x6a, 0xb4, 0xa1, 0x7c, 0x4d,
		0x47, 0x1c, 0xaf, 0x8c, 0x98, 0x04, 0x5f, 0x83, 0xba, 0x1a, 0x73, 0xb1, 0x32, 0x92, 0x2f, 0xe2,
		0x5a, 0x2f, 0x6c, 0x55, 0x43, 0xea, 0xaa, 0xef, 0xaa, 0x4e, 0x24, 0x51, 0x9d, 0x31, 0x56, 0x35,
		0xa0, 0xc9, 0x62, 0x5a, 0xd5, 0x01, 0xa9, 0x1a, 0xe9, 0xfb, 0x68, 0xe3, 0x05, 0xd9, 0xde, 0x6c,
		0x26, 0x5d, 0x6f, 0x7f, 0x38, 0x58, 0x19, 0x6f, 0xbc, 0x63, 0xbc, 0xb9, 0x4d, 0xaa, 0x33, 0xea,
		0xc5, 0xe6, 0xa8, 0x4d, 0x96, 0xe3, 0x65, 0xc9, 0x1a, 0xcf, 0x67, 0xa4, 0xd2, 0x70, 0xdf, 0xdf,
		0x56, 0x75, 0x16, 0x57, 0x99, 0x9b, 0xae, 0xe1, 0x29, 0xca, 0x2c, 0xfb, 0x8b, 0xa1, 0xc0, 0xee,
		0x91, 0xca, 0xac, 0xdb, 0xc4, 0xea, 0x9f, 0x35, 0x1f, 0x73, 0xd5, 0x0e, 0x4f, 0xac, 0x3e, 0xc1,
		0x73, 0xe6, 0x33, 0x34, 0xb1, 0x2e, 0x9b, 0x8c, 0xb6, 0x18, 0x63, 0xd0, 0x74, 0x8c, 0xe2, 0x3b,
		0xbb, 0x68, 0x3c, 0xd8, 0x72, 0xd5, 0x4d, 0xac, 0x11, 0xdd, 0x68, 0x8b, 0x35, 0x37, 0xb1, 0xc6,
		0x4d, 0xc6, 0xdc, 0x74, 0xad, 0x13, 0xab, 0x3f, 0x68, 0x3a, 0x62, 0x61, 0x42, 0xfb, 0xa7, 0x8d,
		0x06, 0x53, 0xc5, 0x07, 0x3b, 0x6f, 0x32, 0x54, 0xe6, 0x68, 0x26, 0x56, 0xbf, 0xd1, 0x84, 0xae,
		0x7b, 0xd2, 0x89, 0xd5, 0x1f, 0x35, 0x1d, 0x6f, 0x8e, 0x85, 0x7b, 0x47, 0x54, 0xe5, 0x03, 0xad,
		0x3d, 0x54, 0xa3, 0x37, 0x35, 0x87, 0x98, 0x6a, 0x88, 0xbd, 0x39, 0x4a, 0x41, 0x07, 0x1a, 0x8d,
		0xf3, 0x8c, 0x1a, 0x13, 0xab, 0xdf, 0x48, 0xd3, 0x93, 0xa8, 0x37, 0xb1, 0xce, 0xaa, 0xf9, 0x00,
		0xea, 0xa8, 0xea, 0x0d, 0x81, 0xd7, 0x79, 0x0e, 0xf5, 0x9b, 0x25, 0x0a, 0x90, 0x23, 0x40, 0x8e,
		0x00, 0x39, 0x02, 0xe4, 0x08, 0x90, 0x23, 0x40, 0x8e, 0x00, 0x39, 0x02, 0xe4, 0x08, 0x90, 0x23,
		0x40, 0x8e, 0x00, 0x39, 0x02, 0xe4, 0x08, 0x90, 0x23, 0x40, 0x8e, 0x00, 0x39, 0x82, 0x83, 0xcf,
		0x11, 0xdc, 0x8a, 0xc0, 0x7d, 0xf0, 0x5c, 0x7d, 0x5f, 0x3d, 0x41, 0xb0, 0xfc, 0x28, 0xb2, 0x03,
		0xc8, 0x0e, 0x74, 0x38, 0x3b, 0x90, 0x78, 0x81, 0x3e, 0x1b, 0xd4, 0x48, 0x0b, 0x54, 0x30, 0x11,
		0xbd, 0xdf, 0x45, 0x70, 0x97, 0x4a, 0xfb, 0xb3, 0xd2, 0x5b, 0xaf, 0x01, 0x78, 0xbf, 0x66, 0x7e,
		0xba, 0xfa, 0x07, 0xb3, 0x0f, 0xff, 0x5b, 0xf8, 0x89, 0xac, 0xe7, 0x1e, 0xb2, 0xcf, 0xff, 0x53,
		0x09, 0x27, 0x75, 0x0c, 0xef, 0xbd, 0x3b, 0x4f, 0xc7, 0x0d, 0x06, 0xfa, 0x4d, 0xde, 0x09, 0xed,
		0x7d, 0x4b, 0x9f, 0x65, 0x2a, 0xfc, 0x58, 0x56, 0x1e, 0xe5, 0x7b, 0x0d, 0xf3, 0xfd, 0xab, 0x78,
		0x6c, 0xfe, 0xea, 0x86, 0x83, 0xcb, 0xe1, 0xe5, 0x68, 0x3c, 0xb8, 0x3c, 0x3f, 0xfc, 0x77, 0xc8,
		0xe4, 0xc0, 0xae, 0xdb, 0x70, 0x60, 0xa3, 0xa1, 0x7d, 0xeb, 0xe9, 0x06, 0x6e, 0x6c, 0x31, 0x00,
		0x9c, 0x19, 0x9c, 0x59, 0xc7, 0x9d, 0xd9, 0x68, 0x58, 0xc3, 0x99, 0x5d, 0xc0, 0x99, 0xc1, 0x99,
		0xad, 0xbf, 0xba, 0xfe, 0xc5, 0x70, 0x38, 0x1a, 0x0f, 0x87, 0xa7, 0xe3, 0xb3, 0xf1, 0xe9, 0xe5,
		0xf9, 0x79, 0x7f, 0xd4, 0x87, 0x5b, 0xeb, 0x82, 0x5b, 0x93, 0x81, 0x23, 0xa2, 0x38, 0xf1, 0xb3,
		0x30, 0xbc, 0xba, 0x53, 0x5b, 0xfd, 0x38, 0x5c, 0x1a, 0x5c, 0x5a, 0x87, 0x5d, 0x5a, 0x3c, 0xdf,
		0x18, 0xad, 0xb1, 0x6d, 0x7b, 0xd1, 0xd6, 0x8a, 0xb4, 0xf5, 0x53, 0x24, 0xed, 0xb8, 0xda, 0x8e,
		0x6e, 0xf9, 0xea, 0x5c, 0x19, 0x0a, 0x2b, 0x15, 0x2b, 0xf5, 0x38, 0x57, 0x6a, 0x85, 0xcf, 0xfc,
		0x22, 0x83, 0xbb, 0x2c, 0x21, 0x09, 0xfc, 0x3c, 0x72, 0xfc, 0x3c, 0x1b, 0x00, 0x36, 0x3b, 0x00,
		0x9b, 0xf9, 0x11, 0xd4, 0xea, 0xae, 0x6c, 0xf9, 0x51, 0xb8, 0x2e, 0xb8, 0xae, 0x0e, 0xbb, 0xae,
		0xab, 0xfc, 0x98, 0x75, 0x90, 0xfe, 0x86, 0xd9, 0x85, 0x7d, 0x12, 0x5a, 0x4b, 0x15, 0x54, 0xf6,
		0x61, 0xbd, 0x3f, 0x85, 0xfd, 0x3f, 0xef, 0xec, 0xff, 0x7b, 0x6a, 0x5f, 0xfe, 0x38, 0xb9, 0x39,
		0xb1, 0xaf, 0xff, 0xab, 0xd7, 0x6d, 0x8b, 0x31, 0x7f, 0x9b, 0xf5, 0xcd, 0x46, 0x95, 0xd9, 0xe8,
		0xb4, 0xed, 0x78, 0xf5, 0xe6, 0x02, 0x16, 0x02, 0x16, 0xa2, 0xf0, 0x98, 0xfe, 0xc0, 0xd6, 0x4a,
		0x04, 0x71, 0x14, 0xaa, 0x1a, 0x9b, 0x32, 0x2b, 0x9f, 0x06, 0x59, 0x80, 0x2c, 0x3a, 0x6c, 0x37,
		0x6e, 0xc3, 0xd0, 0x97, 0x22, 0xa8, 0x63, 0x30, 0xfa, 0x26, 0x17, 0x64, 0x83, 0xa6, 0x21, 0xe8,
		0x16, 0x82, 0xc5, 0x78, 0x20, 0x4e, 0x1c, 0x27, 0x81, 0xf6, 0x1e, 0x0a, 0x27, 0x81, 0x70, 0x12,
		0xa8, 0xda, 0x68, 0x38, 0x09, 0xb4, 0xdf, 0x28, 0x38, 0x09, 0xb4, 0xf7, 0x78, 0x38, 0x09, 0xf4,
		0x82, 0xb3, 0xc0, 0x49, 0xa0, 0xba, 0x63, 0xe2, 0x24, 0x50, 0x8d, 0xd1, 0x70, 0x12, 0xa8, 0xda,
		0x50, 0x38, 0x09, 0xb4, 0xef, 0x58, 0x38, 0x09, 0x54, 0x29, 0x56, 0xb2, 0x0c, 0x9f, 0x04, 0x9a,
		0xe9, 0xa4, 0x7a, 0x62, 0x20, 0xfd, 0x10, 0x32, 0x02, 0xc8, 0x08, 0x74, 0x38, 0x23, 0x80, 0xd3,
		0x3f, 0xf9, 0x87, 0x51, 0xb1, 0x82, 0xd3, 0x3f, 0x75, 0xdc, 0x90, 0xd5, 0xd9, 0xca, 0x95, 0x48,
		0x28, 0x19, 0x68, 0xbb, 0x41, 0x01, 0xcb, 0xc6, 0x08, 0x70, 0x67, 0x70, 0x67, 0x5d, 0x4e, 0x70,
		0x63, 0x97, 0x9a, 0xd0, 0x7e, 0xd4, 0xdc, 0x0f, 0xc3, 0x56, 0x18, 0x2c, 0x45, 0xf7, 0x2d, 0x05,
		0xb6, 0xc2, 0xf6, 0xdf, 0x3d, 0xc0, 0x56, 0x18, 0xb6, 0xc2, 0x2a, 0x8d, 0x86, 0xad, 0xb0, 0xfd,
		0x46, 0xc1, 0x56, 0xd8, 0xde, 0xe3, 0x61, 0x2b, 0xec, 0x05, 0x67, 0x81, 0xad, 0xb0, 0xba, 0x63,
		0x62, 0x2b, 0xac, 0xc6, 0x68, 0xd8, 0x0a, 0xab, 0x36, 0x14, 0xb6, 0xc2, 0xf6, 0x1d, 0x0b, 0x5b,
		0x61, 0x95, 0xb3, 0x8a, 0x26, 0xb7, 0xc2, 0xe2, 0xe4, 0x76, 0x99, 0x10, 0xb4, 0x67, 0x3a, 0xb1,
		0xc3, 0x6f, 0x52, 0xdd, 0x4b, 0xe1, 0xd6, 0x48, 0x15, 0x6c, 0x1f, 0x0b, 0xf9, 0x03, 0xe4, 0x0f,
		0x3a, 0x9c, 0x3f, 0xc0, 0xc6, 0x59, 0xfe, 0x61, 0x6c, 0x9c, 0x61, 0xe3, 0xac, 0x8e, 0xd3, 0xb2,
		0x3a, 0xbb, 0x71, 0xa6, 0xab, 0x98, 0x85, 0xdc, 0x24, 0x64, 0x9f, 0x82, 0xdb, 0x82, 0xdb, 0xea,
		0xb0, 0xdb, 0xea, 0x40, 0x37, 0xa1, 0x46, 0x97, 0x41, 0xff, 0x1f, 0xf9, 0x54, 0xf9, 0x84, 0x74,
		0xef, 0x17, 0x2f, 0xd6, 0xef, 0xb4, 0xde, 0xf3, 0x1a, 0xe9, 0x5f, 0xbd, 0xe0, 0x83, 0x2f, 0xd3,
		0xe9, 0xdf, 0xd3, 0x8e, 0xa6, 0x2e, 0xa0, 0xf0, 0x89, 0x7a, 0x5d, 0xe3, 0x7a, 0x1f, 0x95, 0x2b,
		0x95, 0x74, 0x7f, 0x4a, 0xbf, 0x5f, 0x90, 0xf8, 0x7e, 0xa3, 0xd7, 0xf4, 0x2e, 0x08, 0x42, 0xbd,
		0x7f, 0x77, 0xb4, 0x5e, 0xec, 0xdc, 0xcb, 0x99, 0x88, 0x44, 0xd6, 0x58, 0xa6, 0x77, 0xb2, 0x4b,
		0xe7, 0x4f, 0xf2, 0x77, 0x1f, 0x9f, 0xac, 0xdf, 0xd1, 0x7f, 0x52, 0xed, 0xba, 0xf6, 0xb9, 0x68,
		0xad, 0x12, 0x47, 0x07, 0x45, 0xdb, 0x73, 0x73, 0xf5, 0xf1, 0xf3, 0xcd, 0x1f, 0xbf, 0x7f, 0x9a,
		0x7a, 0x57, 0xb3, 0x9f, 0x67, 0xee, 0xc7, 0x48, 0xaa, 0x9b, 0x7c, 0x67, 0x37, 0x5e, 0xfe, 0xf8,
		0x53, 0x26, 0x74, 0xed, 0xef, 0xbb, 0xd7, 0xe4, 0x77, 0xa2, 0x1b, 0xef, 0xf7, 0x7c, 0xc1, 0x54,
		0x2f, 0x76, 0xc7, 0x8b, 0x6c, 0xfe, 0x02, 0xcb, 0xdf, 0xd8, 0xe6, 0xfb, 0x28, 0x79, 0x17, 0xc5,
		0x85, 0x18, 0x06, 0xb6, 0xfb, 0x14, 0x88, 0x99, 0xe7, 0xc4, 0x5b, 0xdf, 0x49, 0x59, 0x8b, 0x83,
		0xe2, 0xe7, 0xb6, 0xbc, 0xed, 0xdd, 0xd7, 0xfa, 0xbf, 0xe8, 0x1d, 0xf7, 0xf1, 0x86, 0x35, 0x5a,
		0x15, 0xec, 0xeb, 0xe0, 0x2a, 0x3b, 0xb4, 0xca, 0x0e, 0xac, 0x5e, 0xab, 0x81, 0x6a, 0x1a, 0xff,
		0xd2, 0x35, 0xfc, 0xe5, 0x53, 0xfa, 0xf2, 0xcb, 0xd9, 0xa9, 0x11, 0x2f, 0xbd, 0xa8, 0xdd, 0x8a,
		0x51, 0x19, 0x9f, 0xaa, 0x60, 0x53, 0x83, 0xde, 0x16, 0x55, 0xc9, 0xa8, 0x36, 0x11, 0xd5, 0x26,
		0xa1, 0x66, 0xbd, 0x2b, 0x9a, 0xb9, 0xf8, 0x97, 0x14, 0x2d, 0xff, 0x87, 0xf3, 0xed, 0x8a, 0xba,
		0x17, 0x38, 0x16, 0x3e, 0x0c, 0x66, 0x07, 0xb3, 0x77, 0x98, 0xd9, 0x51, 0xaa, 0xb2, 0xff, 0x50,
		0x28, 0x55, 0x41, 0xa9, 0x4a, 0xb5, 0xd1, 0x50, 0xaa, 0xb2, 0xdf, 0x28, 0x28, 0x55, 0xd9, 0x7b,
		0x3c, 0x94, 0xaa, 0xbc, 0xe0, 0x2c, 0x50, 0xaa, 0x52, 0x77, 0x4c, 0x94, 0xaa, 0xd4, 0x18, 0x0d,
		0xa5, 0x2a, 0xd5, 0x86, 0x42, 0xa9, 0xca, 0xbe, 0x63, 0xa1, 0x54, 0xa5, 0x52, 0xac, 0x64, 0xe1,
		0xfe, 0x46, 0x64, 0x07, 0x90, 0x1d, 0x20, 0xcd, 0x0e, 0xa0, 0x10, 0x25, 0xff, 0x30, 0x0a, 0x51,
		0x50, 0x88, 0x52, 0xc7, 0x25, 0x59, 0x1c, 0x85, 0x28, 0x7b, 0x2e, 0xfc, 0x0f, 0x8f, 0xd9, 0x5b,
		0xda, 0x7f, 0x61, 0xd5, 0x37, 0xbd, 0x8f, 0x6a, 0x22, 0xbf, 0xc9, 0x40, 0xdb, 0x5a, 0xfa, 0x72,
		0x26, 0xb5, 0x7a, 0x6a, 0xd5, 0x0c, 0x7f, 0x4e, 0x6e, 0x63, 0x47, 0x79, 0xb7, 0xd2, 0xfa, 0xf2,
		0xfc, 0x3c, 0xd6, 0x87, 0xf4, 0xf9, 0xa8, 0x6d, 0xf0, 0x35, 0x0d, 0x4b, 0x24, 0x2a, 0x90, 0xae,
		0xed, 0x05, 0xb6, 0x70, 0x5d, 0x25, 0xe3, 0xb8, 0x06, 0x53, 0x6c, 0x0c, 0x01, 0xb6, 0x00, 0x5b,
		0x74, 0x98, 0x2d, 0x0e, 0xe3, 0xee, 0x31, 0x57, 0xa6, 0x76, 0x24, 0xaa, 0x77, 0x17, 0x60, 0xf1,
		0xc3, 0x58, 0x8d, 0x58, 0x8d, 0x58, 0x8d, 0x4d, 0x57, 0x63, 0x12, 0xf9, 0xf2, 0xd1, 0xd3, 0x4f,
		0x35, 0xd6, 0x62, 0xfe, 0x51, 0xac, 0x44, 0xac, 0xc4, 0x0e, 0xaf, 0xc4, 0xab, 0x99, 0x2d, 0xb4,
		0x56, 0xf6, 0x5c, 0x61, 0x8f, 0x79, 0x4b, 0xbe, 0xf0, 0x35, 0x1b, 0xed, 0x64, 0x96, 0x0c, 0x77,
		0x2f, 0xfc, 0x69, 0x93, 0xed, 0xcc, 0xe2, 0x58, 0xd3, 0xc4, 0xf7, 0xbb, 0xbc, 0x69, 0xb5, 0xf1,
		0xac, 0xb5, 0xb7, 0x5e, 0x36, 0xde, 0x60, 0xed, 0xed, 0xaf, 0xb2, 0xa9, 0x9d, 0x58, 0xa7, 0xed,
		0xa6, 0x7d, 0x11, 0x35, 0x1f, 0x57, 0xd4, 0xbc, 0xac, 0xea, 0xbc, 0x17, 0x81, 0xeb, 0x37, 0xba,
		0x0c, 0x6d, 0x31, 0x02, 0xd8, 0x00, 0x6c, 0xd0, 0x65, 0x36, 0x40, 0x0b, 0x3a, 0xc2, 0x68, 0x02,
		0x57, 0x29, 0xae, 0x7f, 0x23, 0x5c, 0xa5, 0x08, 0x0b, 0x01, 0x0b, 0xb1, 0xcd, 0x42, 0xd8, 0x8f,
		0xaa, 0xa9, 0x91, 0x48, 0x87, 0x00, 0x63, 0x80, 0x31, 0x90, 0x09, 0x6c, 0xba, 0x32, 0xa3, 0x6f,
		0xc3, 0xfa, 0x9b, 0x65, 0x2b, 0x9f, 0xc6, 0x7a, 0xc4, 0x7a, 0xc4, 0x7a, 0x6c, 0xba, 0x1e, 0x63,
		0x3b, 0x7e, 0xce, 0x1e, 0xd4, 0xf1, 0x92, 0x2b, 0x1f, 0xc7, 0x8a, 0xc4, 0x8a, 0xec, 0xf0, 0x8a,
		0x3c, 0x9c, 0x6b, 0x87, 0xbf, 0xda, 0xf5, 0xba, 0xcd, 0x2c, 0x3f, 0x8a, 0xa5, 0x88, 0xa5, 0x08,
		0xe7, 0xd8, 0x70, 0x25, 0xce, 0x84, 0x53, 0x9f, 0x55, 0x8b, 0x1f, 0xc6, 0x6a, 0xc4, 0x6a, 0xc4,
		0x6a, 0x6c, 0xbc, 0x1a, 0x1f, 0xed, 0x06, 0x87, 0x37, 0x56, 0x3f, 0x8e, 0x15, 0x89, 0x15, 0xd9,
		0xe1, 0x15, 0x89, 0x03, 0x1c, 0xf9, 0x87, 0x71, 0x80, 0x03, 0x07, 0x38, 0xaa, 0x2e, 0xd0, 0xea,
		0xff, 0xfa, 0x1a, 0xf7, 0xc6, 0xc2, 0x69, 0xc1, 0x69, 0xc1, 0x69, 0xc1, 0x69, 0xc1, 0x69, 0x1d,
		0x99, 0xd3, 0x42, 0xfd, 0xe4, 0x0b, 0x66, 0xf8, 0xc0, 0xea, 0x27, 0x53, 0xef, 0x50, 0xb7, 0xc5,
		0x61, 0xe1, 0xb3, 0xa0, 0x09, 0xd0, 0x44, 0x87, 0x69, 0x02, 0x1d, 0x0e, 0xf7, 0x1f, 0x0a, 0x1d,
		0x0e, 0xd1, 0xe1, 0xb0, 0xda, 0x68, 0xe8, 0x70, 0xb8, 0xdf, 0x28, 0xe8, 0x70, 0xb8, 0xf7, 0x78,
		0xe8, 0x70, 0xf8, 0x82, 0xb3, 0x40, 0x87, 0xc3, 0xba, 0x63, 0xa2, 0xc3, 0x61, 0x8d, 0xd1, 0xd0,
		0xe1, 0xb0, 0xda, 0x50, 0xe8, 0x70, 0xb8, 0xef, 0x58, 0xe8, 0x70, 0x58, 0x39, 0x55, 0xf3, 0x1d,
		0x37, 0x25, 0xed, 0xc8, 0x16, 0x76, 0xec, 0xa6, 0x24, 0xf9, 0xa8, 0x95, 0xb0, 0x93, 0x20, 0xd6,
		0x0b, 0xbb, 0xb2, 0xcf, 0x6d, 0x49, 0x5a, 0xe8, 0x64, 0xff, 0xfc, 0x59, 0x8d, 0x80, 0xd8, 0x95,
		0x91, 0x92, 0x8e, 0xd0, 0xd2, 0x35, 0x9c, 0xda, 0x58, 0x7c, 0xb5, 0x36, 0x53, 0x1b, 0x85, 0xef,
		0x6e, 0x7c, 0xc9, 0x5d, 0x1f, 0xd6, 0xad, 0x5b, 0xc5, 0xbb, 0x93, 0x4e, 0xea, 0x5c, 0xa0, 0x63,
		0x35, 0xbc, 0x40, 0xea, 0xb7, 0x30, 0x78, 0xbf, 0x90, 0x5f, 0xf6, 0x4b, 0x33, 0x77, 0x71, 0x55,
		0x58, 0xc2, 0xfb, 0x2e, 0xdd, 0x0a, 0xd7, 0xff, 0x54, 0x5a, 0xaa, 0x4d, 0x6e, 0xfe, 0xa9, 0xb4,
		0x34, 0x69, 0x6e, 0xfe, 0xa9, 0xb2, 0x14, 0xbf, 0xd7, 0x9c, 0xeb, 0xeb, 0x6e, 0xde, 0xbb, 0xb6,
		0xc7, 0xb5, 0x64, 0x84, 0x8b, 0x87, 0xe6, 0x0a, 0xb6, 0x38, 0x99, 0xcd, 0x84, 0x7a, 0xaa, 0x72,
		0xfb, 0xda, 0xf3, 0x47, 0x70, 0xf1, 0x9a, 0x75, 0x04, 0x17, 0xaf, 0x39, 0x61, 0x32, 0x27, 0xab,
		0xca, 0x77, 0xae, 0x2d, 0x3e, 0x79, 0x00, 0xd7, 0xad, 0x35, 0xdc, 0x07, 0x3a, 0xb0, 0xbb, 0xd7,
		0x9a, 0xed, 0xf3, 0x18, 0xbd, 0x88, 0x6d, 0x9e, 0x91, 0x58, 0xd5, 0xa8, 0xba, 0xf7, 0xb2, 0x95,
		0x8e, 0x85, 0x4d, 0x4c, 0x4a, 0xd2, 0xc7, 0x26, 0x66, 0x79, 0xea, 0x16, 0x25, 0x51, 0x16, 0x4a,
		0xa2, 0xea, 0x66, 0xfe, 0x2d, 0x94, 0x44, 0x35, 0xc9, 0x9c, 0x59, 0x9d, 0xad, 0xe3, 0xa5, 0x71,
		0x6e, 0x70, 0x6b, 0x70, 0x6b, 0x70, 0x6b, 0x70, 0x6b, 0x70, 0x6b, 0x70, 0x6b, 0x9d, 0x70, 0x6b,
		0x8d, 0x3d, 0x1a, 0x9c, 0x19, 0x9c, 0x19, 0x9c, 0x19, 0x9c, 0x19, 0x9c, 0x19, 0x9c, 0x59, 0xdb,
		0xce, 0x2c, 0x89, 0x9a, 0x47, 0x68, 0x25, 0x63, 0xc0, 0xa5, 0xc1, 0xa5, 0xc1, 0xa5, 0xc1, 0xa5,
		0xc1, 0xa5, 0xc1, 0xa5, 0x91, 0xba, 0xb4, 0xc3, 0xaa, 0x35, 0x5a, 0x54, 0x0a, 0x9c, 0x54, 0xdc,
		0x33, 0xb6, 0x1a, 0x16, 0x49, 0x7c, 0x9e, 0x8b, 0x5d, 0xfe, 0xe2, 0xe7, 0xb9, 0xd4, 0xba, 0x95,
		0x45, 0x6f, 0xf7, 0xd9, 0x47, 0xdf, 0xab, 0x23, 0x5f, 0x49, 0x0c, 0xbc, 0x47, 0x3b, 0x3e, 0xec,
		0xa1, 0x63, 0x0f, 0x7d, 0x8f, 0x4c, 0x4c, 0xdc, 0x38, 0x15, 0x53, 0xb5, 0x13, 0x5d, 0x1f, 0xe0,
		0x0a, 0x70, 0xad, 0x0e, 0xae, 0xfb, 0x2a, 0x78, 0xfe, 0x01, 0x82, 0x62, 0x91, 0x0d, 0x35, 0x69,
		0x5c, 0x34, 0x52, 0x33, 0x8a, 0xab, 0xbd, 0x28, 0x9a, 0x2c, 0x0e, 0xae, 0x45, 0xd2, 0x74, 0xb1,
		0x90, 0x2d, 0x1a, 0xb2, 0xc5, 0xc3, 0xb8, 0x88, 0x6a, 0x42, 0x66, 0xd5, 0x73, 0x84, 0x55, 0xa3,
		0xc2, 0xe6, 0xd1, 0x61, 0x83, 0x28, 0xb1, 0x61, 0xb4, 0x58, 0x3f, 0x6a, 0x24, 0x89, 0x1e, 0xa9,
		0xa2, 0x48, 0xf2, 0x48, 0x88, 0x2e, 0x22, 0x6a, 0x10, 0x5d, 0x92, 0x44, 0x99, 0xe4, 0xd1, 0xe6,
		0x21, 0xbc, 0xeb, 0x37, 0x66, 0x3e, 0x75, 0xcd, 0x75, 0x98, 0xad, 0x02, 0x65, 0xd1, 0x3a, 0x75,
		0xb8, 0x73, 0xb8, 0x73, 0xb8, 0x73, 0xb8, 0x73, 0xb8, 0x73, 0xb8, 0x73, 0xb8, 0xf3, 0x16, 0xdc,
		0x39, 0x99, 0x27, 0x87, 0x13, 0x87, 0x13, 0x87, 0x13, 0x87, 0x13, 0x87, 0x13, 0x87, 0x13, 0x87,
		0x13, 0x37, 0xeb, 0xc4, 0x1b, 0x14, 0x45, 0x6d, 0x1a, 0xae, 0x08, 0xf1, 0x38, 0x5c, 0x39, 0x5c,
		0x39, 0x5c, 0x39, 0x5c, 0x39, 0x5c, 0x39, 0x5c, 0x39, 0x85, 0x2b, 0x27, 0xdd, 0x8c, 0xaf, 0x58,
		0x14, 0x96, 0x7f, 0x8e, 0xa1, 0x38, 0x4c, 0x3f, 0x45, 0xf2, 0xa4, 0x66, 0x49, 0x8a, 0x45, 0x5d,
		0x33, 0x96, 0x1a, 0xfa, 0x6a, 0x15, 0x64, 0xfb, 0xcf, 0x4f, 0xb5, 0x63, 0x56, 0xe9, 0x6b, 0xb1,
		0x5d, 0x19, 0x3b, 0xca, 0x8b, 0x2a, 0xcd, 0xd3, 0x96, 0x6a, 0xb3, 0x95, 0xb1, 0x50, 0xa9, 0xde,
		0x14, 0xb2, 0x50, 0xf0, 0x43, 0x0f, 0x4d, 0x87, 0x76, 0x4b, 0xfa, 0xea, 0xfa, 0x5a, 0x18, 0xa0,
		0x66, 0x8b, 0x74, 0x8f, 0xd6, 0x9b, 0x58, 0x9d, 0x58, 0x9d, 0xaf, 0x7d, 0x75, 0x36, 0xaa, 0xb4,
		0x7d, 0x7d, 0xad, 0x6b, 0x3b, 0x70, 0x04, 0x60, 0xcf, 0xfb, 0xe7, 0xc9, 0x61, 0xce, 0x4c, 0x63,
		0x51, 0x63, 0xcd, 0x26, 0x77, 0x77, 0x61, 0x24, 0x7a, 0x83, 0x34, 0x3d, 0x26, 0x1f, 0x55, 0x95,
		0xf6, 0x92, 0x8f, 0x0a, 0x9d, 0x25, 0xeb, 0x79, 0x9e, 0x6e, 0x75, 0x96, 0xac, 0x71, 0x18, 0xe6,
		0x10, 0xce, 0xc1, 0x1c, 0xfd, 0xd1, 0x97, 0xce, 0x76, 0x8c, 0x54, 0x91, 0xed, 0x05, 0xd3, 0x50,
		0xcd, 0x44, 0xbd, 0x28, 0x78, 0x7d, 0x00, 0x9c, 0x75, 0x01, 0x5c, 0xb3, 0xc3, 0x75, 0xf5, 0xb3,
		0x2e, 0xa9, 0x96, 0xc6, 0xb6, 0x2f, 0x85, 0x0a, 0xbc, 0xe0, 0xee, 0xf9, 0xf6, 0x12, 0xb7, 0xc1,
		0x49, 0x97, 0x6d, 0x23, 0x62, 0x23, 0xae, 0xf2, 0xb8, 0xd8, 0x88, 0xe3, 0xca, 0x98, 0x9b, 0xdf,
		0x88, 0xbb, 0x0d, 0x43, 0x5f, 0x8a, 0xa0, 0xc1, 0x4e, 0x5c, 0xbf, 0xdf, 0x81, 0xdd, 0xfa, 0x74,
		0x79, 0x6b, 0x6f, 0x26, 0xc3, 0x44, 0x37, 0xb3, 0x11, 0xcf, 0x83, 0xc0, 0x2c, 0xc0, 0x2c, 0x60,
		0x7f, 0x1e, 0xfb, 0xf3, 0xfb, 0x0f, 0x82, 0xfd, 0xf9, 0x17, 0xb2, 0x80, 0xd8, 0x9f, 0x67, 0x33,
		0x10, 0xf5, 0x3f, 0x75, 0xdd, 0x15, 0xe7, 0x5d, 0x79, 0xcf, 0xa8, 0xdc, 0x7d, 0x57, 0xdc, 0x35,
		0x82, 0x03, 0x87, 0x03, 0x3f, 0x4a, 0x07, 0x5e, 0x79, 0x57, 0x6a, 0x03, 0xeb, 0x2f, 0x50, 0xb9,
		0xb3, 0x6b, 0xeb, 0xe1, 0xb1, 0xf0, 0xfb, 0x93, 0x7a, 0x59, 0x35, 0xab, 0xe1, 0xfe, 0xc4, 0x1f,
		0x85, 0x5f, 0xdf, 0xbc, 0x53, 0xd1, 0x55, 0xe1, 0x09, 0x0c, 0x6e, 0xfc, 0xdf, 0x8a, 0xc0, 0x7d,
		0xf0, 0xdc, 0xec, 0x4d, 0x56, 0xcc, 0x46, 0x2e, 0x3f, 0x8a, 0x4d, 0x7e, 0xe4, 0x21, 0xd9, 0x8d,
		0x05, 0x9a, 0x45, 0x36, 0x8f, 0x77, 0xd0, 0x2c, 0x12, 0xcd, 0x22, 0xeb, 0x73, 0x10, 0x75, 0xb3,
		0xc8, 0x3d, 0x17, 0xfe, 0x87, 0x47, 0x1d, 0x57, 0x5a, 0x58, 0xf5, 0x4d, 0xef, 0xa3, 0x9a, 0xc8,
		0x6f, 0x32, 0xd0, 0xb6, 0x96, 0xbe, 0x9c, 0x49, 0xbd, 0xb3, 0x3a, 0x81, 0xdf, 0x0c, 0x7f, 0x4e,
		0x6e, 0x63, 0x47, 0x79, 0xb7, 0xd2, 0xfa, 0xf2, 0xfc, 0x3c, 0xd6, 0x87, 0xf4, 0xf9, 0xa8, 0x6d,
		0xf0, 0x35, 0x2d, 0x4b, 0x8c, 0x86, 0xf6, 0xad, 0xa7, 0x1b, 0x10, 0xc5, 0x62, 0x00, 0x70, 0x05,
		0xb8, 0xa2, 0xe3, 0x5c, 0x31, 0x1a, 0xd6, 0xe0, 0x8a, 0x0b, 0x70, 0x05, 0xb8, 0x62, 0xfd, 0xd5,
		0xd5, 0x2b, 0xae, 0x04, 0x61, 0x80, 0x30, 0x5e, 0x11, 0x61, 0x24, 0x2a, 0x90, 0xae, 0xed, 0x05,
		0xb6, 0x70, 0x5d, 0x25, 0xe3, 0x1a, 0x0d, 0x83, 0x37, 0x87, 0x40, 0x15, 0x15, 0x28, 0x83, 0x9d,
		0x32, 0x6a, 0x74, 0x0c, 0xae, 0xa6, 0xe0, 0x1b, 0x3a, 0x51, 0x4d, 0xbd, 0x6b, 0xc2, 0x74, 0x6d,
		0x75, 0x6f, 0xa2, 0xf6, 0x5c, 0xea, 0xdf, 0x74, 0x19, 0x90, 0x2d, 0x07, 0xb2, 0x65, 0xc1, 0xb8,
		0x3c, 0x6a, 0x7a, 0x78, 0xe3, 0x7b, 0x29, 0x33, 0xe1, 0xd8, 0xf5, 0x96, 0xc2, 0x8a, 0xd5, 0xbf,
		0xa8, 0xf1, 0xd9, 0x4f, 0x42, 0x6b, 0xa9, 0x82, 0xda, 0x45, 0x11, 0xbd, 0x3f, 0x4f, 0xed, 0x4b,
		0x61, 0x4f, 0xdf, 0xd9, 0xff, 0xbc, 0xfe, 0xcf, 0xe0, 0xfb, 0xdf, 0x26, 0xab, 0x7f, 0xff, 0xfb,
		0x7f, 0xce, 0xbf, 0xf7, 0xb8, 0xf7, 0x8c, 0x2b, 0xce, 0x57, 0x65, 0x92, 0xaa, 0x1f, 0xb0, 0x90,
		0x93, 0x15, 0xef, 0xaa, 0x23, 0x20, 0xad, 0x7a, 0x4b, 0xee, 0xfa, 0x55, 0x6f, 0xee, 0xd5, 0xc5,
		0x3d, 0x8b, 0x72, 0x7b, 0xef, 0xa7, 0xec, 0x21, 0xae, 0x82, 0x77, 0x8b, 0x47, 0x30, 0xb8, 0xbf,
		0xe7, 0x08, 0xa5, 0x3c, 0xa9, 0x6c, 0x57, 0xfa, 0xe2, 0xa9, 0x3a, 0x2d, 0xaf, 0x7e, 0x1c, 0xa4,
		0x0c, 0x52, 0xee, 0x1e, 0x29, 0xaf, 0xe8, 0x68, 0x76, 0x1f, 0x46, 0x7d, 0x68, 0x2e, 0x19, 0x0b,
		0xfc, 0x0c, 0x7e, 0x46, 0x31, 0x31, 0x8a, 0x89, 0x8d, 0x25, 0xc3, 0xc9, 0xd3, 0xb8, 0x74, 0xe9,
		0xdc, 0x06, 0x49, 0x72, 0x92, 0x64, 0xf9, 0xc6, 0x2b, 0x46, 0x31, 0x31, 0xd9, 0xa7, 0xba, 0x50,
		0x4c, 0xbc, 0xea, 0x7e, 0x93, 0x88, 0xca, 0x91, 0x27, 0x11, 0xdc, 0x38, 0xdc, 0x38, 0xdc, 0x38,
		0xdc, 0x38, 0xdc, 0x38, 0xdc, 0x38, 0xdc, 0x78, 0x1d, 0x37, 0x7e, 0x84, 0xc9, 0xc1, 0x3a, 0xd9,
		0x2d, 0xd2, 0xc4, 0xe0, 0xcf, 0xf3, 0x07, 0x78, 0x9f, 0xc9, 0x37, 0x99, 0x15, 0x54, 0x8e, 0xed,
		0xcb, 0xe0, 0xae, 0x4e, 0xd9, 0x7f, 0xe1, 0xb3, 0xa8, 0xcf, 0x43, 0x3e, 0x90, 0xdd, 0x54, 0xa0,
		0xee, 0xbf, 0x39, 0xd3, 0xa0, 0x3e, 0x0f, 0x75, 0xff, 0xf5, 0x83, 0x15, 0xea, 0xaa, 0x3c, 0x12,
		0x17, 0xe6, 0x8a, 0x59, 0x24, 0xb3, 0x6e, 0x40, 0x8d, 0x5a, 0x6a, 0x95, 0x0f, 0x83, 0x8d, 0x2e,
		0x38, 0x36, 0x76, 0xc7, 0x56, 0x79, 0xa3, 0xeb, 0x5e, 0xf8, 0x53, 0xdb, 0xf7, 0xa6, 0x0d, 0x8e,
		0xd9, 0x2f, 0x87, 0x40, 0x3e, 0x0c, 0xf9, 0x30, 0xe4, 0xc3, 0x90, 0x0f, 0x43, 0x3e, 0x0c, 0xf9,
		0x30, 0xe4, 0xc3, 0x6a, 0xe4, 0xc3, 0xaa, 0xdc, 0x29, 0x1b, 0xdb, 0x71, 0x12, 0x45, 0x4a, 0xc6,
		0xb1, 0x74, 0x6d, 0x19, 0x34, 0x6c, 0x87, 0x59, 0x3e, 0x1c, 0x1c, 0x3a, 0x1c, 0x3a, 0x7a, 0x61,
		0x1e, 0x7a, 0x2f, 0xcc, 0x99, 0x78, 0xf4, 0x66, 0xc9, 0x2c, 0x5f, 0xe0, 0x59, 0x4f, 0xcb, 0xfa,
		0xa6, 0xa2, 0x7c, 0x38, 0x98, 0x0a, 0x98, 0x0a, 0xb0, 0x3f, 0xd8, 0x1f, 0xec, 0x0f, 0xf6, 0x07,
		0xfb, 0xf3, 0x3a, 0xf4, 0x48, 0x06, 0xc2, 0xd7, 0x4f, 0xf5, 0x5d, 0xf8, 0xf3, 0x00, 0x70, 0xda,
		0x70, 0xda, 0x70, 0xda, 0x70, 0xda, 0x70, 0xda, 0x70, 0xda, 0x70, 0xda, 0xbc, 0x4e, 0x5b, 0xc9,
		0x58, 0x0b, 0xa5, 0xed, 0xc6, 0xce, 0x7b, 0x7d, 0x20, 0x38, 0x71, 0x38, 0x71, 0x38, 0x71, 0x38,
		0x71, 0x38, 0x71, 0x38, 0x71, 0x38, 0x71, 0x6e, 0x27, 0x9e, 0xc4, 0xd2, 0xd6, 0xf7, 0x4a, 0xc6,
		0xf7, 0xa1, 0xef, 0x36, 0x71, 0xe2, 0xab, 0x03, 0xc1, 0x89, 0xc3, 0x89, 0xc3, 0x89, 0xc3, 0x89,
		0xc3, 0x89, 0xc3, 0x89, 0xc3, 0x89, 0xf3, 0x3a, 0xf1, 0x58, 0x3a, 0x61, 0xe0, 0xc6, 0xb6, 0x92,
		0x33, 0xe1, 0x05, 0x5e, 0x70, 0x57, 0xdf, 0x8d, 0x6f, 0x0e, 0x05, 0x47, 0x0e, 0x47, 0x0e, 0x47,
		0x0e, 0x47, 0x0e, 0x47, 0x0e, 0x47, 0x0e, 0x47, 0xce, 0xec, 0xc8, 0xf3, 0x0a, 0xb4, 0xe6, 0x01,
		0x79, 0xc9, 0x58, 0x70, 0xe5, 0x70, 0xe5, 0x70, 0xe5, 0x70, 0xe5, 0x70, 0xe5, 0x70, 0xe5, 0x70,
		0xe5, 0x35, 0x5c, 0xf9, 0x11, 0xb6, 0x77, 0x69, 0x72, 0xb6, 0xdb, 0xa2, 0x6c, 0xf3, 0xf2, 0xfe,
		0xf9, 0x41, 0x5a, 0xba, 0xe4, 0xd5, 0x15, 0x5a, 0xd8, 0x4a, 0x68, 0x19, 0xd7, 0x39, 0x20, 0x9f,
		0x7f, 0x16, 0xa7, 0xe2, 0x9b, 0xb2, 0x13, 0x4e, 0xc5, 0xbf, 0xf8, 0x7c, 0x95, 0x4f, 0xc5, 0x57,
		0xbf, 0xc1, 0x78, 0x43, 0x2b, 0xaa, 0xde, 0x64, 0x8c, 0x30, 0x02, 0x61, 0xc4, 0xd1, 0x86, 0x11,
		0x95, 0x6e, 0x34, 0x5c, 0x5f, 0x09, 0x17, 0x08, 0x23, 0x10, 0x46, 0x70, 0x85, 0x11, 0x74, 0x37,
		0x24, 0x22, 0xa0, 0xe8, 0x54, 0x6e, 0xd0, 0x0b, 0xa2, 0x44, 0xdb, 0x39, 0x69, 0x36, 0x38, 0x19,
		0xbf, 0x36, 0x10, 0xdc, 0x39, 0xdc, 0x39, 0xdc, 0x39, 0xdc, 0x39, 0xdc, 0x39, 0xdc, 0x39, 0xdc,
		0xb9, 0x59, 0x77, 0xee, 0x87, 0xc2, 0x6d, 0xea, 0xc9, 0xb3, 0x31, 0xe0, 0xc4, 0xe1, 0xc4, 0x5f,
		0xb9, 0x13, 0xbf, 0x68, 0xe0, 0xc3, 0xcf, 0xe1, 0xc3, 0xe1, 0xc3, 0xb9, 0x7c, 0xf8, 0xe0, 0x1c,
		0x2e, 0xfb, 0x78, 0x5c, 0x76, 0x24, 0x9c, 0xaf, 0x52, 0x93, 0xc4, 0xe0, 0xc5, 0xa1, 0xe0, 0xc0,
		0xe1, 0xc0, 0x11, 0x85, 0x23, 0x0a, 0x87, 0x07, 0x47, 0x14, 0x0e, 0x97, 0x6e, 0xca, 0xa5, 0xa7,
		0xb1, 0xb3, 0x9d, 0x15, 0xc3, 0x7c, 0x13, 0x7e, 0x7d, 0x77, 0xbe, 0x3a, 0x0c, 0x5c, 0x39, 0x5c,
		0x39, 0xca, 0x6c, 0x51, 0x66, 0x0b, 0x57, 0xde, 0x41, 0x57, 0x8e, 0x32, 0xdb, 0xa3, 0x72, 0xe0,
		0x61, 0xa2, 0x89, 0xb6, 0xc5, 0x37, 0x46, 0x82, 0x1b, 0x87, 0x1b, 0x47, 0x44, 0x8e, 0x88, 0x1c,
		0x6e, 0x1c, 0x11, 0x39, 0x1c, 0xba, 0x61, 0x87, 0xde, 0x6c, 0x63, 0xbc, 0x38, 0x08, 0xdc, 0x38,
		0xdc, 0x38, 0x76, 0xc6, 0xb1, 0x33, 0x0e, 0x2f, 0xde, 0x3d, 0x2f, 0x8e, 0x9d, 0xf1, 0xa3, 0x72,
		0xda, 0x24, 0x5b, 0xe3, 0x25, 0x63, 0xc1, 0x85, 0xc3, 0x85, 0x23, 0x12, 0x47, 0x24, 0x0e, 0x1f,
		0x8e, 0x48, 0x1c, 0x4e, 0xdd, 0x94, 0x53, 0x8f, 0xa4, 0xf8, 0x6a, 0x93, 0x9d, 0x3a, 0x2b, 0x1d,
		0x0d, 0x8e, 0x1d, 0x8e, 0x1d, 0x8e, 0x1d, 0x8e, 0x1d, 0x8e, 0x1d, 0x8e, 0x1d, 0x8e, 0xbd, 0x05,
		0xc7, 0x4e, 0x12, 0xb1, 0x6f, 0x19, 0x0f, 0xce, 0x1d, 0xce, 0x1d, 0xce, 0x1d, 0xce, 0x1d, 0xce,
		0x1d, 0xce, 0x1d, 0xce, 0xdd, 0xa8, 0x73, 0xa7, 0xab, 0x8a, 0x2b, 0x1f, 0x0e, 0xae, 0x1d, 0xae,
		0x1d, 0xae, 0x1d, 0xae, 0x1d, 0xae, 0x1d, 0xae, 0x1d, 0xae, 0xbd, 0x0d, 0xd7, 0x4e, 0x17, 0xb8,
		0x63, 0xbf, 0x1d, 0xee, 0x1d, 0xee, 0x1d, 0xee, 0x1d, 0xee, 0x1d, 0xee, 0x1d, 0xee, 0xbd, 0x45,
		0xf7, 0xae, 0xa4, 0xef, 0x89, 0x5b, 0xcf, 0xf7, 0xf4, 0x53, 0x93, 0x6b, 0x98, 0x97, 0x83, 0xc0,
		0x8d, 0xc3, 0x8d, 0xa3, 0xf2, 0x1d, 0x95, 0xef, 0xf0, 0xe2, 0xdd, 0xf3, 0xe2, 0xa8, 0x7c, 0xef,
		0xb0, 0xd3, 0x3e, 0xca, 0x6b, 0x9e, 0x2a, 0xde, 0x50, 0x64, 0xd1, 0xde, 0xed, 0xa4, 0xc5, 0xef,
		0x99, 0x70, 0x93, 0x17, 0x3a, 0xc9, 0xd8, 0x51, 0x5e, 0x54, 0xe9, 0xcd, 0x2f, 0x6f, 0x74, 0x2a,
		0x7c, 0xb8, 0xda, 0x95, 0x4e, 0xa7, 0xb8, 0xd2, 0x89, 0x9e, 0x8b, 0x8e, 0xff, 0x4a, 0xa7, 0xca,
		0xbc, 0xb3, 0xbc, 0xe8, 0x55, 0xab, 0x6a, 0xf7, 0xb4, 0xe7, 0x97, 0x8f, 0x5d, 0x98, 0x5c, 0x8d,
		0x49, 0xe4, 0xcb, 0xc7, 0x2a, 0xb1, 0xcd, 0x72, 0x2d, 0xe6, 0x1f, 0xc5, 0x4a, 0xc4, 0x4a, 0xec,
		0xf0, 0x4a, 0xbc, 0x9a, 0xd9, 0x42, 0x6b, 0x65, 0xcf, 0x15, 0xb6, 0xce, 0x8a, 0x1c, 0x56, 0xf8,
		0xcc, 0x87, 0x20, 0x99, 0x55, 0x9f, 0xff, 0x2f, 0xe1, 0xe7, 0xb9, 0xbd, 0xa8, 0x15, 0x5b, 0x9d,
		0x66, 0xcd, 0x6b, 0x57, 0xbe, 0xa6, 0x9d, 0x04, 0x5f, 0x83, 0xf0, 0x21, 0xa8, 0x13, 0x69, 0xf5,
		0x4b, 0x86, 0xbb, 0x17, 0xfe, 0xb4, 0xce, 0x58, 0x83, 0x92, 0xb1, 0xa6, 0x89, 0xef, 0xf7, 0x78,
		0xc3, 0xd4, 0xf0, 0x2a, 0xd3, 0xe4, 0x1a, 0xef, 0xb2, 0xec, 0x59, 0x27, 0xd6, 0xe0, 0x6d, 0xe3,
		0x91, 0xb2, 0x37, 0xb8, 0xf7, 0xdd, 0x92, 0xbb, 0x46, 0x7a, 0x9e, 0xda, 0x89, 0x75, 0x7a, 0x10,
		0xac, 0xfd, 0xe1, 0x31, 0x8b, 0x84, 0xf6, 0x8f, 0xbe, 0xeb, 0x1b, 0xcf, 0x47, 0x35, 0x91, 0xdf,
		0x64, 0xa0, 0x6d, 0x2d, 0x7d, 0x39, 0x93, 0x5a, 0x3d, 0xb5, 0x6a, 0x48, 0x3f, 0x27, 0xb7, 0x29,
		0xb0, 0xde, 0x4a, 0xeb, 0xcb, 0xf3, 0xf3, 0x58, 0x1f, 0xd2, 0xe7, 0xa3, 0xb6, 0xa2, 0xd7, 0x24,
		0x34, 0x20, 0x03, 0x47, 0x44, 0x71, 0xe2, 0x8b, 0x7a, 0x74, 0xbe, 0xfa, 0x71, 0x50, 0x01, 0xa8,
		0x00, 0x7c, 0x4e, 0xb9, 0x22, 0x57, 0xee, 0x82, 0x6e, 0xb6, 0x3a, 0x6b, 0x5c, 0x2b, 0x8d, 0xcb,
		0x91, 0xb1, 0x52, 0x1b, 0xac, 0xd4, 0xca, 0x97, 0x23, 0xbb, 0xa1, 0xee, 0xff, 0x55, 0x4b, 0xe5,
		0x37, 0x43, 0xd5, 0x8d, 0xa1, 0xea, 0x6d, 0xc2, 0xf5, 0xb1, 0x09, 0x87, 0x4d, 0x38, 0xfa, 0xac,
		0x79, 0xd5, 0xe8, 0xa6, 0xea, 0x52, 0xda, 0xe2, 0x4d, 0x5c, 0xa9, 0x85, 0xe7, 0xc7, 0xf5, 0x67,
		0xb4, 0xdc, 0xb3, 0x3c, 0x0f, 0x5b, 0x73, 0x52, 0xea, 0x2d, 0xb5, 0xc6, 0x4b, 0x8e, 0x62, 0xe9,
		0x71, 0x2f, 0x41, 0xaa, 0xa5, 0x48, 0xbe, 0x24, 0xc9, 0x97, 0xa6, 0x81, 0x25, 0x5a, 0x6f, 0xa9,
		0xd6, 0x5c, 0xb2, 0x8d, 0x97, 0xee, 0x8a, 0x57, 0x14, 0xae, 0x3d, 0xf7, 0x68, 0xb1, 0x16, 0xce,
		0xd7, 0xe6, 0x6a, 0x50, 0x74, 0x93, 0x6b, 0x63, 0x37, 0x9c, 0xbe, 0x66, 0x8b, 0x99, 0x6c, 0x51,
		0x53, 0x2e, 0x6e, 0x53, 0x8b, 0x9c, 0x7a, 0xb1, 0xb3, 0x2d, 0x7a, 0xb6, 0xc5, 0x6f, 0xd0, 0x08,
		0x34, 0x33, 0x06, 0x0d, 0x8d, 0x02, 0x99, 0x71, 0xc8, 0x07, 0x0a, 0x13, 0x2d, 0x95, 0xad, 0xc5,
		0x1d, 0x9d, 0xd6, 0x14, 0xfa, 0xc0, 0x2d, 0x86, 0x26, 0x9a, 0xdc, 0x7a, 0xf5, 0x6d, 0xec, 0xa6,
		0x82, 0xc3, 0x64, 0x98, 0x36, 0x1d, 0x5c, 0x26, 0x84, 0xdd, 0x94, 0xb0, 0x9b, 0x94, 0x16, 0x4c,
		0x0b, 0x8d, 0x89, 0x21, 0x32, 0x35, 0xf5, 0xf3, 0x67, 0x7b, 0xeb, 0xf6, 0xbf, 0x7d, 0x11, 0xa4,
		0x76, 0xc2, 0xfe, 0x96, 0xd5, 0x56, 0x11, 0x6a, 0xf3, 0xc2, 0x62, 0x8c, 0x08, 0x87, 0x6c, 0x56,
		0x20, 0xb8, 0xed, 0x0f, 0xed, 0x6a, 0xb3, 0xa8, 0x0a, 0x0a, 0xb7, 0x0e, 0x4e, 0x54, 0x68, 0xb8,
		0x75, 0x7c, 0xea, 0xda, 0xb8, 0xed, 0x3a, 0x48, 0x55, 0x33, 0xc7, 0xbc, 0xfc, 0x56, 0xa7, 0x56,
		0x3c, 0xf2, 0x4f, 0xed, 0xe8, 0xfc, 0xfc, 0xec, 0x1c, 0xd3, 0x6b, 0xc4, 0x46, 0xd3, 0x8f, 0x76,
		0xfd, 0xa6, 0x1b, 0xcf, 0x43, 0xa0, 0xfe, 0xbd, 0x58, 0x3a, 0x61, 0xe0, 0xf2, 0x40, 0x6a, 0x61,
		0x6c, 0x50, 0x2a, 0x28, 0x15, 0x94, 0x0a, 0x4a, 0x05, 0xa5, 0x82, 0x52, 0x41, 0xa9, 0xa0, 0x54,
		0x50, 0xea, 0xeb, 0xa1, 0xd4, 0x56, 0x93, 0xb9, 0xf2, 0x51, 0x2b, 0x61, 0x27, 0x41, 0xac, 0xc5,
		0xad, 0x4f, 0xe3, 0xbd, 0x7a, 0x0f, 0xf7, 0x32, 0x20, 0xb3, 0xff, 0x0c, 0xde, 0xf4, 0xc7, 0x1f,
		0x4f, 0xbe, 0xa5, 0x0e, 0x75, 0x65, 0x43, 0xd8, 0xfa, 0x87, 0xf5, 0x43, 0x71, 0x67, 0xe9, 0x87,
		0x03, 0x63, 0xc6, 0xec, 0xa5, 0x1f, 0x32, 0x31, 0xee, 0x39, 0x2b, 0x6f, 0x3a, 0xe8, 0x76, 0x7a,
		0xef, 0x6b, 0x9c, 0x16, 0xab, 0xa3, 0xb6, 0xff, 0xfe, 0xe5, 0xdd, 0x6f, 0x1f, 0xd6, 0xdf, 0xcf,
		0xfb, 0xec, 0xfd, 0xa4, 0xff, 0xfb, 0xaf, 0x1f, 0xa8, 0x35, 0x80, 0x49, 0x71, 0xd7, 0x95, 0xb7,
		0xfa, 0x81, 0xb9, 0x4e, 0xe9, 0x71, 0x99, 0x2e, 0xbf, 0x3c, 0x55, 0x1d, 0xf5, 0x8b, 0xdf, 0x3b,
		0xe2, 0x17, 0xaf, 0x5b, 0xf5, 0x8b, 0x35, 0x0f, 0xde, 0x6e, 0xcf, 0x23, 0x91, 0x1e, 0xc8, 0xdd,
		0x5a, 0x24, 0x7b, 0xb2, 0x51, 0x43, 0x78, 0x52, 0x5a, 0xf6, 0x74, 0x42, 0x5e, 0x44, 0x61, 0x51,
		0x1e, 0xf9, 0x5d, 0x59, 0x38, 0x57, 0xcb, 0x2f, 0x73, 0x93, 0x2d, 0x9d, 0xe2, 0x2f, 0x56, 0xfe,
		0xe5, 0xfb, 0xf9, 0x97, 0xcb, 0xfe, 0xd5, 0xbb, 0xf9, 0x32, 0xfb, 0x9c, 0x7d, 0xb5, 0x37, 0xed,
		0xa8, 0x72, 0x93, 0x86, 0x01, 0x8b, 0x09, 0x0a, 0x32, 0x38, 0x27, 0xc9, 0x3f, 0xae, 0x17, 0xd0,
		0x14, 0x86, 0xa6, 0xa9, 0x9f, 0x39, 0x45, 0xfd, 0x4c, 0x67, 0x3c, 0x2d, 0xea, 0x67, 0x3a, 0x1b,
		0x72, 0x91, 0xa5, 0x09, 0xf9, 0xd2, 0x83, 0x84, 0x69, 0x41, 0xe2, 0x74, 0x20, 0x61, 0x38, 0xc8,
		0x91, 0xfe, 0xe3, 0x4a, 0xfb, 0xb1, 0xe7, 0x83, 0xf8, 0xf2, 0x40, 0x94, 0x71, 0x16, 0x47, 0x5a,
		0x8f, 0x33, 0x9d, 0x77, 0xc8, 0xd3, 0x86, 0x30, 0x00, 0xe9, 0xb1, 0xd2, 0x44, 0xcc, 0x9c, 0x1b,
		0x91, 0x1f, 0xeb, 0x58, 0x7e, 0xec, 0x79, 0x5a, 0x90, 0x20, 0x2b, 0xcf, 0xba, 0xfc, 0x46, 0xae,
		0xb6, 0xc8, 0x90, 0x71, 0x65, 0xc8, 0x7e, 0xa3, 0xd6, 0x65, 0xa4, 0xc8, 0x3a, 0x96, 0xd7, 0xa0,
		0xab, 0xfd, 0x5f, 0x4f, 0x6b, 0x50, 0x95, 0xfe, 0x23, 0xab, 0x81, 0xac, 0x06, 0xb2, 0x1a, 0xc8,
		0x6a, 0x20, 0xab, 0x81, 0xac, 0x06, 0xb2, 0x1a, 0xc8, 0x6a, 0x20, 0xab, 0x71, 0xd4, 0x59, 0x0d,
		0x11, 0x3c, 0x21, 0xa5, 0xd1, 0xb1, 0x94, 0x46, 0x36, 0x27, 0xc8, 0x67, 0x94, 0xc7, 0xc8, 0xef,
		0x68, 0x15, 0x16, 0xc9, 0x0c, 0xae, 0x64, 0xc6, 0x3b, 0x52, 0x2d, 0x46, 0x26, 0xa3, 0x63, 0x99,
		0x0c, 0x8e, 0x1c, 0x06, 0xb2, 0x17, 0xc8, 0x5e, 0x20, 0x7b, 0x81, 0xec, 0x05, 0xb2, 0x17, 0xc8,
		0x5e, 0x20, 0x7b, 0x81, 0x69, 0x43, 0xf6, 0x02, 0xd9, 0x8b, 0x5d, 0x91, 0x32, 0x32, 0x17, 0xdd,
		0xca, 0x5c, 0x20, 0x6b, 0xb1, 0x2d, 0x18, 0x46, 0xca, 0xe2, 0x10, 0x52, 0x16, 0xc8, 0x57, 0x1c,
		0x61, 0xbe, 0x82, 0xe3, 0x28, 0x09, 0xce, 0x90, 0x20, 0x5f, 0x81, 0x7c, 0x05, 0xf2, 0x15, 0xc8,
		0x57, 0x20, 0x5f, 0x81, 0x7c, 0x05, 0xf2, 0x15, 0xc8, 0x57, 0x20, 0x5f, 0xf1, 0x62, 0x7c, 0xfc,
		0x17, 0x8e, 0x90, 0x74, 0x30, 0x6b, 0xf1, 0x17, 0x4e, 0x90, 0xec, 0x8c, 0x8a, 0xff, 0x85, 0x03,
		0x24, 0x87, 0x92, 0xc0, 0xf8, 0x17, 0xce, 0x8f, 0x1c, 0x6d, 0x16, 0x83, 0xe1, 0xe0, 0x08, 0x4e,
		0x8c, 0x20, 0x87, 0x81, 0x1c, 0x06, 0x72, 0x18, 0xc8, 0x61, 0x20, 0x87, 0x81, 0x1c, 0x06, 0x72,
		0x18, 0xc8, 0x61, 0x20, 0x87, 0xb1, 0x2b, 0x5a, 0xfe, 0xcb, 0x0b, 0x70, 0x5c, 0xa4, 0x4b, 0xe9,
		0x8b, 0x7c, 0x42, 0x90, 0xb9, 0x58, 0x7f, 0x35, 0xff, 0xf2, 0x02, 0x1c, 0x14, 0xe9, 0x7c, 0xd2,
		0xe2, 0x79, 0x96, 0x90, 0xaf, 0x38, 0xba, 0x7c, 0x45, 0x2c, 0xd5, 0x37, 0xcf, 0x91, 0xb6, 0x97,
		0xfa, 0xce, 0xc0, 0x91, 0x8d, 0xef, 0xb3, 0xde, 0x58, 0xfa, 0x5b, 0x25, 0xe0, 0x56, 0x5c, 0x64,
		0x33, 0x90, 0xcd, 0x30, 0x44, 0xc8, 0x64, 0xb7, 0xe2, 0xba, 0x32, 0xd6, 0x5e, 0x30, 0xef, 0xd6,
		0x3c, 0x13, 0x8e, 0x3d, 0x13, 0xda, 0xb9, 0xa7, 0xbf, 0x7c, 0xac, 0x5c, 0x0c, 0xee, 0x21, 0xeb,
		0xba, 0x49, 0x31, 0x19, 0x31, 0xe0, 0x1e, 0x32, 0xb3, 0x80, 0xd4, 0xf9, 0x7b, 0xc8, 0x7e, 0x15,
		0x8e, 0x2d, 0x5c, 0x57, 0xc9, 0x38, 0x66, 0xb8, 0x84, 0xac, 0x7f, 0x41, 0x38, 0xe6, 0x27, 0xa1,
		0xb5, 0x54, 0x01, 0xf9, 0x3d, 0x64, 0xbd, 0x3f, 0x4f, 0xed, 0x4b, 0x61, 0x4f, 0xdf, 0xd9, 0xff,
		0xbc, 0xfe, 0xcf, 0xe0, 0xfb, 0xdf, 0x26, 0xab, 0x7f, 0xff, 0xfb, 0x7f, 0xce, 0xbf, 0xf7, 0x70,
		0x93, 0x66, 0xc9, 0x7b, 0xf3, 0x62, 0x5b, 0x3e, 0x0a, 0x47, 0x73, 0x39, 0xb4, 0xb5, 0xf1, 0xe1,
		0xc9, 0xe0, 0xc9, 0xe0, 0xc9, 0xe0, 0xc9, 0xb6, 0x59, 0x8b, 0x40, 0x9f, 0x0d, 0x18, 0x7c, 0xd8,
		0x19, 0x2e, 0xd2, 0x24, 0x1e, 0xfc, 0x79, 0x5b, 0x6a, 0xd0, 0x1f, 0x8e, 0x87, 0x17, 0x67, 0xa3,
		0xe1, 0xc5, 0x11, 0x5d, 0xb9, 0x98, 0xda, 0x0c, 0x5c, 0xa8, 0xb9, 0x31, 0xc5, 0x63, 0xdc, 0xaa,
		0x69, 0xc4, 0x4e, 0xd3, 0x8f, 0x76, 0x64, 0xc4, 0xba, 0x38, 0xdf, 0x16, 0x29, 0x99, 0x65, 0x59,
		0x83, 0x3b, 0x16, 0x6e, 0xdd, 0x94, 0x02, 0x7a, 0x05, 0xbd, 0x82, 0x5e, 0x41, 0xaf, 0xa0, 0x57,
		0xd0, 0x2b, 0xe8, 0x15, 0xf4, 0x0a, 0x7a, 0x05, 0xbd, 0xd6, 0xa6, 0xd7, 0x6f, 0xbe, 0x08, 0x38,
		0xb9, 0x35, 0x1b, 0x1f, 0xc4, 0x0a, 0x62, 0x05, 0xb1, 0x82, 0x58, 0x41, 0xac, 0x20, 0x56, 0x10,
		0x2b, 0x88, 0x15, 0xc4, 0x0a, 0x62, 0xad, 0x38, 0x89, 0x7e, 0xe8, 0x08, 0xdf, 0xd6, 0x4a, 0x4c,
		0xa7, 0x9e, 0x63, 0xc7, 0xd9, 0xcd, 0xfd, 0xe4, 0xd8, 0x5a, 0x26, 0x84, 0x96, 0x5d, 0xfb, 0x60,
		0x57, 0xb0, 0x2b, 0xd8, 0xd5, 0x34, 0xbb, 0x52, 0x15, 0xe0, 0x6e, 0x31, 0x47, 0x14, 0x1d, 0x07,
		0xf6, 0x34, 0x4a, 0xcd, 0x3b, 0x11, 0x30, 0x9b, 0x26, 0x36, 0x13, 0xc5, 0x69, 0xaa, 0xda, 0x32,
		0x59, 0xdc, 0xa6, 0xcb, 0x98, 0x09, 0x33, 0x66, 0xca, 0x5a, 0x34, 0x69, 0x4c, 0xb8, 0x47, 0xbc,
		0x3a, 0xa8, 0x4d, 0x5d, 0x3e, 0xb0, 0xd4, 0xf7, 0x52, 0x69, 0xea, 0x24, 0x40, 0xe9, 0xea, 0x5b,
		0x8a, 0x62, 0x52, 0x1e, 0xda, 0x4c, 0xa2, 0x31, 0xd3, 0x67, 0xc2, 0x04, 0xb6, 0x6d, 0x0a, 0x4d,
		0x99, 0x44, 0xe3, 0xa6, 0xd1, 0xb8, 0x89, 0xec, 0x80, 0xa9, 0xe4, 0x31, 0x99, 0x8c, 0xb9, 0x15,
		0x8b, 0x25, 0xd3, 0xb9, 0x75, 0x6d, 0x7d, 0x98, 0x46, 0x59, 0x4f, 0x1a, 0xc9, 0x68, 0xec, 0x56,
		0x18, 0x6f, 0xc8, 0x28, 0xe3, 0x43, 0x90, 0xcc, 0xf8, 0x97, 0xeb, 0x97, 0xf0, 0xb3, 0x56, 0x94,
		0xc5, 0x56, 0x3b, 0xa5, 0x9d, 0xa6, 0xb3, 0x94, 0x04, 0x5a, 0xdc, 0xdd, 0x49, 0x97, 0xd9, 0x30,
		0x64, 0x02, 0xcf, 0xce, 0x4e, 0x07, 0xc3, 0xe7, 0xdb, 0xde, 0xfe, 0x32, 0x22, 0x71, 0x78, 0x79,
		0x31, 0x5c, 0xde, 0x2f, 0xd7, 0x63, 0x95, 0xf8, 0xfd, 0x2d, 0xb7, 0x76, 0x5c, 0x65, 0x76, 0xce,
		0x80, 0x6a, 0x2c, 0x5e, 0xd7, 0xc4, 0xca, 0x5e, 0xe0, 0x5b, 0x33, 0x02, 0xff, 0x4a, 0xe5, 0xa5,
		0x2a, 0x62, 0x40, 0x5e, 0xae, 0xf6, 0x13, 0xeb, 0x94, 0x57, 0x29, 0x0e, 0xcd, 0xef, 0x1c, 0xc4,
		0x2e, 0x41, 0xd6, 0x0e, 0xc5, 0x73, 0xf9, 0x69, 0xfd, 0x59, 0x10, 0x58, 0x1d, 0xac, 0x0e, 0x56,
		0x07, 0xab, 0x1f, 0x29, 0xab, 0x93, 0x37, 0x90, 0x7c, 0xc9, 0xe2, 0x8d, 0x18, 0x45, 0xf0, 0x94,
		0x33, 0xac, 0xff, 0x31, 0x40, 0x61, 0x9c, 0xe5, 0x0e, 0x1b, 0xc2, 0x98, 0x1a, 0x57, 0x6e, 0x95,
		0x67, 0x6a, 0x8b, 0x7c, 0x53, 0xe7, 0xb9, 0xb7, 0xcc, 0x0d, 0xc7, 0x05, 0x16, 0x77, 0xd9, 0xc4,
		0x56, 0x55, 0x61, 0x68, 0x98, 0x09, 0x75, 0x61, 0x8c, 0x18, 0x78, 0x47, 0xbf, 0x3e, 0x94, 0x78,
		0xa4, 0xd3, 0x5b, 0x1c, 0xbf, 0x78, 0xb1, 0x7e, 0xa7, 0x35, 0xd3, 0x3e, 0xc7, 0xaf, 0x5e, 0xf0,
		0xc1, 0x97, 0x29, 0x83, 0x31, 0x2d, 0xa1, 0xd4, 0x10, 0x15, 0x24, 0xf4, 0x2f, 0x86, 0xc3, 0xd1,
		0x78, 0x38, 0x3c, 0x1d, 0x9f, 0x8d, 0x4f, 0x2f, 0xcf, 0xcf, 0xfb, 0xa3, 0x3e, 0x83, 0xc1, 0xe8,
		0x7d, 0x54, 0xae, 0x54, 0xd2, 0xfd, 0xe9, 0xa9, 0x37, 0xb1, 0x82, 0xc4, 0xf7, 0x3b, 0x3d, 0xc3,
		0xef, 0x82, 0x20, 0xd4, 0x82, 0xa5, 0x2b, 0x66, 0x36, 0x7e, 0xec, 0xdc, 0xcb, 0x99, 0x88, 0x84,
		0xbe, 0x4f, 0xc9, 0xee, 0x64, 0x17, 0x68, 0x9f, 0x78, 0x81, 0x96, 0x6a, 0x2a, 0x1c, 0x19, 0x2f,
		0x7f, 0xb4, 0x1f, 0x0b, 0xbf, 0x3f, 0x59, 0xe9, 0x39, 0x6a, 0x7b, 0xc1, 0x34, 0x54, 0xb3, 0xec,
		0xe7, 0x93, 0xf9, 0xdd, 0x29, 0xc5, 0xdf, 0xac, 0xfe, 0xdb, 0x45, 0x37, 0xbe, 0x93, 0x6d, 0x6d,
		0xfa, 0x4e, 0x4a, 0x2a, 0x92, 0x4e, 0xb8, 0x0b, 0x02, 0xe6, 0x6f, 0x48, 0xab, 0xc4, 0xd1, 0x41,
		0x31, 0xae, 0xbc, 0xb9, 0xfa, 0xf8, 0xf9, 0xe6, 0x8f, 0xdf, 0x3f, 0x4d, 0xbd, 0xab, 0xd9, 0xcf,
		0x33, 0xf7, 0x63, 0x24, 0xd5, 0xcd, 0x55, 0xfe, 0x72, 0x96, 0x3f, 0xfe, 0x51, 0xf8, 0xf5, 0xcd,
		0x4a, 0x3b, 0xcb, 0xab, 0xe5, 0x8b, 0xb8, 0xc9, 0xee, 0xe2, 0x28, 0xfe, 0x62, 0xe5, 0x5f, 0xbe,
		0x9f, 0x7f, 0xff, 0x9b, 0xcf, 0xf3, 0x17, 0x73, 0xb5, 0x78, 0x2f, 0xcf, 0xbf, 0xfe, 0x25, 0x7d,
		0x05, 0x5f, 0xe6, 0x6f, 0xe0, 0x73, 0xfa, 0x52, 0x56, 0x7e, 0xf3, 0x45, 0xdc, 0x1d, 0x79, 0xb7,
		0x4c, 0xaa, 0xfe, 0x7b, 0x3c, 0xcb, 0xec, 0xa0, 0x97, 0x17, 0x65, 0x41, 0xda, 0x81, 0x2d, 0xa2,
		0xde, 0x11, 0xd5, 0x8b, 0x46, 0xe2, 0xc9, 0x0f, 0x85, 0x6b, 0xd3, 0x57, 0x2d, 0xe4, 0x09, 0x81,
		0x4d, 0x11, 0x38, 0xe7, 0x74, 0x28, 0x19, 0x4c, 0xd4, 0x8a, 0x76, 0x28, 0x03, 0xf9, 0x5a, 0xce,
		0x39, 0x7d, 0x98, 0x46, 0xf6, 0xd2, 0x68, 0xd0, 0xee, 0xf8, 0x73, 0xec, 0xf0, 0xf3, 0xec, 0xe8,
		0xf3, 0xee, 0xe0, 0xcf, 0x77, 0xec, 0x37, 0x4c, 0xb3, 0x2d, 0x82, 0x27, 0x0e, 0x4c, 0xee, 0x97,
		0x4b, 0xf3, 0x22, 0x0e, 0x61, 0x83, 0x72, 0x61, 0x51, 0x14, 0x85, 0xb2, 0xd7, 0xe9, 0x78, 0x8e,
		0x6f, 0x5b, 0x7e, 0xcb, 0x54, 0xf3, 0x04, 0xee, 0xa5, 0x13, 0x4d, 0x5e, 0x39, 0xbd, 0x45, 0xd4,
		0x7c, 0x9a, 0x27, 0xd6, 0x00, 0x17, 0x01, 0xf0, 0xd3, 0x63, 0x12, 0xdf, 0x73, 0x10, 0x63, 0x36,
		0x2c, 0x4e, 0x14, 0x81, 0x12, 0x41, 0x89, 0x07, 0x4e, 0x89, 0xe4, 0x27, 0x8a, 0xf8, 0xca, 0xeb,
		0xd9, 0xcb, 0xea, 0x99, 0x4a, 0x74, 0x70, 0x82, 0xa8, 0x03, 0xa6, 0xca, 0x98, 0xc9, 0x32, 0x66,
		0xba, 0x5a, 0x34, 0x61, 0xf4, 0xd0, 0xc5, 0x02, 0xeb, 0x5c, 0x25, 0x35, 0xc6, 0xca, 0xde, 0x39,
		0xcb, 0xdd, 0x79, 0xcb, 0xdc, 0xcd, 0x94, 0xb7, 0x1b, 0x2b, 0x6b, 0x37, 0x57, 0xce, 0x6e, 0xa6,
		0x8c, 0x9d, 0xad, 0x8a, 0x8d, 0xbd, 0x6c, 0xdd, 0x58, 0xb9, 0xba, 0xa9, 0x32, 0x75, 0xfe, 0xf2,
		0xf4, 0xef, 0xaf, 0xa6, 0x51, 0x08, 0xe5, 0x8d, 0x96, 0x5c, 0x65, 0xe7, 0xcc, 0xe5, 0xe6, 0x60,
		0x58, 0x30, 0x2c, 0x18, 0x16, 0x0c, 0xbb, 0xf7, 0xda, 0x60, 0x2f, 0x07, 0x67, 0x2c, 0x03, 0x67,
		0x2e, 0xff, 0x66, 0xa4, 0x18, 0x13, 0xe5, 0xde, 0xa6, 0xca, 0xbc, 0x8d, 0xd7, 0xeb, 0x9a, 0xab,
		0xd3, 0x65, 0x2c, 0xe7, 0x36, 0x52, 0xc6, 0x6d, 0xb2, 0x7c, 0xfb, 0x98, 0xd5, 0xe0, 0x40, 0xb8,
		0xfc, 0x1a, 0xd5, 0x82, 0x7b, 0xa8, 0x0d, 0x4b, 0xd9, 0x35, 0x5f, 0xb9, 0xb5, 0xd1, 0x32, 0x6b,
		0x9e, 0xf2, 0x6a, 0xd4, 0x79, 0x12, 0xd5, 0x79, 0x52, 0x6e, 0xbc, 0x5a, 0xdd, 0xaf, 0xec, 0xfc,
		0x94, 0x7d, 0xdd, 0x23, 0xda, 0x8f, 0x8f, 0xb3, 0xc0, 0x90, 0xf3, 0xca, 0xeb, 0x0d, 0x09, 0xa8,
		0xe5, 0x3c, 0x94, 0xf4, 0x01, 0x76, 0xe9, 0x3b, 0x94, 0x1e, 0xc0, 0x6d, 0xd7, 0x14, 0xe6, 0x02,
		0xb7, 0x5d, 0xf3, 0x20, 0x7a, 0x37, 0xbc, 0x99, 0x16, 0x77, 0xb1, 0x1d, 0x85, 0x51, 0x24, 0x5d,
		0x7a, 0x47, 0x56, 0x1c, 0x1c, 0x3e, 0x0c, 0x3e, 0x0c, 0x3e, 0x0c, 0x3e, 0x6c, 0x8b, 0x6e, 0x27,
		0x5e, 0xa0, 0xfb, 0x23, 0x06, 0xf7, 0x35, 0xc2, 0xc5, 0x2b, 0x4c, 0xf9, 0xc8, 0x53, 0x5c, 0xc6,
		0x61, 0x66, 0xd9, 0xad, 0x67, 0x92, 0xf8, 0xa7, 0x96, 0x31, 0xd5, 0x8c, 0xbb, 0x56, 0xd8, 0x47,
		0x3b, 0x3a, 0x3e, 0xd5, 0x21, 0x57, 0xaa, 0x65, 0x75, 0x78, 0x9c, 0x86, 0x00, 0xa3, 0x82, 0x51,
		0x0f, 0x9c, 0x51, 0x71, 0x1a, 0x82, 0x2d, 0x5c, 0x66, 0x33, 0x49, 0x9c, 0xa6, 0xa9, 0x2d, 0x13,
		0xc5, 0x6d, 0xaa, 0x8c, 0x99, 0x2c, 0x63, 0xa6, 0xab, 0x45, 0x13, 0xc6, 0x84, 0x74, 0x38, 0x0d,
		0xb1, 0x8d, 0x8d, 0x70, 0x1a, 0xa2, 0x5c, 0x0a, 0x4e, 0x43, 0x74, 0x26, 0xd4, 0xb6, 0x70, 0x1a,
		0xa2, 0x9e, 0x1c, 0x9c, 0x86, 0xe8, 0xe4, 0x69, 0x88, 0x48, 0x79, 0xa1, 0xf2, 0xf4, 0x13, 0x1f,
		0xc6, 0xe6, 0x12, 0x40, 0xb1, 0xa0, 0x58, 0x50, 0x2c, 0x28, 0xb6, 0x65, 0x8a, 0x65, 0xb2, 0x47,
		0x00, 0xd9, 0x7d, 0x41, 0xf6, 0x79, 0x02, 0x4e, 0x39, 0xf9, 0xb2, 0x5f, 0x94, 0xd4, 0xe7, 0x94,
		0x34, 0x28, 0x4a, 0x1a, 0xb0, 0x32, 0x73, 0x51, 0xd2, 0x19, 0xa7, 0xa4, 0x61, 0x51, 0xd2, 0x90,
		0x53, 0xd2, 0x79, 0x51, 0xd2, 0x39, 0xa7, 0xa4, 0x51, 0x51, 0xd2, 0x88, 0x53, 0xd2, 0xb8, 0x28,
		0x69, 0xcc, 0x29, 0xe9, 0xa2, 0x28, 0x29, 0xeb, 0x2b, 0x86, 0x38, 0xaa, 0x9c, 0x6f, 0x17, 0x4d,
		0xd7, 0x2e, 0xde, 0xf2, 0x8b, 0x3a, 0xe5, 0x3d, 0x21, 0x53, 0xb0, 0x6a, 0x2c, 0x9d, 0xdd, 0x36,
		0xe4, 0xa4, 0x06, 0x6e, 0x60, 0x40, 0x4e, 0x6a, 0xde, 0xce, 0x0c, 0xc8, 0x49, 0x8d, 0xdb, 0xd0,
		0x80, 0x9c, 0xd4, 0xb4, 0x9d, 0x1b, 0x90, 0x33, 0x62, 0xbe, 0x8a, 0x67, 0x69, 0xc9, 0x26, 0xd6,
		0x18, 0xa1, 0x7b, 0x67, 0x42, 0xf7, 0xac, 0xcf, 0x80, 0x5a, 0x54, 0x1f, 0x71, 0xf6, 0x32, 0x98,
		0xcb, 0xc0, 0xa5, 0xfe, 0x08, 0xdf, 0x11, 0xbe, 0x23, 0x7c, 0x2f, 0x7d, 0x2f, 0x6c, 0x97, 0xfa,
		0x2f, 0x9a, 0xa9, 0xd8, 0xf7, 0xde, 0xdd, 0xbd, 0xb1, 0x9b, 0x42, 0xe7, 0xd2, 0x70, 0x5d, 0xa8,
		0x69, 0x43, 0xd8, 0xb6, 0x41, 0x34, 0x65, 0x18, 0x8d, 0x1b, 0x48, 0xe3, 0x86, 0xb2, 0x03, 0x06,
		0x93, 0x0f, 0x2e, 0x2d, 0x5c, 0x17, 0x5a, 0xc7, 0xe2, 0xe1, 0xba, 0xd0, 0x3d, 0xbe, 0x08, 0xae,
		0x0b, 0x65, 0xd1, 0x79, 0x5c, 0x17, 0x4a, 0xa4, 0x2a, 0xb8, 0x2e, 0xf4, 0x70, 0x7c, 0x14, 0xff,
		0xe8, 0x07, 0x73, 0x5d, 0xe8, 0x5b, 0xbe, 0xc8, 0xc4, 0x0f, 0x1f, 0xcc, 0x05, 0x26, 0xa9, 0x30,
		0xc4, 0x25, 0x88, 0x4b, 0x10, 0x97, 0x20, 0x2e, 0x41, 0x5c, 0x82, 0xb8, 0x04, 0x71, 0x09, 0x40,
		0x13, 0x71, 0x09, 0xe2, 0x12, 0xc4, 0x25, 0x87, 0x19, 0x97, 0x74, 0x7a, 0x53, 0x87, 0xa5, 0x9f,
		0x66, 0xd1, 0xa3, 0xf0, 0xf4, 0xd5, 0x2c, 0x1a, 0x22, 0x63, 0xfd, 0x35, 0x73, 0xa1, 0x2c, 0x7d,
		0x36, 0xb9, 0x66, 0x98, 0xa9, 0xef, 0x66, 0x3e, 0xfe, 0xc1, 0xf4, 0xdf, 0x5c, 0x39, 0xf2, 0x7f,
		0xc2, 0x56, 0xf5, 0x60, 0x75, 0xbf, 0x35, 0xe7, 0x17, 0x71, 0x17, 0x7f, 0x09, 0x7f, 0x4d, 0xdf,
		0xc3, 0x4d, 0x8a, 0xe2, 0x73, 0x82, 0x45, 0xff, 0xe1, 0xb6, 0xec, 0x25, 0xfa, 0x0f, 0x1b, 0x98,
		0xb9, 0x57, 0xdf, 0x7f, 0x98, 0xa3, 0xe5, 0xc9, 0x61, 0x19, 0xbb, 0xce, 0x74, 0x23, 0x7e, 0xd3,
		0xe2, 0x82, 0xe8, 0xc9, 0x47, 0xad, 0x84, 0x9d, 0xa4, 0xaf, 0xe9, 0xd6, 0xa7, 0x49, 0xf8, 0xf4,
		0x1e, 0xee, 0x25, 0x5d, 0x6f, 0x4f, 0x86, 0xee, 0x34, 0x3f, 0xfe, 0x38, 0x77, 0xf8, 0x2b, 0x4b,
		0xc6, 0xfa, 0x87, 0xf5, 0xc3, 0xfa, 0x6a, 0xf9, 0xe1, 0xc0, 0x7a, 0xd5, 0x64, 0x2f, 0xfe, 0x90,
		0x3b, 0xd5, 0x54, 0x98, 0x99, 0x4e, 0x56, 0xe8, 0xbe, 0x97, 0xb1, 0xa3, 0xbc, 0x88, 0x85, 0xaf,
		0x8b, 0xea, 0xfb, 0xef, 0x5f, 0xde, 0xfd, 0xf6, 0x61, 0xfd, 0x1d, 0xad, 0x99, 0xbc, 0x1f, 0xa8,
		0x35, 0x81, 0x71, 0x2f, 0xa2, 0xa8, 0xc4, 0x6e, 0xe1, 0x1d, 0x32, 0xc0, 0xb8, 0x89, 0x8d, 0x87,
		0x75, 0x9d, 0xde, 0x6f, 0xba, 0x70, 0x8b, 0x3e, 0x63, 0x8a, 0xa7, 0xa9, 0x9f, 0x24, 0x06, 0xc6,
		0x83, 0x01, 0xc5, 0x1e, 0xc5, 0x5d, 0x09, 0x5d, 0x46, 0xc2, 0x66, 0xcb, 0xae, 0xbe, 0x5a, 0x37,
		0x50, 0xc8, 0x5e, 0xac, 0x85, 0xf3, 0xb5, 0xb1, 0x1e, 0x2e, 0x6f, 0x9a, 0xc8, 0x86, 0x6b, 0xb8,
		0x40, 0x68, 0x8e, 0x77, 0x90, 0x55, 0x0d, 0x50, 0x56, 0x07, 0x98, 0xaa, 0x02, 0xa0, 0xf6, 0xb0,
		0x6c, 0xbb, 0xfa, 0x6c, 0x4e, 0xd4, 0xe0, 0x2e, 0x7d, 0xbb, 0x61, 0x17, 0xd5, 0xf1, 0x89, 0x5e,
		0x98, 0x68, 0xa9, 0x6c, 0x2d, 0xee, 0xe8, 0xbb, 0xa2, 0x2e, 0x87, 0x46, 0xd7, 0xfe, 0xae, 0x9b,
		0x0e, 0x93, 0x51, 0x26, 0x3a, 0xa2, 0x1e, 0x64, 0xb2, 0x9a, 0xaf, 0x6b, 0x3f, 0x5b, 0x01, 0x0f,
		0xba, 0xf7, 0xa3, 0x7b, 0xff, 0x4b, 0x3a, 0x88, 0xee, 0xfd, 0x5b, 0xa6, 0x16, 0xdd, 0xfb, 0xcd,
		0xe6, 0x49, 0x2c, 0x74, 0xef, 0xdf, 0x16, 0xae, 0x4a, 0x27, 0x0c, 0x5c, 0x1e, 0x48, 0x2d, 0x8c,
		0x0d, 0x4a, 0x05, 0xa5, 0x82, 0x52, 0x41, 0xa9, 0xa0, 0x54, 0x50, 0x2a, 0x28, 0x15, 0x94, 0x0a,
		0x4a, 0x7d, 0x3d, 0x94, 0x8a, 0x1a, 0x1a, 0x33, 0x76, 0xff, 0xe5, 0x1a, 0x9a, 0xbf, 0xbc, 0xe0,
		0x2f, 0xd4, 0xcd, 0x74, 0xa5, 0x6e, 0x66, 0x3e, 0x1b, 0xa8, 0x95, 0x59, 0x7f, 0x2f, 0xff, 0xf2,
		0x82, 0x7f, 0xa1, 0x40, 0xa6, 0x15, 0xc5, 0xb5, 0xf6, 0x2d, 0x90, 0x99, 0xcf, 0x11, 0xaa, 0x62,
		0x18, 0x3d, 0x30, 0xaa, 0x62, 0x5e, 0xa8, 0x8a, 0x21, 0xa8, 0x8c, 0xb0, 0xba, 0x54, 0x02, 0x93,
		0x7d, 0x9f, 0x03, 0xac, 0x78, 0xa1, 0xc8, 0x1d, 0x16, 0xaf, 0xfb, 0x24, 0xaa, 0x76, 0x39, 0x45,
		0xb5, 0x4b, 0x67, 0xdc, 0x25, 0xaa, 0x5d, 0x3a, 0x1b, 0x20, 0x91, 0x25, 0xf5, 0xf8, 0x92, 0x79,
		0x84, 0x49, 0x3c, 0xe2, 0xe4, 0x1d, 0xed, 0xc9, 0x32, 0x7a, 0xd4, 0x66, 0x4a, 0xd2, 0xb1, 0x67,
		0x6f, 0xf8, 0xb2, 0x36, 0xdf, 0x69, 0x8f, 0xec, 0xf1, 0x4d, 0x19, 0x43, 0xf2, 0xed, 0x90, 0xa7,
		0x0d, 0x48, 0x8f, 0x64, 0xd6, 0x6a, 0x08, 0x9a, 0xc5, 0x09, 0xc8, 0x66, 0x75, 0x25, 0x9b, 0xb5,
		0x98, 0x0e, 0xa4, 0xb3, 0xd6, 0x5f, 0x4c, 0x16, 0xfd, 0x21, 0x9f, 0xd5, 0xed, 0x7c, 0xd6, 0x62,
		0x92, 0x90, 0xd0, 0xe2, 0xf4, 0x7e, 0xad, 0x64, 0x27, 0x36, 0xad, 0x15, 0x5d, 0xb2, 0xa2, 0x64,
		0x6c, 0xe4, 0x2e, 0x90, 0xbb, 0x40, 0xee, 0xe2, 0xb0, 0x73, 0x17, 0xf3, 0x15, 0x4d, 0x98, 0xb8,
		0xa0, 0xb8, 0x82, 0x94, 0xf6, 0xca, 0x51, 0x9e, 0x2b, 0x46, 0xe7, 0x57, 0x8a, 0x06, 0x21, 0xa9,
		0x4d, 0x5c, 0x11, 0xd0, 0xe7, 0xb8, 0x0f, 0x7f, 0x7e, 0x6b, 0xe8, 0x5f, 0x5e, 0x40, 0x3a, 0xe8,
		0xd9, 0x62, 0xd0, 0xec, 0xb2, 0x43, 0xc2, 0x71, 0xf3, 0x8b, 0xfa, 0xff, 0xb2, 0x83, 0x79, 0xb0,
		0x4d, 0x38, 0xf8, 0xf9, 0xf3, 0xe0, 0xc2, 0xa5, 0x1c, 0x76, 0xb4, 0x1c, 0x96, 0xe1, 0xa1, 0xc7,
		0xf3, 0x62, 0xe3, 0xd5, 0x43, 0xd2, 0x94, 0x02, 0x2e, 0x0a, 0x8f, 0x4f, 0xae, 0x7c, 0x97, 0x85,
		0xc1, 0xc9, 0x2e, 0x0d, 0x25, 0x2b, 0xf9, 0x24, 0xbf, 0x14, 0xf4, 0x59, 0xbb, 0x48, 0xaf, 0x63,
		0x2c, 0xbe, 0xbf, 0x89, 0x75, 0x49, 0x3f, 0xf0, 0x7c, 0xd6, 0x49, 0xaf, 0x2c, 0x5d, 0x5b, 0x0f,
		0xb4, 0x35, 0xaa, 0xcf, 0xcf, 0xdb, 0xa7, 0x1e, 0x73, 0xf9, 0xb8, 0x84, 0xb7, 0x76, 0x6e, 0xba,
		0x0c, 0xda, 0xde, 0x6a, 0xcf, 0x56, 0x98, 0xf4, 0x4a, 0xd3, 0xb9, 0xc3, 0x20, 0xbd, 0x8d, 0x75,
		0xd3, 0x88, 0x51, 0x5d, 0xf2, 0xd9, 0x7a, 0x19, 0xdf, 0x1b, 0xb3, 0x9f, 0xac, 0x69, 0xff, 0xa8,
		0x8a, 0x26, 0xba, 0x56, 0x2c, 0xd1, 0x6b, 0xd4, 0xd0, 0xa2, 0x0b, 0xe5, 0x11, 0xf5, 0xdc, 0x62,
		0x75, 0xe5, 0xa9, 0xa1, 0x38, 0xf3, 0x34, 0x40, 0xfc, 0xe0, 0x69, 0xe7, 0x5e, 0xba, 0xb5, 0xf5,
		0x66, 0x35, 0xab, 0x90, 0x0f, 0x57, 0x53, 0x91, 0x9b, 0xb5, 0xfc, 0x68, 0x9c, 0x40, 0xa0, 0x48,
		0x1c, 0x70, 0x27, 0x0c, 0xa8, 0x12, 0x05, 0xe4, 0x09, 0x02, 0xf2, 0xc4, 0x80, 0x81, 0x84, 0x80,
		0x59, 0x33, 0xdd, 0xb4, 0x45, 0x47, 0x4f, 0x38, 0x8e, 0x8c, 0x63, 0x3b, 0x5d, 0x6a, 0x74, 0xe9,
		0xc0, 0xe2, 0xa0, 0xc8, 0x03, 0x22, 0x0f, 0x88, 0x3c, 0xe0, 0x61, 0xe7, 0x01, 0x51, 0xc3, 0x54,
		0xf1, 0xc1, 0x50, 0xc3, 0xb4, 0xa2, 0x4b, 0xa8, 0x61, 0x42, 0x0d, 0x13, 0x69, 0x0c, 0x6e, 0xbd,
		0xda, 0x5d, 0xdc, 0x59, 0xe8, 0x4a, 0x3a, 0x50, 0xcb, 0x46, 0x03, 0xa1, 0x81, 0xd0, 0x40, 0x68,
		0x87, 0x4d, 0x68, 0xcf, 0x59, 0x12, 0x9b, 0x60, 0x45, 0x5b, 0xaf, 0x78, 0xc3, 0x36, 0x90, 0xe4,
		0x9b, 0xb4, 0x5a, 0x25, 0xc1, 0x57, 0x3b, 0x0a, 0x95, 0x26, 0xdf, 0xa9, 0x5d, 0xc4, 0xd9, 0xd9,
		0xd8, 0xc7, 0xbe, 0x5b, 0x56, 0xfc, 0xae, 0xb4, 0x7b, 0x0d, 0xd9, 0xac, 0xd3, 0xee, 0xb3, 0x14,
		0xe6, 0x7c, 0x62, 0xf5, 0x5f, 0xfb, 0xc6, 0x45, 0x93, 0x23, 0x75, 0xd9, 0x8b, 0x5c, 0xde, 0x7c,
		0x15, 0x13, 0x1e, 0xb0, 0xdb, 0x18, 0x1a, 0xcd, 0xa5, 0x01, 0x42, 0x00, 0x21, 0x43, 0x20, 0x44,
		0xd6, 0x5c, 0xda, 0x95, 0xb1, 0xf6, 0x82, 0xf9, 0x2e, 0xdf, 0x4c, 0x38, 0x8b, 0xcb, 0xa2, 0xc8,
		0x7b, 0xf8, 0x95, 0x8b, 0x41, 0x3b, 0xbf, 0xae, 0x9b, 0x14, 0x2e, 0xd3, 0xc2, 0x6e, 0x62, 0xd8,
		0x4d, 0x4d, 0x0b, 0x26, 0x87, 0x38, 0x03, 0xd4, 0xf9, 0x76, 0x7e, 0xbf, 0x0a, 0xc7, 0x16, 0xae,
		0xab, 0x64, 0x1c, 0x33, 0xf4, 0xf2, 0xeb, 0x53, 0x16, 0x61, 0x7d, 0x12, 0x5a, 0x4b, 0x15, 0x90,
		0xb7, 0xf3, 0xeb, 0xfd, 0x79, 0x6a, 0x5f, 0x0a, 0x7b, 0xfa, 0xce, 0xfe, 0xe7, 0xf5, 0x7f, 0x06,
		0xdf, 0xff, 0x36, 0x59, 0xfd, 0xfb, 0xdf, 0xff, 0x73, 0xfe, 0xbd, 0x87, 0x86, 0xb4, 0x25, 0xef,
		0xcd, 0x8b, 0x6d, 0xf9, 0x28, 0x1c, 0xcd, 0xe5, 0xd0, 0xd6, 0xc6, 0x87, 0x27, 0x83, 0x27, 0x83,
		0x27, 0x83, 0x27, 0xdb, 0x66, 0x2d, 0x02, 0x7d, 0x36, 0x60, 0xf0, 0x61, 0x67, 0xe8, 0x47, 0x4b,
		0x3c, 0xf8, 0xf3, 0x9e, 0xe3, 0xa0, 0x3f, 0x1c, 0x0f, 0x2f, 0xce, 0x46, 0xc3, 0x8b, 0x23, 0xea,
		0x5c, 0x9a, 0xda, 0x0c, 0xf4, 0xa5, 0xdd, 0x98, 0xe2, 0x31, 0x9a, 0xd3, 0x1a, 0xb1, 0xd3, 0xf4,
		0xa3, 0x1d, 0x19, 0xb1, 0xce, 0x0f, 0x45, 0xd8, 0x91, 0x92, 0x59, 0x05, 0x7f, 0x70, 0xc7, 0xc2,
		0xad, 0x9b, 0x52, 0x40, 0xaf, 0xa0, 0x57, 0xd0, 0x2b, 0xe8, 0x15, 0xf4, 0x0a, 0x7a, 0x05, 0xbd,
		0x82, 0x5e, 0x41, 0xaf, 0xa0, 0xd7, 0xda, 0xf4, 0x4a, 0x72, 0x18, 0x66, 0x07, 0xb7, 0x12, 0x9c,
		0x8b, 0x01, 0xb1, 0x82, 0x58, 0x41, 0xac, 0x20, 0x56, 0x10, 0x2b, 0x88, 0x15, 0xc4, 0x0a, 0x62,
		0x05, 0xb1, 0xbe, 0x42, 0x62, 0xf5, 0x43, 0x47, 0xf8, 0xb6, 0x56, 0x62, 0x3a, 0xf5, 0x1c, 0x7b,
		0x7e, 0x0d, 0x08, 0x39, 0xb6, 0x96, 0x09, 0xa1, 0x65, 0xd7, 0x3e, 0xd8, 0x15, 0xec, 0x0a, 0x76,
		0x35, 0xcd, 0xae, 0x54, 0x05, 0xb8, 0x5b, 0xcc, 0x11, 0xe5, 0x45, 0xda, 0x2f, 0x18, 0x25, 0xba,
		0x7b, 0xb5, 0x99, 0x4c, 0x13, 0x9b, 0x89, 0xe2, 0x34, 0x55, 0x6d, 0x99, 0x2c, 0x6e, 0xd3, 0x65,
		0xcc, 0x84, 0x19, 0x33, 0x65, 0x2d, 0x9a, 0x34, 0x26, 0xdc, 0x23, 0x5e, 0x1d, 0xd4, 0xa6, 0x2e,
		0x1f, 0x58, 0xea, 0x7b, 0xa9, 0x34, 0x75, 0x12, 0xa0, 0x74, 0xf5, 0x2d, 0x45, 0x31, 0x29, 0x0f,
		0x6d, 0x26, 0xd1, 0x98, 0xe9, 0x33, 0x61, 0x02, 0xdb, 0x36, 0x85, 0xa6, 0x4c, 0xa2, 0x71, 0xd3,
		0x68, 0xdc, 0x44, 0x76, 0xc0, 0x54, 0xf2, 0x98, 0x4c, 0xc6, 0xdc, 0x8a, 0xc5, 0x92, 0xe9, 0xdc,
		0xba, 0xb6, 0x3e, 0x4c, 0xa3, 0xac, 0xe1, 0x90, 0x64, 0x34, 0x76, 0x16, 0xf1, 0x11, 0xf7, 0xad,
		0x32, 0x48, 0x8f, 0xbe, 0x6f, 0x9f, 0x1c, 0x8e, 0x23, 0xf1, 0x5b, 0xa5, 0x65, 0x47, 0xe5, 0x93,
		0x40, 0x8b, 0xbb, 0x3b, 0xe9, 0x32, 0x1b, 0x86, 0x4c, 0xe0, 0xd9, 0xd9, 0xe9, 0x60, 0xc8, 0xd1,
		0xef, 0x7c, 0xbb, 0xc4, 0xe1, 0xe5, 0xc5, 0xb0, 0xd0, 0x01, 0x9c, 0x55, 0xe2, 0xf7, 0xb7, 0xdc,
		0xda, 0x41, 0x7d, 0x18, 0x7f, 0xab, 0xa8, 0xbc, 0xa5, 0x75, 0xf6, 0x02, 0xdf, 0x9a, 0x11, 0xf8,
		0x57, 0x2a, 0x2f, 0x55, 0x11, 0x03, 0xf2, 0x72, 0xb5, 0x9f, 0x58, 0xa7, 0xbc, 0x4a, 0x71, 0x68,
		0x7e, 0xe7, 0x20, 0x76, 0x09, 0xb2, 0xd3, 0xfe, 0x9e, 0xcb, 0x4f, 0xeb, 0xcf, 0x82, 0xc0, 0xea,
		0x60, 0x75, 0xb0, 0x3a, 0x58, 0xfd, 0x48, 0x59, 0x9d, 0xbc, 0x3b, 0xe8, 0x4b, 0x16, 0x6f, 0xc4,
		0x28, 0x82, 0xa7, 0x9c, 0x61, 0xfd, 0x8f, 0x01, 0x0a, 0xe3, 0x2c, 0x77, 0xd8, 0x10, 0xc6, 0xd4,
		0x95, 0x74, 0xab, 0x3c, 0x53, 0x5b, 0xe4, 0x9b, 0x3a, 0xcf, 0xbd, 0x65, 0x6e, 0x38, 0x2e, 0xb0,
		0xb8, 0xcb, 0x26, 0xb6, 0xaa, 0x0a, 0x43, 0x37, 0x54, 0xa8, 0x0b, 0x63, 0xc4, 0xc0, 0x3b, 0xfa,
		0xf5, 0xa1, 0xc4, 0x23, 0x9d, 0xde, 0xe2, 0xf8, 0xc5, 0x8b, 0xf5, 0x3b, 0xad, 0x99, 0xf6, 0x39,
		0x7e, 0xf5, 0x82, 0x0f, 0xbe, 0x4c, 0x19, 0x8c, 0x69, 0x09, 0xa5, 0x86, 0xa8, 0x20, 0xa1, 0x7f,
		0x31, 0x1c, 0x8e, 0xc6, 0xc3, 0xe1, 0xe9, 0xf8, 0x6c, 0x7c, 0x7a, 0x79, 0x7e, 0xde, 0x1f, 0xf5,
		0x19, 0x0c, 0x46, 0xef, 0xa3, 0x72, 0xa5, 0x92, 0xee, 0x4f, 0x4f, 0xbd, 0x89, 0x15, 0x24, 0xbe,
		0xdf, 0xe9, 0x19, 0x26, 0xba, 0x91, 0x67, 0xeb, 0xf8, 0xed, 0xdd, 0xd4, 0xb3, 0x72, 0xcf, 0xcb,
		0xc9, 0x46, 0x5f, 0xbe, 0x93, 0x92, 0x12, 0xa4, 0x13, 0xee, 0x0a, 0x00, 0xab, 0x9d, 0x1b, 0x7f,
		0x52, 0xa0, 0xfe, 0xbc, 0x78, 0x13, 0x37, 0x5f, 0xd2, 0x37, 0x91, 0xfe, 0x26, 0x23, 0xd3, 0xf8,
		0xe6, 0x97, 0xf4, 0x3b, 0x7f, 0x99, 0x7f, 0xe5, 0xcf, 0xe9, 0x5b, 0x58, 0xf9, 0xcd, 0x17, 0x71,
		0x77, 0xe4, 0xd7, 0x36, 0x53, 0x75, 0xd8, 0xe3, 0x59, 0x48, 0x87, 0xb5, 0x80, 0x28, 0x6b, 0xcc,
		0xba, 0xbe, 0x4c, 0x7a, 0x47, 0x54, 0xf3, 0x19, 0x89, 0x27, 0x3f, 0x14, 0xae, 0x4d, 0x5f, 0x79,
		0x90, 0x07, 0xf5, 0x9b, 0x22, 0x70, 0x56, 0xe9, 0x50, 0xb2, 0x90, 0xa8, 0xf7, 0xec, 0x50, 0x16,
		0xf1, 0xb5, 0x9c, 0x55, 0xfa, 0x30, 0x8d, 0xec, 0xa5, 0xd1, 0xa0, 0xdd, 0xb5, 0xe7, 0xd8, 0xa5,
		0xe7, 0xd9, 0x95, 0xe7, 0xdd, 0x85, 0x9f, 0xef, 0xba, 0x6f, 0x98, 0x66, 0xe2, 0x3b, 0xb5, 0x73,
		0x69, 0xfd, 0x72, 0x69, 0x5e, 0xc4, 0x21, 0x6c, 0x50, 0x2e, 0x2c, 0x8a, 0xa2, 0x50, 0xf6, 0x3a,
		0x1d, 0x93, 0xf1, 0x6d, 0xad, 0x6f, 0x99, 0x6a, 0x9e, 0xe0, 0xbb, 0x74, 0xa2, 0xc9, 0xab, 0x9f,
		0xb7, 0x88, 0x9a, 0x4f, 0xf3, 0xc4, 0x1a, 0x1c, 0x77, 0xf0, 0xd2, 0x0d, 0x7a, 0x4c, 0xe2, 0x7b,
		0x0e, 0x62, 0xcc, 0x86, 0xc5, 0xa9, 0x20, 0x50, 0x22, 0x28, 0xf1, 0xc0, 0x29, 0x91, 0xfc, 0x54,
		0x10, 0x5f, 0x89, 0x3c, 0x7b, 0x69, 0x3c, 0x53, 0x99, 0x0d, 0x4e, 0x01, 0x75, 0xc0, 0x54, 0x19,
		0x33, 0x59, 0xc6, 0x4c, 0x57, 0x8b, 0x26, 0x8c, 0x1e, 0xba, 0x58, 0x60, 0x9d, 0xab, 0x2c, 0xc6,
		0x58, 0xe9, 0x3a, 0x67, 0xc9, 0x3a, 0x6f, 0xa9, 0xba, 0x99, 0x12, 0x75, 0x63, 0xa5, 0xe9, 0xe6,
		0x4a, 0xd2, 0xcd, 0x94, 0xa2, 0xb3, 0x55, 0xa2, 0xb1, 0x97, 0x9e, 0x1b, 0x2b, 0x39, 0x37, 0x55,
		0x6a, 0xce, 0x5f, 0x62, 0xfe, 0xfd, 0xd5, 0x34, 0xfb, 0xa0, 0xbc, 0x1f, 0x9a, 0xab, 0x74, 0x9c,
		0xb9, 0x64, 0x1c, 0x0c, 0x0b, 0x86, 0x05, 0xc3, 0x82, 0x61, 0xf7, 0x5e, 0x1b, 0xec, 0x25, 0xdd,
		0x8c, 0xa5, 0xdc, 0xcc, 0x25, 0xdc, 0x8c, 0x14, 0x63, 0xa2, 0x64, 0xdb, 0x54, 0xa9, 0xb6, 0xf1,
		0x9a, 0x5b, 0x73, 0xb5, 0xb6, 0x8c, 0x25, 0xd9, 0x46, 0x4a, 0xb1, 0x4d, 0x96, 0x60, 0x1f, 0xb3,
		0x1a, 0x1c, 0x08, 0x97, 0x5f, 0xa3, 0x1e, 0x70, 0x0f, 0xb5, 0x61, 0x29, 0x9d, 0xe6, 0x2b, 0x99,
		0x36, 0x5a, 0x2a, 0xcd, 0x53, 0x22, 0x8d, 0x4a, 0xce, 0xba, 0x95, 0x9c, 0x94, 0x3b, 0xad, 0x56,
		0x07, 0x6b, 0x37, 0x3f, 0x65, 0xdf, 0xef, 0x88, 0x76, 0xdc, 0xe3, 0x2c, 0xf4, 0xe3, 0xbc, 0x98,
		0x7a, 0x43, 0x02, 0xaa, 0x35, 0x0f, 0x25, 0x41, 0x80, 0x7d, 0xf8, 0x0e, 0x25, 0x00, 0x70, 0x27,
		0x35, 0x85, 0xb9, 0xc0, 0x9d, 0xd4, 0x3c, 0x10, 0xde, 0x0d, 0x6f, 0xa6, 0xc5, 0x5d, 0x6c, 0x47,
		0x61, 0x14, 0x49, 0x97, 0xde, 0x91, 0x15, 0x07, 0x87, 0x0f, 0x83, 0x0f, 0x83, 0x0f, 0x83, 0x0f,
		0xdb, 0xa2, 0xdb, 0x89, 0x17, 0xe8, 0xfe, 0x88, 0xc1, 0x7d, 0x8d, 0x70, 0x3d, 0x0a, 0x53, 0xc6,
		0xf1, 0x14, 0x57, 0x66, 0x98, 0x59, 0x76, 0xeb, 0xb9, 0x22, 0xfe, 0xa9, 0x65, 0x4c, 0x26, 0xe3,
		0x46, 0x14, 0xf6, 0xd1, 0x8e, 0x8e, 0x4f, 0x75, 0xc8, 0x95, 0x6a, 0x59, 0x1d, 0x1e, 0xe7, 0x1d,
		0xc0, 0xa8, 0x60, 0xd4, 0x03, 0x67, 0x54, 0x9c, 0x77, 0x60, 0x0b, 0x97, 0xd9, 0x4c, 0x12, 0xa7,
		0x69, 0x6a, 0xcb, 0x44, 0x71, 0x9b, 0x2a, 0x63, 0x26, 0xcb, 0x98, 0xe9, 0x6a, 0xd1, 0x84, 0x31,
		0x21, 0x1d, 0xce, 0x3b, 0x6c, 0x63, 0x23, 0x9c, 0x77, 0x28, 0x97, 0x82, 0xf3, 0x0e, 0x9d, 0x09,
		0xb5, 0x2d, 0x9c, 0x77, 0xa8, 0x27, 0x07, 0xe7, 0x1d, 0x3a, 0x79, 0xde, 0x21, 0x52, 0x5e, 0xa8,
		0x3c, 0xfd, 0xc4, 0x87, 0xb1, 0xb9, 0x04, 0x50, 0x2c, 0x28, 0x16, 0x14, 0x0b, 0x8a, 0x6d, 0x99,
		0x62, 0x99, 0xec, 0x11, 0x40, 0x76, 0x5f, 0x90, 0x7d, 0x9e, 0x80, 0x53, 0x4e, 0xbe, 0xec, 0x17,
		0x25, 0xf5, 0x39, 0x25, 0x0d, 0x8a, 0x92, 0x06, 0xac, 0xcc, 0x5c, 0x94, 0x74, 0xc6, 0x29, 0x69,
		0x58, 0x94, 0x34, 0xe4, 0x94, 0x74, 0x5e, 0x94, 0x74, 0xce, 0x29, 0x69, 0x54, 0x94, 0x34, 0xe2,
		0x94, 0x34, 0x2e, 0x4a, 0x1a, 0x73, 0x4a, 0xba, 0x28, 0x4a, 0xca, 0x3a, 0x87, 0x21, 0x8e, 0x2a,
		0xe7, 0xdb, 0x45, 0x5b, 0xb5, 0x8b, 0xb7, 0xfc, 0xa2, 0x4e, 0x79, 0xcf, 0xc0, 0x14, 0xac, 0x1a,
		0x4b, 0xef, 0xb6, 0x0d, 0x39, 0xa9, 0x81, 0x1b, 0x18, 0x90, 0x93, 0x9a, 0xb7, 0x33, 0x03, 0x72,
		0x52, 0xe3, 0x36, 0x34, 0x20, 0x27, 0x35, 0x6d, 0xe7, 0x06, 0xe4, 0x8c, 0x98, 0x2f, 0xcc, 0x59,
		0x5a, 0xb2, 0x89, 0x35, 0x46, 0xe8, 0xde, 0x99, 0xd0, 0x7d, 0x79, 0x60, 0x84, 0xb9, 0x5b, 0xc1,
		0x5c, 0x06, 0xae, 0xde, 0x47, 0xf8, 0x8e, 0xf0, 0x1d, 0xe1, 0x7b, 0xe9, 0x7b, 0x61, 0xbb, 0x7a,
		0x7f, 0xd1, 0x2e, 0xc5, 0xbe, 0xf7, 0xee, 0xee, 0x8d, 0xdd, 0xe7, 0x39, 0x97, 0x86, 0x4b, 0x3d,
		0x4d, 0x1b, 0xc2, 0xb6, 0x0d, 0xa2, 0x29, 0xc3, 0x68, 0xdc, 0x40, 0x1a, 0x37, 0x94, 0x1d, 0x30,
		0x98, 0x7c, 0x70, 0x69, 0xe1, 0x52, 0xcf, 0x3a, 0x16, 0x0f, 0x97, 0x7a, 0xee, 0xf1, 0x45, 0x70,
		0xa9, 0x27, 0x8b, 0xce, 0xe3, 0x52, 0x4f, 0x22, 0x55, 0xc1, 0xa5, 0x9e, 0x87, 0xe3, 0xa3, 0xf8,
		0x47, 0x3f, 0x98, 0x4b, 0x3d, 0xdf, 0xf2, 0x45, 0x26, 0x7e, 0xf8, 0x60, 0x2e, 0x30, 0x49, 0x85,
		0x21, 0x2e, 0x41, 0x5c, 0x82, 0xb8, 0x04, 0x71, 0x09, 0xe2, 0x12, 0xc4, 0x25, 0x88, 0x4b, 0x00,
		0x9a, 0x88, 0x4b, 0x10, 0x97, 0x20, 0x2e, 0x39, 0xcc, 0xb8, 0xa4, 0xd3, 0x9b, 0x3a, 0x2c, 0x1d,
		0x33, 0x8b, 0x1e, 0x85, 0xa7, 0x73, 0x66, 0xd1, 0x10, 0x19, 0xeb, 0xa0, 0x99, 0x0b, 0x65, 0xe9,
		0xa4, 0xc9, 0x35, 0xc3, 0x4c, 0x9d, 0x35, 0xf3, 0xf1, 0xbb, 0xdb, 0x61, 0x73, 0xe5, 0x8c, 0xff,
		0x09, 0x5b, 0x99, 0x83, 0xd5, 0xc1, 0xe6, 0x9b, 0x5f, 0xc4, 0x5d, 0xfc, 0x25, 0xfc, 0x35, 0xfd,
		0xe2, 0x37, 0xf9, 0xaf, 0x7b, 0xe8, 0x21, 0xdc, 0x96, 0x45, 0x44, 0x0f, 0x61, 0x03, 0x33, 0xf7,
		0xfa, 0x7a, 0x08, 0x73, 0x74, 0x31, 0xe9, 0xb8, 0x39, 0xeb, 0x4c, 0x47, 0xe1, 0x37, 0x2d, 0xaa,
		0x3c, 0xb5, 0xaa, 0x77, 0x57, 0xc5, 0x7b, 0x14, 0x8d, 0x9b, 0x3b, 0xa5, 0xcc, 0xcd, 0x14, 0xb8,
		0xbe, 0xda, 0xd5, 0xfb, 0x64, 0x4d, 0x45, 0xa5, 0x52, 0xd0, 0xae, 0x28, 0x66, 0x03, 0x35, 0x6c,
		0x59, 0xfd, 0xea, 0xa9, 0x5b, 0x75, 0x65, 0xa9, 0xf6, 0x89, 0x8a, 0x6a, 0xd5, 0x93, 0x8f, 0x5a,
		0x09, 0x3b, 0x09, 0x62, 0x2d, 0x6e, 0xfd, 0x7a, 0x49, 0xea, 0xde, 0xc3, 0xbd, 0xac, 0xdf, 0x7f,
		0xb8, 0x81, 0x0a, 0x3f, 0x27, 0xbd, 0x7f, 0xfc, 0x71, 0x4d, 0xff, 0xf4, 0x53, 0x24, 0xad, 0x7f,
		0x58, 0x3f, 0xa4, 0x9a, 0xf6, 0x43, 0x13, 0x0d, 0x23, 0xda, 0x32, 0x2a, 0x6e, 0x09, 0x65, 0x2f,
		0xab, 0xa1, 0x93, 0xa2, 0xde, 0xf0, 0x59, 0xd9, 0xd0, 0x79, 0xe1, 0x6d, 0xbe, 0x69, 0xc1, 0x33,
		0xf7, 0xde, 0xcb, 0xd8, 0x51, 0x5e, 0x44, 0xe2, 0x96, 0x8b, 0x6a, 0xb3, 0xb2, 0xf2, 0xbf, 0x2c,
		0xbe, 0xe7, 0xbf, 0x7f, 0x79, 0xf7, 0xdb, 0x0f, 0x4d, 0xa7, 0x88, 0x70, 0xb3, 0xb1, 0xa8, 0x3d,
		0x6e, 0xe1, 0x45, 0x10, 0x38, 0x70, 0x8e, 0x9d, 0xc3, 0x75, 0x65, 0xda, 0xf1, 0x8e, 0x0f, 0xcb,
		0x61, 0xbf, 0xe1, 0x4d, 0xa4, 0x56, 0xb5, 0xdc, 0x0d, 0x41, 0xa0, 0x3d, 0x00, 0xa8, 0xa1, 0xb8,
		0xe6, 0x5d, 0x7d, 0x35, 0xdd, 0xdc, 0x5f, 0x37, 0x2a, 0xcc, 0x72, 0x6f, 0xd3, 0x0c, 0x57, 0x9e,
		0xe9, 0x65, 0x3f, 0xbc, 0xcd, 0xb1, 0x2a, 0xea, 0x5b, 0xbd, 0x12, 0x97, 0xda, 0xa5, 0x2b, 0x4d,
		0x4a, 0x52, 0xb8, 0x4a, 0x4d, 0x9a, 0x5a, 0x75, 0xb2, 0xd2, 0x10, 0x32, 0xc3, 0xcd, 0x58, 0xca,
		0xc1, 0xcb, 0xad, 0xb5, 0x4b, 0x2a, 0x72, 0xdd, 0xb8, 0x9a, 0x7f, 0xb9, 0xf9, 0xc2, 0xb0, 0x65,
		0x90, 0xcc, 0xea, 0x68, 0x44, 0x83, 0xa6, 0x15, 0xcd, 0x9a, 0x52, 0xd0, 0x34, 0x9d, 0x98, 0x37,
		0x95, 0x98, 0x2a, 0x31, 0x93, 0xb6, 0x92, 0xbe, 0x68, 0xd2, 0xd8, 0x63, 0xde, 0x36, 0x22, 0xa5,
		0xc4, 0x26, 0x83, 0xcc, 0x3b, 0x42, 0x44, 0x51, 0xcf, 0x68, 0x54, 0xdd, 0xfc, 0x30, 0xfd, 0xca,
		0x4b, 0x6c, 0x94, 0x88, 0xce, 0xbe, 0x7d, 0xa3, 0x53, 0xe3, 0xf3, 0x49, 0x98, 0x58, 0xfd, 0x6e,
		0x86, 0xa8, 0x2c, 0xce, 0xb2, 0xf0, 0xfa, 0x57, 0x60, 0xa3, 0xb6, 0xc7, 0xdc, 0x36, 0x60, 0x3d,
		0xb7, 0xd9, 0x87, 0xdb, 0x84, 0xdb, 0x6c, 0xdf, 0x6d, 0xd6, 0x3d, 0x6a, 0xda, 0x93, 0xc1, 0x5f,
		0x89, 0xa7, 0x3c, 0x19, 0xdb, 0x4a, 0x3a, 0xd2, 0xfb, 0xd6, 0xe0, 0x72, 0xa3, 0x02, 0x93, 0x6e,
		0x8c, 0x59, 0x73, 0x3a, 0x9a, 0x95, 0x5f, 0x37, 0x2e, 0xaf, 0xa6, 0x28, 0x9f, 0xe6, 0x2e, 0x8f,
		0xe6, 0xc8, 0x65, 0x91, 0x94, 0x37, 0xf3, 0x66, 0xb3, 0x78, 0xca, 0x93, 0xcd, 0xa6, 0xfc, 0x1b,
		0x97, 0x0f, 0xaf, 0xdc, 0x09, 0x74, 0xd6, 0xa4, 0xcd, 0xd6, 0xf3, 0x4a, 0x1b, 0x37, 0x18, 0x82,
		0xa6, 0xac, 0x97, 0x20, 0xaf, 0x46, 0x59, 0x96, 0x4b, 0x5d, 0x76, 0xcb, 0x56, 0x27, 0x49, 0x5f,
		0x07, 0x49, 0x71, 0x29, 0x09, 0x65, 0xd9, 0x6b, 0x3e, 0x15, 0xc3, 0xc1, 0xe5, 0xf0, 0x72, 0x34,
		0x1e, 0x5c, 0x9e, 0xbf, 0xbe, 0x39, 0x69, 0x29, 0xb5, 0x7a, 0x6d, 0x2a, 0xe2, 0x78, 0xdb, 0x04,
		0x61, 0x62, 0xd9, 0x20, 0xd8, 0x2b, 0xc1, 0x97, 0x6c, 0x3c, 0xa0, 0x0b, 0xd0, 0x05, 0xe8, 0x02,
		0x74, 0x01, 0xba, 0x00, 0x5d, 0x80, 0x2e, 0x40, 0x17, 0x4a, 0x74, 0x99, 0x2a, 0x9b, 0x60, 0x33,
		0xb0, 0x24, 0xc5, 0x69, 0x37, 0xde, 0x17, 0x04, 0xc8, 0x00, 0x64, 0x00, 0x32, 0x15, 0x74, 0x6b,
		0xb1, 0xef, 0x38, 0x55, 0xd9, 0x6a, 0xab, 0xbb, 0xf1, 0xb8, 0xbe, 0xec, 0x9a, 0x74, 0xcd, 0xa7,
		0xe9, 0x8e, 0x4f, 0xdb, 0x05, 0x7f, 0x63, 0x63, 0xd2, 0x76, 0x52, 0x2d, 0xa2, 0x28, 0x7a, 0xea,
		0x6f, 0xec, 0xee, 0x48, 0x3d, 0xed, 0xb5, 0x5a, 0x75, 0x4e, 0xd7, 0xcb, 0xbb, 0xe4, 0x95, 0x91,
		0xf8, 0xfa, 0xcd, 0x17, 0x56, 0x77, 0x7b, 0xb1, 0xb9, 0xa7, 0xfe, 0xde, 0x61, 0x4f, 0xed, 0xc5,
		0xb6, 0xab, 0x09, 0x5c, 0xf3, 0x62, 0x1c, 0xf8, 0x62, 0xf8, 0x62, 0xf8, 0x62, 0x36, 0x5f, 0x7c,
		0x1b, 0x86, 0xbe, 0x6c, 0x56, 0xaf, 0xf2, 0xec, 0x7f, 0xfb, 0xdd, 0x36, 0x4a, 0xfe, 0xcc, 0xb3,
		0x65, 0x20, 0x6e, 0x7d, 0x8a, 0x8d, 0xdb, 0xb5, 0xf1, 0x60, 0xa4, 0x60, 0xa4, 0x60, 0xa4, 0x60,
		0xa4, 0x48, 0x8c, 0x54, 0x10, 0x78, 0xb6, 0xeb, 0x48, 0x3b, 0x89, 0xc8, 0xec, 0x54, 0x61, 0x48,
		0x98, 0x2a, 0x98, 0x2a, 0x98, 0x2a, 0x98, 0x2a, 0x12, 0x53, 0x45, 0x68, 0xa2, 0x60, 0x9a, 0x60,
		0x9a, 0x60, 0x9a, 0x60, 0x9a, 0x28, 0x4c, 0x53, 0x10, 0x78, 0x24, 0x76, 0x29, 0x1d, 0x07, 0x46,
		0x09, 0x46, 0x09, 0x46, 0x09, 0x46, 0xa9, 0x99, 0x51, 0x4a, 0x09, 0x87, 0x66, 0xc7, 0x3a, 0x1f,
		0x09, 0x86, 0x09, 0x86, 0x09, 0x86, 0x89, 0xcd, 0x30, 0x2d, 0x36, 0xa9, 0x9f, 0x97, 0x1b, 0x76,
		0xa9, 0xb7, 0x8c, 0x76, 0x5a, 0x34, 0x4a, 0xb6, 0x48, 0x34, 0xdd, 0x0e, 0xf5, 0x72, 0xd4, 0x20,
		0xf6, 0x28, 0x46, 0x1d, 0xac, 0x8c, 0xea, 0x38, 0x9e, 0xd6, 0x14, 0xc3, 0x9e, 0xad, 0x0e, 0x9b,
		0x6d, 0x39, 0x1f, 0xcb, 0x66, 0xfa, 0xea, 0x1c, 0x90, 0x5c, 0xb8, 0xba, 0xa6, 0x2d, 0x34, 0x9b,
		0xf3, 0x6b, 0xb3, 0x4a, 0x72, 0xe5, 0xf4, 0xfa, 0x9c, 0x4e, 0xac, 0x33, 0xec, 0xf7, 0x97, 0xbd,
		0x24, 0xd7, 0x77, 0x3c, 0x12, 0xb2, 0xc9, 0x06, 0x02, 0xd8, 0x00, 0x6c, 0x00, 0x36, 0x6c, 0x60,
		0x83, 0x63, 0x04, 0xc5, 0x07, 0xc1, 0x31, 0x02, 0x1c, 0x23, 0x38, 0xd6, 0x39, 0xc1, 0x31, 0x82,
		0x8d, 0x97, 0x1c, 0x6b, 0xa1, 0x13, 0xca, 0x0e, 0x0e, 0xeb, 0x03, 0x02, 0x5e, 0x00, 0x2f, 0x80,
		0x17, 0xc0, 0x0b, 0xe0, 0x05, 0xf0, 0x02, 0x78, 0x01, 0xbc, 0x30, 0xc0, 0x0b, 0x4d, 0xef, 0x86,
		0xe2, 0x60, 0x80, 0x16, 0x40, 0x0b, 0xa0, 0x05, 0xd0, 0x02, 0x68, 0x01, 0xb4, 0x00, 0x5a, 0x00,
		0x2d, 0x94, 0xd0, 0x92, 0x44, 0xae, 0xd0, 0xd2, 0x26, 0x4f, 0xbc, 0x6c, 0x19, 0x17, 0x28, 0x03,
		0x94, 0x01, 0xca, 0x00, 0x65, 0x80, 0x32, 0x40, 0x19, 0xa0, 0x0c, 0x50, 0x86, 0x0f, 0x65, 0x68,
		0xd2, 0x30, 0x25, 0x63, 0x02, 0x61, 0x80, 0x30, 0x40, 0x18, 0x20, 0x0c, 0x10, 0x06, 0x08, 0x03,
		0x84, 0x01, 0xc2, 0xd0, 0x7c, 0x02, 0xd7, 0xe2, 0x16, 0x2e, 0x72, 0x2d, 0xb4, 0x72, 0xc3, 0xed,
		0xb8, 0x15, 0x69, 0x62, 0xbf, 0x97, 0x7a, 0xfc, 0x97, 0xe4, 0xfe, 0x33, 0xfd, 0xba, 0xbf, 0x37,
		0x55, 0x21, 0x0b, 0x57, 0xe5, 0xbe, 0x78, 0x55, 0x6e, 0xf1, 0x4d, 0xe3, 0xc2, 0xdc, 0x06, 0x36,
		0xfd, 0x50, 0x2e, 0xcc, 0xa5, 0xb9, 0x78, 0xce, 0x32, 0x72, 0x6d, 0xee, 0x52, 0x39, 0x3b, 0x76,
		0x77, 0x6e, 0x14, 0x45, 0x34, 0xd7, 0x00, 0xae, 0x0f, 0x84, 0xeb, 0xff, 0x4c, 0x1b, 0x78, 0x5c,
		0xff, 0x47, 0x66, 0x02, 0x6b, 0x5f, 0xff, 0xe7, 0xc5, 0xb6, 0x1f, 0x86, 0xd1, 0xad, 0x70, 0xbe,
		0xda, 0xae, 0xd4, 0xd2, 0xd1, 0x54, 0x7d, 0x24, 0x37, 0x46, 0x45, 0x02, 0x10, 0x09, 0x40, 0x24,
		0x00, 0xd9, 0x12, 0x80, 0x54, 0xf9, 0xbf, 0x33, 0xe4, 0xff, 0xb6, 0x24, 0x9d, 0x06, 0xfd, 0xe1,
		0x78, 0x78, 0x71, 0x36, 0x1a, 0x5e, 0x1c, 0x50, 0xd2, 0x29, 0x5d, 0x73, 0xc7, 0x9b, 0x07, 0xcc,
		0xa7, 0x64, 0x8c, 0x3c, 0xe0, 0xb1, 0xe5, 0x01, 0xeb, 0x35, 0x49, 0x9b, 0x45, 0xf6, 0x6d, 0x12,
		0xb8, 0xbe, 0xb4, 0x67, 0x72, 0x76, 0x2b, 0x15, 0x09, 0xcc, 0x6c, 0x0c, 0x0a, 0x96, 0x01, 0xcb,
		0x80, 0x65, 0xc0, 0x32, 0x60, 0x19, 0xb0, 0x0c, 0x58, 0x06, 0x2c, 0xc3, 0xc4, 0x32, 0x89, 0xaf,
		0x3d, 0xdf, 0x0b, 0xbe, 0xa6, 0x6e, 0x20, 0xa0, 0x21, 0x99, 0xd5, 0x21, 0xc1, 0x31, 0xe0, 0x18,
		0x70, 0x0c, 0x38, 0x06, 0x1c, 0x03, 0x8e, 0x01, 0xc7, 0x80, 0x63, 0x18, 0x38, 0xe6, 0xab, 0x94,
		0x91, 0xf0, 0xbd, 0x6f, 0xd2, 0x8e, 0xa4, 0xf2, 0x42, 0x82, 0xdd, 0xa5, 0x8d, 0x11, 0x41, 0x31,
		0xa0, 0x18, 0x50, 0x0c, 0x1b, 0xc5, 0xa0, 0xb4, 0x9c, 0x1d, 0x63, 0x50, 0x5a, 0xde, 0x19, 0x7c,
		0x41, 0x69, 0x39, 0xf0, 0xa5, 0xf0, 0x92, 0x7d, 0x27, 0xca, 0x8e, 0xb1, 0x51, 0xdc, 0x71, 0x91,
		0x0f, 0x05, 0x60, 0x01, 0xb0, 0x00, 0x58, 0xd8, 0x80, 0xe5, 0x53, 0x14, 0xd9, 0xd3, 0x78, 0xd6,
		0x68, 0xb1, 0x59, 0x47, 0x7f, 0xbb, 0x45, 0x54, 0x7c, 0x4b, 0xb6, 0x17, 0x78, 0xda, 0x13, 0xbe,
		0x7d, 0x4a, 0x76, 0xcf, 0xc5, 0xea, 0xf8, 0xb1, 0x16, 0x4a, 0x7b, 0xc1, 0x9d, 0xdd, 0x27, 0xbb,
		0xf2, 0x62, 0x55, 0x80, 0xe3, 0x87, 0xb1, 0x74, 0xed, 0x01, 0xd9, 0xd5, 0x17, 0xeb, 0xcf, 0x1f,
		0x46, 0x91, 0x74, 0xed, 0x33, 0x8a, 0xf1, 0x87, 0xe5, 0x8f, 0x9f, 0xbe, 0x9e, 0x21, 0xc5, 0xf8,
		0xe7, 0x5b, 0x9e, 0x3f, 0x15, 0x70, 0x4e, 0x21, 0x60, 0xb4, 0x29, 0x40, 0xc9, 0xbf, 0xb2, 0x83,
		0xde, 0xf6, 0x88, 0x42, 0xc0, 0x78, 0x53, 0x80, 0x70, 0xbe, 0xda, 0xca, 0xf9, 0xe6, 0xda, 0x63,
		0x0a, 0x01, 0x17, 0xe5, 0x02, 0xb2, 0x6f, 0x70, 0x41, 0x21, 0xe0, 0x72, 0x53, 0x40, 0x18, 0xc9,
		0x40, 0xba, 0xf6, 0xe5, 0xd1, 0x5c, 0xa3, 0xb2, 0x75, 0x82, 0x1a, 0xc5, 0x7a, 0x3b, 0x86, 0x5f,
		0x4c, 0xcf, 0xc4, 0xba, 0x20, 0x1f, 0x3e, 0xb7, 0x1f, 0x34, 0x97, 0xac, 0x6c, 0x5b, 0xdd, 0x13,
		0x6b, 0x48, 0x3e, 0xfa, 0xd2, 0x76, 0xd3, 0xdc, 0x3a, 0xb3, 0x45, 0x6b, 0x27, 0xd6, 0x25, 0xf9,
		0xe0, 0x05, 0xab, 0x31, 0xb1, 0x46, 0xe4, 0xc3, 0x17, 0xbc, 0x0e, 0xcd, 0x25, 0x3f, 0xdb, 0x9c,
		0x42, 0xa3, 0x3d, 0x9a, 0x5d, 0xa3, 0xcf, 0x4d, 0xf6, 0xc4, 0x3a, 0xc7, 0x1d, 0x3d, 0x1b, 0xaf,
		0x2b, 0x70, 0xe6, 0x47, 0x78, 0x6c, 0xa1, 0x94, 0x78, 0x6a, 0x1e, 0xa0, 0xad, 0x8d, 0xd7, 0x2c,
		0x4a, 0xeb, 0x23, 0x4a, 0x43, 0x94, 0x76, 0x7c, 0x51, 0x5a, 0xdd, 0x93, 0x46, 0xab, 0x8b, 0xd6,
		0x95, 0x81, 0xf6, 0xa6, 0x9e, 0x54, 0x74, 0x07, 0x9a, 0xd7, 0xc6, 0x6d, 0x38, 0x6d, 0xcd, 0x52,
		0x2d, 0x64, 0x8b, 0x99, 0x72, 0x51, 0x9b, 0x5a, 0xdc, 0xd4, 0x8b, 0x9c, 0x6d, 0xb1, 0xb3, 0x2d,
		0x7a, 0x83, 0x8b, 0x9f, 0x28, 0x75, 0xdb, 0x34, 0xa4, 0x68, 0x9a, 0xba, 0xd9, 0xd0, 0xcd, 0xdf,
		0x9e, 0x57, 0x33, 0x85, 0x22, 0x12, 0xa4, 0x71, 0x68, 0xd3, 0x39, 0x3c, 0x69, 0x9d, 0xd5, 0xf4,
		0x8b, 0xe3, 0x46, 0x4e, 0x44, 0xb4, 0x42, 0x96, 0x39, 0x17, 0x8f, 0x78, 0xd0, 0xb3, 0xe7, 0x41,
		0xbd, 0x07, 0xca, 0x61, 0x87, 0xf3, 0x61, 0xbf, 0x8d, 0x68, 0x9f, 0x36, 0xcb, 0xab, 0xcc, 0x22,
		0x3f, 0xa6, 0x1d, 0x36, 0xcb, 0xa6, 0x84, 0xb1, 0xe7, 0x44, 0x3d, 0x92, 0x41, 0xbf, 0xbf, 0xa5,
		0xd2, 0x4e, 0xaa, 0x4c, 0x41, 0x3e, 0xe4, 0x5c, 0x2b, 0x49, 0x62, 0xb1, 0x7c, 0x4c, 0x6f, 0x3e,
		0xe4, 0x80, 0x78, 0x48, 0xef, 0x81, 0x26, 0xaa, 0x2b, 0x0c, 0x9a, 0xe9, 0x23, 0x49, 0x06, 0x20,
		0x1f, 0x74, 0xa1, 0x8d, 0x13, 0xeb, 0x9c, 0x70, 0xd0, 0xb9, 0x2e, 0x4e, 0xac, 0x11, 0x8d, 0x3a,
		0x1e, 0xec, 0xc6, 0x64, 0x93, 0xae, 0x3d, 0x41, 0xe3, 0x8d, 0xc3, 0x52, 0xc4, 0x6d, 0xba, 0xa7,
		0x01, 0xba, 0x05, 0xdd, 0x82, 0x6e, 0x5b, 0xa6, 0x5b, 0xaa, 0x0d, 0xca, 0x57, 0x4b, 0xb8, 0xcc,
		0x1b, 0x98, 0xab, 0x24, 0xcd, 0xb8, 0x91, 0xb9, 0x0a, 0xd7, 0x6c, 0x1b, 0x9a, 0xab, 0xb8, 0xcd,
		0xb7, 0xb1, 0xb9, 0xca, 0xdf, 0x7c, 0x1b, 0x9c, 0xab, 0x40, 0xce, 0xb8, 0xd1, 0xb9, 0x8a, 0xe8,
		0x8c, 0x1b, 0x9e, 0xb9, 0x20, 0xee, 0x8d, 0xcf, 0x5c, 0x10, 0xf7, 0x06, 0x68, 0x2e, 0x88, 0x6d,
		0x23, 0xf4, 0x00, 0xc2, 0x1d, 0xde, 0x0d, 0xd2, 0x1d, 0x62, 0x28, 0x37, 0x4a, 0xb7, 0x88, 0xa1,
		0xdd, 0x30, 0xdd, 0x21, 0x84, 0x70, 0xe3, 0x74, 0x8b, 0x14, 0xe2, 0x0d, 0xd4, 0x2d, 0x52, 0x68,
		0x37, 0x52, 0xb7, 0x08, 0xa1, 0xde, 0x50, 0xdd, 0x22, 0x86, 0x7a, 0x63, 0x75, 0xab, 0x18, 0xd2,
		0x0d, 0xd6, 0x5d, 0x52, 0x68, 0x36, 0x5a, 0x8f, 0x20, 0xe6, 0x35, 0xba, 0x9d, 0xf4, 0x8b, 0x17,
		0xeb, 0x77, 0x5a, 0x37, 0xdc, 0x53, 0xfa, 0xd5, 0x0b, 0x3e, 0xf8, 0x32, 0x8d, 0x45, 0x1a, 0xd6,
		0x57, 0xf7, 0x7e, 0x15, 0x8f, 0x85, 0x91, 0xfa, 0x17, 0xc3, 0xe1, 0x68, 0x3c, 0x1c, 0x9e, 0x8e,
		0xcf, 0xc6, 0xa7, 0x97, 0xe7, 0xe7, 0xfd, 0x51, 0xbf, 0x41, 0x9a, 0xa5, 0xf7, 0x51, 0xb9, 0x52,
		0x49, 0xf7, 0xa7, 0xa7, 0xde, 0xc4, 0x0a, 0x12, 0xdf, 0x37, 0xfa, 0xa6, 0x1b, 0x76, 0x49, 0xcd,
		0xc7, 0x31, 0xd5, 0x2d, 0x75, 0xad, 0x3f, 0xe7, 0x09, 0xc9, 0xe6, 0xbc, 0x65, 0xa4, 0x79, 0xea,
		0xa7, 0x28, 0x2a, 0xfe, 0xf5, 0x37, 0x27, 0xfb, 0xeb, 0xbb, 0xec, 0xb9, 0xd1, 0x45, 0x7d, 0x31,
		0x46, 0x67, 0xbb, 0xa8, 0x47, 0x51, 0x84, 0xee, 0xe9, 0x15, 0xd3, 0x3f, 0xbb, 0x5f, 0xe6, 0xf1,
		0x77, 0x4d, 0xff, 0xf4, 0xe9, 0x13, 0xda, 0xa5, 0x93, 0xa9, 0xd2, 0xf6, 0x57, 0x8c, 0x3e, 0xe9,
		0x0d, 0xac, 0xf6, 0xa1, 0xf4, 0x49, 0x6f, 0xd6, 0x99, 0xbb, 0x0d, 0x17, 0xcf, 0xd6, 0x18, 0xfd,
		0x0d, 0xa1, 0x1e, 0xd4, 0x9d, 0x7f, 0x53, 0xf3, 0x5e, 0x61, 0x9e, 0xd9, 0xe7, 0x77, 0xbf, 0x09,
		0x7d, 0x79, 0x7a, 0xf6, 0x98, 0x9a, 0xde, 0xa6, 0xe3, 0xb4, 0xe3, 0x6a, 0x29, 0xf3, 0xdc, 0x3d,
		0x6d, 0x1f, 0x6a, 0x4f, 0x15, 0xa9, 0xb6, 0x31, 0x58, 0x79, 0x03, 0xb0, 0xce, 0x46, 0x1f, 0xf5,
		0x86, 0x5e, 0x5d, 0x3f, 0xdb, 0x78, 0x83, 0xae, 0xb1, 0xeb, 0x64, 0xd8, 0x70, 0xa3, 0x35, 0x30,
		0x95, 0x37, 0xca, 0xf2, 0xb9, 0xad, 0xa4, 0xa5, 0x45, 0x4d, 0xed, 0x57, 0xc8, 0x6f, 0xf6, 0x7e,
		0x91, 0xc1, 0x5d, 0x66, 0xc4, 0xaa, 0x05, 0x1d, 0x35, 0x5c, 0x65, 0x93, 0x26, 0x01, 0x4d, 0x9b,
		0x02, 0x90, 0x1d, 0x38, 0x6f, 0x7e, 0xc0, 0xbc, 0x4e, 0x51, 0x7f, 0x93, 0x43, 0xfd, 0xf9, 0xab,
		0x3b, 0x1b, 0x1c, 0xfe, 0xbb, 0x63, 0x62, 0x8a, 0x6b, 0x83, 0xae, 0x6d, 0x2a, 0x62, 0x6d, 0xc7,
		0xf7, 0x89, 0x76, 0xc3, 0x87, 0xa0, 0xba, 0x3b, 0x5b, 0xfd, 0x38, 0x5c, 0x18, 0x5c, 0x58, 0x87,
		0x5d, 0xd8, 0x6d, 0x18, 0xfa, 0x52, 0x04, 0x75, 0x7c, 0x58, 0xdf, 0xe0, 0x92, 0xbc, 0x17, 0xca,
		0x7d, 0x10, 0x4a, 0x36, 0x03, 0xcd, 0xd2, 0x51, 0xb0, 0x40, 0xb1, 0x40, 0xc1, 0x98, 0x60, 0xcc,
		0x57, 0xc2, 0x98, 0xa3, 0x21, 0x18, 0xb3, 0x03, 0x8c, 0xe9, 0x4d, 0x6d, 0x2f, 0x70, 0xe5, 0x63,
		0x75, 0x27, 0x96, 0x7f, 0x12, 0x8e, 0x0b, 0x8e, 0xab, 0xc3, 0x8e, 0xab, 0x72, 0xff, 0xc5, 0x1a,
		0xfd, 0x16, 0x6b, 0xf6, 0x57, 0x84, 0xdb, 0x3a, 0x38, 0xb7, 0xd5, 0xb4, 0xbf, 0x21, 0xdc, 0x17,
		0xad, 0xfb, 0x0a, 0xec, 0xa9, 0x1f, 0x3e, 0xd8, 0x4e, 0x18, 0x68, 0x15, 0xfa, 0x35, 0xbc, 0xd8,
		0xda, 0x00, 0x70, 0x66, 0x70, 0x66, 0x1d, 0x76, 0x66, 0x57, 0x33, 0x5b, 0x68, 0xad, 0xea, 0xe8,
		0xac, 0x55, 0xf3, 0xa4, 0x4b, 0xbd, 0x13, 0x2d, 0xcd, 0x4e, 0xae, 0xcc, 0x4f, 0xa8, 0x78, 0x25,
		0x5f, 0xd6, 0x0e, 0xa7, 0xd3, 0x3a, 0x5b, 0xda, 0xfd, 0xed, 0x03, 0xd6, 0xda, 0x22, 0x1f, 0x6c,
		0x1d, 0x2f, 0x08, 0xb5, 0x1d, 0x27, 0x75, 0x4e, 0x38, 0x2f, 0x8e, 0x73, 0x97, 0x0d, 0x1a, 0x29,
		0x2f, 0x54, 0x9e, 0xae, 0x58, 0x00, 0x57, 0xb5, 0xc4, 0xa1, 0x7e, 0x09, 0xff, 0xee, 0x57, 0x51,
		0xab, 0xc4, 0x7d, 0xfb, 0xf4, 0xd7, 0xf2, 0x99, 0x5b, 0x27, 0xbf, 0x56, 0x01, 0xf6, 0x0b, 0xb3,
		0x34, 0xb1, 0xce, 0xda, 0xad, 0x69, 0x20, 0x72, 0xae, 0xcf, 0x25, 0x08, 0xf7, 0x22, 0x70, 0x2b,
		0x54, 0x2a, 0x16, 0x6f, 0x70, 0x59, 0x1d, 0x01, 0xee, 0x15, 0xee, 0xf5, 0x38, 0x93, 0x9c, 0xad,
		0xac, 0xcb, 0x45, 0x09, 0x4f, 0xed, 0x55, 0x99, 0x7d, 0xfe, 0x08, 0xd6, 0xe4, 0xab, 0x5f, 0x86,
		0x87, 0x0f, 0xb6, 0x75, 0x74, 0xd2, 0xaa, 0xbb, 0xcd, 0xf0, 0x49, 0x68, 0x2d, 0x55, 0xf5, 0x02,
		0xfa, 0xde, 0x9f, 0xc2, 0xfe, 0x9f, 0x77, 0xf6, 0xff, 0x3d, 0xb5, 0x2f, 0x7f, 0x9c, 0xdc, 0x9c,
		0xd8, 0xd7, 0xff, 0xd5, 0xeb, 0x68, 0x58, 0xfc, 0xfc, 0x36, 0x63, 0x2d, 0xb4, 0x17, 0x6b, 0xcf,
		0x89, 0x9b, 0xd8, 0x89, 0xc2, 0x28, 0xd5, 0xac, 0x45, 0x1f, 0x1e, 0x1c, 0x1e, 0xbc, 0xba, 0x1d,
		0xa9, 0xda, 0x26, 0xb1, 0x77, 0x2b, 0x62, 0xcf, 0xb1, 0x57, 0x15, 0x36, 0xae, 0x3e, 0x33, 0x79,
		0x35, 0x42, 0xe9, 0x70, 0x15, 0x5f, 0x72, 0xbd, 0x4e, 0xa6, 0xb5, 0xdb, 0xc2, 0x34, 0x69, 0x03,
		0xc3, 0xd5, 0xf6, 0xa5, 0xe9, 0xa9, 0x0c, 0xb2, 0xb6, 0x2e, 0x64, 0x07, 0x2f, 0x18, 0xdb, 0xb6,
		0xf0, 0x1e, 0x3a, 0xab, 0xdb, 0x79, 0xb4, 0x77, 0xfb, 0xa4, 0x65, 0x6c, 0x2b, 0xe9, 0x48, 0xef,
		0x9b, 0x24, 0xb8, 0x7f, 0x6e, 0x6d, 0x3c, 0x5c, 0xe6, 0x82, 0x36, 0xc1, 0x68, 0x13, 0xdc, 0x94,
		0xa3, 0xb7, 0xea, 0x56, 0xe2, 0x05, 0x7a, 0x34, 0x24, 0xb8, 0xc5, 0xe5, 0x02, 0xb7, 0xcf, 0xad,
		0x0d, 0x86, 0xdb, 0xe7, 0x1a, 0x4d, 0x05, 0xc7, 0xed, 0x73, 0xb4, 0x1d, 0x07, 0x0e, 0x75, 0x76,
		0x70, 0x0f, 0xdd, 0x16, 0x88, 0x89, 0x65, 0x83, 0x0e, 0x45, 0x6b, 0x00, 0x13, 0xd7, 0xef, 0xae,
		0x0c, 0x78, 0x01, 0xbc, 0x00, 0x5e, 0x00, 0x2f, 0x80, 0x17, 0xc0, 0x0b, 0xe0, 0x05, 0xf0, 0xf2,
		0xd2, 0x4b, 0xf6, 0x82, 0x28, 0xd1, 0xb6, 0xab, 0xc2, 0x28, 0x6e, 0x4e, 0x2f, 0xc5, 0xc1, 0x80,
		0x2f, 0xc0, 0x17, 0xe0, 0x0b, 0x2b, 0xbe, 0xe0, 0xe6, 0x7f, 0xe0, 0x0b, 0x6e, 0xfe, 0x07, 0xb4,
		0xbc, 0x52, 0x68, 0x91, 0x4a, 0x85, 0x8a, 0x8c, 0x5a, 0x16, 0xa3, 0x01, 0x5b, 0x80, 0x2d, 0xc0,
		0x16, 0x60, 0x0b, 0xb0, 0x05, 0xd8, 0x02, 0x6c, 0x01, 0xb6, 0xd0, 0x63, 0xcb, 0x5f, 0x89, 0x4c,
		0x24, 0x6d, 0xc6, 0xa5, 0x38, 0x24, 0x00, 0x06, 0x00, 0x03, 0x80, 0x01, 0xc0, 0x00, 0x60, 0x00,
		0x30, 0x00, 0x18, 0x00, 0x0c, 0x25, 0xc0, 0xf8, 0x22, 0xd6, 0xb6, 0x2b, 0xb4, 0xb0, 0xb5, 0x37,
		0x93, 0xcd, 0xe9, 0x65, 0x6d, 0x3c, 0xa0, 0x0b, 0xd0, 0x05, 0xe8, 0x02, 0x74, 0x01, 0xba, 0x00,
		0x5d, 0x80, 0x2e, 0x40, 0x17, 0x7a, 0x74, 0x49, 0xfd, 0x41, 0xa0, 0xbd, 0x20, 0xf1, 0xf4, 0x13,
		0x29, 0xc3, 0x6c, 0x0e, 0x0c, 0x98, 0x01, 0xcc, 0x00, 0x66, 0x00, 0x33, 0x80, 0x19, 0xc0, 0x0c,
		0x60, 0x06, 0x30, 0x43, 0x09, 0x33, 0x61, 0xa2, 0x09, 0xab, 0x76, 0x57, 0x46, 0x03, 0xb6, 0x00,
		0x5b, 0x80, 0x2d, 0xc0, 0x16, 0x60, 0x0b, 0xb0, 0x05, 0xd8, 0x02, 0x6c, 0x61, 0xc0, 0x16, 0xaa,
		0xba, 0xdd, 0xd5, 0xe1, 0x00, 0x2e, 0x00, 0x17, 0x80, 0x0b, 0xc0, 0x05, 0xe0, 0x02, 0x70, 0x01,
		0xb8, 0x00, 0x5c, 0x18, 0xc0, 0x85, 0xb4, 0x72, 0xb7, 0x64, 0x4c, 0x20, 0x0c, 0x10, 0x06, 0x08,
		0x03, 0x84, 0x01, 0xc2, 0x00, 0x61, 0x80, 0x30, 0x40, 0x18, 0x4a, 0x84, 0x89, 0x84, 0xf3, 0x55,
		0x6a, 0xca, 0x5e, 0xbb, 0x1b, 0x23, 0x02, 0x5f, 0x80, 0x2f, 0xc0, 0x17, 0x56, 0x7c, 0x41, 0xc3,
		0x3a, 0xe0, 0x0b, 0x1a, 0xd6, 0x01, 0x64, 0x00, 0x32, 0x44, 0xfd, 0x76, 0x57, 0x46, 0x03, 0xc0,
		0x00, 0x60, 0x00, 0x30, 0x00, 0x18, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x03, 0x80, 0xe1, 0x01, 0x98,
		0x58, 0x3a, 0x61, 0xe0, 0xc6, 0x76, 0xec, 0x05, 0x8e, 0xb4, 0xb3, 0xe3, 0x43, 0x8e, 0x2f, 0x85,
		0xb2, 0x9d, 0x30, 0x09, 0xb4, 0xa4, 0xa8, 0x8c, 0x79, 0x59, 0x04, 0x50, 0x07, 0xa8, 0x03, 0xd4,
		0x61, 0x45, 0x1d, 0x6c, 0x35, 0x01, 0x75, 0xb0, 0xd5, 0x04, 0xc0, 0x79, 0xe5, 0x80, 0x33, 0xcf,
		0xb0, 0x10, 0xee, 0x3b, 0xed, 0x1e, 0x1e, 0x60, 0x03, 0xb0, 0x01, 0xd8, 0x00, 0x6c, 0x00, 0x36,
		0x00, 0x1b, 0x80, 0x0d, 0xc0, 0x86, 0x1d, 0x6c, 0x68, 0xf6, 0xa1, 0xb6, 0x0f, 0x0d, 0xa0, 0x01,
		0xd0, 0x00, 0x68, 0x00, 0x34, 0x00, 0x1a, 0x00, 0x0d, 0x80, 0x06, 0x40, 0x43, 0x09, 0x34, 0x49,
		0xf0, 0x35, 0x08, 0x1f, 0x02, 0x3b, 0x52, 0xa1, 0x0e, 0x9d, 0xd0, 0xb7, 0xe9, 0xab, 0x84, 0x5f,
		0x16, 0x01, 0xc0, 0x01, 0xe0, 0x00, 0x70, 0x00, 0x38, 0x00, 0x1c, 0x00, 0x0e, 0x00, 0x07, 0x80,
		0x43, 0xf3, 0x89, 0x8a, 0x1a, 0xda, 0x93, 0x8f, 0x5a, 0x09, 0x3b, 0x09, 0x62, 0x2d, 0x6e, 0xfd,
		0x7a, 0xa6, 0xb7, 0xf7, 0x70, 0x2f, 0x83, 0xda, 0x46, 0x8e, 0xc0, 0xd4, 0xff, 0xf8, 0xe3, 0x49,
		0xac, 0x85, 0x8e, 0x6d, 0xfd, 0x14, 0x49, 0xeb, 0x1f, 0xd6, 0x0f, 0xb7, 0x22, 0xf6, 0x9c, 0x1f,
		0x3a, 0x46, 0x10, 0xd9, 0x5b, 0xea, 0x32, 0x3f, 0x6c, 0x7b, 0x8d, 0x6f, 0x5a, 0xb0, 0x96, 0xbd,
		0xf7, 0x32, 0x76, 0x94, 0x17, 0xa5, 0x26, 0xa8, 0xf9, 0x2c, 0x14, 0x14, 0xe5, 0x73, 0xfa, 0x0d,
		0xbf, 0x2c, 0xbe, 0xe0, 0x4f, 0x4d, 0xf5, 0x84, 0x52, 0x57, 0xd6, 0xf5, 0xc5, 0x2d, 0xbc, 0x01,
		0x02, 0xb7, 0x43, 0xad, 0x3a, 0x65, 0xea, 0x53, 0xf6, 0x72, 0x5b, 0xb2, 0xce, 0xdf, 0x0d, 0x59,
		0xe7, 0x6b, 0x56, 0xeb, 0xfc, 0x2e, 0x08, 0x42, 0x2d, 0x6a, 0x2f, 0x82, 0x5e, 0xec, 0xdc, 0xcb,
		0x99, 0x88, 0x84, 0xbe, 0x4f, 0x67, 0xe8, 0x64, 0x57, 0x84, 0x70, 0xe2, 0x05, 0x5a, 0xaa, 0xa9,
		0x70, 0x64, 0xbc, 0xfc, 0xd1, 0x7e, 0x2c, 0xfc, 0xbe, 0xf0, 0xeb, 0xd4, 0x4e, 0x78, 0xb1, 0xf6,
		0x9c, 0xf8, 0x24, 0x33, 0x12, 0xf6, 0xea, 0x7f, 0xaa, 0x53, 0x67, 0xd9, 0x8b, 0xb5, 0x4a, 0x1c,
		0x1d, 0x14, 0x43, 0xc3, 0x9b, 0xab, 0x8f, 0x9f, 0x6f, 0xfe, 0xf8, 0xfd, 0xd3, 0xd4, 0xbb, 0x9a,
		0xfd, 0x3c, 0x73, 0x3f, 0x46, 0x52, 0xdd, 0x5c, 0xe5, 0x8f, 0xb9, 0xfc, 0xf1, 0x8f, 0xc2, 0xaf,
		0x97, 0x3f, 0x7d, 0xce, 0x1f, 0xf2, 0x26, 0xd3, 0xc5, 0x95, 0xff, 0x10, 0x57, 0x53, 0xcc, 0xfd,
		0x15, 0xa3, 0xc2, 0x14, 0xf7, 0xa6, 0x89, 0xef, 0x6f, 0xbc, 0xba, 0xaa, 0x13, 0x9d, 0x5b, 0xb7,
		0xd2, 0xd1, 0x2a, 0x2a, 0xdc, 0x22, 0xe6, 0xe9, 0x57, 0xfc, 0x58, 0xdd, 0xac, 0x42, 0x93, 0x6c,
		0x02, 0x57, 0x16, 0xa1, 0xa9, 0x3d, 0x27, 0xcb, 0x1a, 0x90, 0x99, 0x6c, 0xc6, 0x2c, 0x01, 0x2f,
		0x9c, 0xbe, 0xf7, 0x54, 0x3d, 0xd5, 0x10, 0x51, 0xe4, 0x7b, 0x7f, 0x25, 0x04, 0xd7, 0x5c, 0xe4,
		0x23, 0x21, 0x5d, 0x87, 0x74, 0x1d, 0xd2, 0x75, 0x48, 0xd7, 0x21, 0x5d, 0x87, 0x74, 0x1d, 0xd2,
		0x75, 0x48, 0xd7, 0x11, 0xea, 0x5c, 0x4f, 0x7c, 0x13, 0x9e, 0x2f, 0x6e, 0x3d, 0xdf, 0xd3, 0x4f,
		0xf6, 0xd4, 0x17, 0x77, 0x04, 0xdc, 0xb2, 0x31, 0x24, 0x00, 0x06, 0x00, 0x03, 0x80, 0x01, 0xc0,
		0x00, 0x60, 0x00, 0x30, 0x00, 0x18, 0x00, 0x0c, 0x25, 0xc0, 0xdc, 0xaa, 0x50, 0xb8, 0x8e, 0x88,
		0x35, 0x43, 0x25, 0xd5, 0x8e, 0xb1, 0x81, 0x34, 0x40, 0x1a, 0x20, 0x0d, 0x2b, 0xd2, 0xa0, 0x71,
		0x11, 0x90, 0x06, 0x8d, 0x8b, 0x00, 0x37, 0x80, 0x9b, 0x02, 0x80, 0xd0, 0x9c, 0x7d, 0xdb, 0x32,
		0x2e, 0xa0, 0x06, 0x50, 0x03, 0xa8, 0x01, 0xd4, 0x00, 0x6a, 0x00, 0x35, 0x80, 0x1a, 0x40, 0x0d,
		0x13, 0xd4, 0x3c, 0x69, 0x49, 0x9a, 0xa5, 0x59, 0x1d, 0x0f, 0x10, 0x03, 0x88, 0x01, 0xc4, 0x00,
		0x62, 0x00, 0x31, 0x80, 0x18, 0x40, 0x0c, 0x20, 0x86, 0x13, 0x62, 0x88, 0xb2, 0x31, 0xcb, 0xb1,
		0x00, 0x2f, 0x80, 0x17, 0xc0, 0x0b, 0xe0, 0x05, 0xf0, 0x02, 0x78, 0x01, 0xbc, 0x00, 0x5e, 0x78,
		0xe0, 0xc5, 0x11, 0x4a, 0x79, 0x52, 0xd9, 0x5a, 0x89, 0x20, 0xf6, 0xd2, 0x79, 0x24, 0xb8, 0x01,
		0xa3, 0x6c, 0x50, 0xe0, 0x0c, 0x70, 0x06, 0x38, 0xc3, 0x8a, 0x33, 0x28, 0xfc, 0x05, 0xce, 0xa0,
		0xf0, 0x17, 0x10, 0xf3, 0xfa, 0x20, 0x46, 0x39, 0xb6, 0x54, 0x2a, 0xa4, 0xb8, 0xbd, 0xab, 0x30,
		0x16, 0x90, 0x05, 0xc8, 0x02, 0x64, 0x01, 0xb2, 0x00, 0x59, 0x80, 0x2c, 0x40, 0x16, 0x20, 0x0b,
		0x25, 0xb2, 0x4c, 0x95, 0x98, 0x79, 0xc1, 0xdd, 0x02, 0x35, 0x08, 0x4b, 0x60, 0xb6, 0x0d, 0x0c,
		0x98, 0x01, 0xcc, 0x00, 0x66, 0x00, 0x33, 0x80, 0x19, 0xc0, 0x0c, 0x60, 0x06, 0x30, 0x43, 0x09,
		0x33, 0x77, 0x9e, 0x08, 0x38, 0x0e, 0x5d, 0x6f, 0x19, 0x17, 0x28, 0x03, 0x94, 0x01, 0xca, 0x00,
		0x65, 0x80, 0x32, 0x40, 0x19, 0xa0, 0x0c, 0x50, 0x86, 0x12, 0x65, 0xee, 0x85, 0x72, 0x1f, 0x84,
		0x92, 0xb6, 0xf6, 0x66, 0x32, 0xd6, 0x62, 0x16, 0x35, 0xc7, 0x98, 0x92, 0x31, 0x81, 0x30, 0x40,
		0x18, 0x20, 0x0c, 0x2b, 0xc2, 0xa0, 0xb8, 0x17, 0x08, 0x83, 0xe2, 0x5e, 0xc0, 0xcc, 0x2b, 0x86,
		0x19, 0x2f, 0x88, 0x12, 0x6d, 0x8b, 0xdb, 0x50, 0x69, 0x82, 0xca, 0x98, 0x95, 0xd1, 0x00, 0x30,
		0x00, 0x18, 0x00, 0x0c, 0x72, 0x30, 0x00, 0x18, 0x00, 0x0c, 0x72, 0x30, 0xc0, 0x16, 0x7a, 0x6c,
		0x71, 0x55, 0x18, 0x91, 0x51, 0xcb, 0x7c, 0x30, 0x40, 0x0b, 0xa0, 0x05, 0xd0, 0x02, 0x68, 0x01,
		0xb4, 0x00, 0x5a, 0x00, 0x2d, 0x80, 0x16, 0x7a, 0x68, 0xa1, 0x3a, 0x85, 0xb4, 0x32, 0x1a, 0xb0,
		0x05, 0xd8, 0x02, 0x6c, 0x01, 0xb6, 0x00, 0x5b, 0x80, 0x2d, 0xc0, 0x16, 0x60, 0x0b, 0x3d, 0xb6,
		0x78, 0x77, 0x41, 0xa8, 0xa4, 0xfb, 0x5c, 0x6a, 0x4b, 0xc5, 0x2f, 0xeb, 0xc3, 0x02, 0x64, 0x00,
		0x32, 0x00, 0x19, 0x80, 0x0c, 0x40, 0x06, 0x20, 0x03, 0x90, 0x01, 0xc8, 0xd0, 0x83, 0x4c, 0xf8,
		0x4d, 0x2a, 0x95, 0x04, 0x64, 0x04, 0x93, 0x8f, 0x07, 0x74, 0x01, 0xba, 0x00, 0x5d, 0x80, 0x2e,
		0x40, 0x17, 0xa0, 0x0b, 0xd0, 0x05, 0xe8, 0x42, 0x8f, 0x2e, 0x7f, 0x25, 0x32, 0x91, 0xb4, 0x55,
		0x2f, 0xc5, 0x21, 0x01, 0x30, 0x00, 0x18, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x03, 0x80, 0x01, 0xc0,
		0x00, 0x60, 0x28, 0x01, 0xc6, 0x17, 0xb1, 0xb6, 0x5d, 0xa1, 0x45, 0x76, 0xc2, 0xb9, 0x39, 0xbd,
		0xac, 0x8d, 0x07, 0x74, 0x01, 0xba, 0x00, 0x5d, 0x58, 0xd1, 0x05, 0x87, 0xa5, 0x81, 0x2e, 0x38,
		0x2c, 0x0d, 0x88, 0x79, 0xf5, 0x10, 0x93, 0x7a, 0x86, 0x40, 0x7b, 0x41, 0xe2, 0xe9, 0x27, 0x52,
		0x9a, 0xd9, 0x1c, 0x18, 0x58, 0x03, 0xac, 0x01, 0xd6, 0x20, 0x23, 0x03, 0xac, 0x01, 0xd6, 0x20,
		0x23, 0x03, 0x98, 0xa1, 0x84, 0x99, 0x59, 0xe2, 0x6b, 0xcf, 0x49, 0xc1, 0x83, 0xbe, 0x2b, 0xef,
		0x8e, 0xb1, 0x81, 0x34, 0x40, 0x1a, 0x20, 0x0d, 0x32, 0x35, 0x40, 0x1a, 0x20, 0x0d, 0x32, 0x35,
		0x80, 0x1b, 0x53, 0x70, 0x13, 0xcf, 0xdd, 0x05, 0x39, 0xd8, 0x64, 0xe3, 0x02, 0x6a, 0x00, 0x35,
		0x80, 0x1a, 0x40, 0x0d, 0xa0, 0x06, 0x50, 0x03, 0xa8, 0x01, 0xd4, 0xf0, 0x40, 0x4d, 0x98, 0xe8,
		0x28, 0xd1, 0xf6, 0x6d, 0x32, 0x9d, 0x4a, 0x65, 0x4f, 0x85, 0xe7, 0x27, 0x4a, 0x12, 0x54, 0x02,
		0x6f, 0x19, 0x17, 0x50, 0x03, 0xa8, 0x01, 0xd4, 0xb0, 0x42, 0x0d, 0x36, 0x9f, 0x00, 0x35, 0xd8,
		0x7c, 0x02, 0xca, 0xbc, 0x6e, 0x94, 0x89, 0xed, 0xf8, 0x41, 0x44, 0x91, 0x74, 0xed, 0x30, 0xd1,
		0xc4, 0x38, 0xb3, 0x3a, 0x36, 0x90, 0x06, 0x48, 0x03, 0xa4, 0x01, 0xd2, 0x00, 0x69, 0x80, 0x34,
		0x40, 0x1a, 0x20, 0x0d, 0x03, 0xd2, 0x10, 0x9d, 0xce, 0x5e, 0x19, 0x0d, 0xd8, 0x02, 0x6c, 0x01,
		0xb6, 0x00, 0x5b, 0x80, 0x2d, 0xc0, 0x16, 0x60, 0x0b, 0xb0, 0x85, 0x01, 0x5b, 0xa8, 0x6e, 0x25,
		0x58, 0x1d, 0x0e, 0xe0, 0x02, 0x70, 0x01, 0xb8, 0x00, 0x5c, 0x00, 0x2e, 0x00, 0x17, 0x80, 0x0b,
		0xc0, 0x85, 0x01, 0x5c, 0x48, 0x7b, 0xe2, 0x95, 0x8c, 0x09, 0x84, 0x01, 0xc2, 0x00, 0x61, 0x80,
		0x30, 0x40, 0x18, 0x20, 0x0c, 0x10, 0x06, 0x08, 0xc3, 0x80, 0x30, 0x49, 0xe0, 0x52, 0x5d, 0x49,
		0xb0, 0x31, 0x22, 0xf0, 0x05, 0xf8, 0x02, 0x7c, 0x01, 0xbe, 0x00, 0x5f, 0x80, 0x2f, 0xc0, 0x17,
		0xe0, 0x0b, 0x25, 0xbe, 0xd0, 0xf7, 0x8d, 0x41, 0xb7, 0x18, 0xe0, 0x0b, 0xf0, 0xc5, 0x2c, 0xbe,
		0xe0, 0x60, 0x35, 0xf0, 0x05, 0x07, 0xab, 0x01, 0x32, 0x00, 0x19, 0xa2, 0x1e, 0x31, 0xe8, 0x0c,
		0x03, 0x80, 0x01, 0xc0, 0x00, 0x60, 0x00, 0x30, 0x00, 0x18, 0x00, 0x0c, 0x00, 0xc6, 0x08, 0xc0,
		0x28, 0x4f, 0x3f, 0xd9, 0x1c, 0x09, 0x99, 0xf2, 0x81, 0x81, 0x35, 0xc0, 0x1a, 0x60, 0x0d, 0x2b,
		0xd6, 0x60, 0x5b, 0x09, 0x58, 0x83, 0x6d, 0x25, 0xc0, 0xcc, 0xab, 0x83, 0x19, 0x25, 0x63, 0xa9,
		0x09, 0x6a, 0x61, 0x16, 0xe3, 0x00, 0x55, 0x80, 0x2a, 0x40, 0x15, 0xa0, 0x0a, 0x50, 0x05, 0xa8,
		0x02, 0x54, 0x01, 0xaa, 0x90, 0xa2, 0x4a, 0x12, 0x70, 0x5c, 0x9f, 0x54, 0x3e, 0x2c, 0x40, 0x06,
		0x20, 0x03, 0x90, 0x01, 0xc8, 0x00, 0x64, 0x00, 0x32, 0x00, 0x19, 0x80, 0x0c, 0x25, 0xc8, 0xc4,
		0xd2, 0x09, 0x03, 0x37, 0xb6, 0x63, 0x2f, 0x70, 0xa4, 0x9d, 0x5d, 0x47, 0xed, 0xf8, 0x52, 0x28,
		0xdb, 0x09, 0x93, 0x40, 0x4b, 0x8a, 0xce, 0x30, 0x2f, 0x8b, 0x00, 0xe0, 0x00, 0x70, 0x00, 0x38,
		0x00, 0x1c, 0x00, 0x0e, 0x00, 0x07, 0x80, 0x03, 0xc0, 0xe1, 0x03, 0x9c, 0x79, 0x6e, 0x85, 0x30,
		0x63, 0xb3, 0x7b, 0x78, 0x80, 0x0d, 0xc0, 0x06, 0x60, 0x03, 0xb0, 0x01, 0xd8, 0x00, 0x6c, 0x00,
		0x36, 0x00, 0x1b, 0x76, 0xb0, 0xa1, 0x39, 0xc8, 0xb4, 0x7d, 0x68, 0x00, 0x0d, 0x80, 0x06, 0x40,
		0x03, 0xa0, 0x01, 0xd0, 0x00, 0x68, 0x00, 0x34, 0x00, 0x1a, 0x4a, 0xa0, 0xd1, 0xf7, 0x2a, 0xd4,
		0xda, 0x97, 0x2e, 0x43, 0x61, 0xcd, 0x8e, 0xb1, 0x81, 0x34, 0x40, 0x1a, 0x20, 0x0d, 0x90, 0x06,
		0x48, 0x03, 0xa4, 0x01, 0xd2, 0x00, 0x69, 0x28, 0x91, 0x26, 0x09, 0xbe, 0x06, 0xe1, 0x43, 0x60,
		0x47, 0x2a, 0xd4, 0xa1, 0x13, 0xfa, 0x0c, 0x64, 0xf3, 0xb2, 0x08, 0x00, 0x0e, 0x00, 0x07, 0x80,
		0x03, 0xc0, 0x01, 0xe0, 0x00, 0x70, 0x00, 0x38, 0x00, 0x1c, 0x9a, 0x4f, 0x54, 0xd4, 0xd0, 0x9e,
		0x7c, 0xd4, 0x4a, 0xd8, 0x49, 0x10, 0x6b, 0x71, 0xeb, 0xd7, 0x33, 0xbd, 0xbd, 0x87, 0x7b, 0x19,
		0xd4, 0x36, 0x72, 0x04, 0xa6, 0xfe, 0xc7, 0x1f, 0x4f, 0x62, 0x2d, 0x74, 0x6c, 0xeb, 0xa7, 0x48,
		0x5a, 0xff, 0xb0, 0x7e, 0x98, 0x26, 0xbe, 0xff, 0x43, 0xc7, 0x00, 0x22, 0x7b, 0x49, 0x5d, 0xc6,
		0x87, 0x2d, 0x6f, 0xf1, 0x4d, 0x0b, 0xb6, 0xb2, 0xf7, 0x5e, 0xc6, 0x8e, 0xf2, 0xa2, 0xd4, 0x00,
		0x35, 0x9f, 0x84, 0x82, 0x9a, 0x7c, 0x4e, 0xbf, 0xe0, 0x97, 0xc5, 0xf7, 0xfb, 0x67, 0x43, 0x2d,
		0xa1, 0xd4, 0x94, 0x75, 0x6d, 0x71, 0x0b, 0x2f, 0x80, 0xc0, 0xe7, 0x50, 0x2b, 0x4e, 0x99, 0xf2,
		0x94, 0xbc, 0xdb, 0x96, 0x2c, 0xf3, 0x77, 0x43, 0x96, 0xf9, 0x9a, 0xd5, 0x32, 0xbf, 0x0b, 0x82,
		0x50, 0x8b, 0xda, 0x4b, 0xa0, 0x17, 0x3b, 0xf7, 0x72, 0x26, 0x22, 0xa1, 0xef, 0xd3, 0x09, 0x3a,
		0xd9, 0x15, 0x1d, 0x9c, 0x78, 0x81, 0x96, 0x6a, 0x2a, 0x1c, 0x19, 0x2f, 0x7f, 0xb4, 0x1f, 0x0b,
		0xbf, 0x2f, 0xfc, 0x3a, 0x35, 0x12, 0x5e, 0xac, 0x3d, 0x27, 0x3e, 0x49, 0x2d, 0x84, 0xbd, 0xfa,
		0x5f, 0xea, 0x9c, 0x1a, 0xe9, 0xc5, 0x5a, 0x25, 0x8e, 0x0e, 0x8a, 0x51, 0xe1, 0xcd, 0xd5, 0xc7,
		0xcf, 0x37, 0x7f, 0xfc, 0xfe, 0x69, 0xea, 0x5d, 0xcd, 0x7e, 0x9e, 0xb9, 0x1f, 0x23, 0xa9, 0x6e,
		0xae, 0xf2, 0xa7, 0x5c, 0xfe, 0xf8, 0x47, 0xe1, 0xd7, 0xcb, 0x9f, 0x3e, 0xe7, 0xcf, 0x78, 0x93,
		0x6a, 0xe2, 0xca, 0xef, 0xe3, 0x6a, 0x6a, 0xb9, 0xbf, 0x5a, 0x54, 0x98, 0xe0, 0xde, 0xd2, 0xd2,
		0x56, 0x9e, 0xdc, 0x65, 0x39, 0xc8, 0x72, 0x8c, 0x8a, 0xaa, 0x55, 0x2f, 0x87, 0x50, 0x3b, 0x77,
		0xd0, 0x24, 0x67, 0xc0, 0x95, 0x2b, 0x68, 0x6a, 0xb8, 0xc9, 0x72, 0x03, 0x64, 0xb6, 0x99, 0x31,
		0x17, 0xc0, 0x8b, 0xa0, 0xb5, 0x63, 0xfe, 0x5c, 0x37, 0xae, 0xe6, 0x5f, 0x6e, 0xbe, 0x20, 0x64,
		0x90, 0xcc, 0xea, 0x28, 0xc4, 0x62, 0x51, 0xf4, 0x87, 0x35, 0x3e, 0xfb, 0x21, 0x95, 0x59, 0x5b,
		0x95, 0xbe, 0x84, 0x9f, 0xb5, 0xf2, 0x82, 0xbb, 0x66, 0x89, 0x8f, 0x7e, 0xfa, 0x26, 0x52, 0x8b,
		0xdc, 0x04, 0x7c, 0x07, 0xe9, 0x20, 0xb7, 0x22, 0xf6, 0x9c, 0x9e, 0xd9, 0xbc, 0x4f, 0x78, 0xd5,
		0xa0, 0x42, 0x2e, 0x1b, 0x62, 0xfe, 0xd4, 0x13, 0x6b, 0xd0, 0xe0, 0xeb, 0x67, 0xaf, 0x6f, 0x62,
		0xf5, 0xbb, 0x19, 0xda, 0xbd, 0xa1, 0xfd, 0x97, 0x7b, 0xce, 0x55, 0x5d, 0x10, 0x31, 0x00, 0x20,
		0xbd, 0x4a, 0x1e, 0x97, 0x8d, 0x31, 0xf6, 0x5b, 0x2a, 0x2f, 0x4f, 0xca, 0x1e, 0x13, 0xd2, 0x5b,
		0xbe, 0x86, 0x4a, 0xf0, 0x90, 0x9b, 0xca, 0xb5, 0xcf, 0xef, 0xa9, 0x02, 0xd5, 0x80, 0xa1, 0x32,
		0x28, 0xd4, 0x01, 0x04, 0x6a, 0x30, 0xa8, 0x0b, 0x04, 0x8d, 0x41, 0xa0, 0x31, 0x00, 0x30, 0x38,
		0x7e, 0x5a, 0x03, 0x52, 0xd9, 0xc1, 0x17, 0x10, 0x37, 0xf3, 0x8b, 0x15, 0x66, 0xf1, 0xd9, 0x8b,
		0x5f, 0xb4, 0xb6, 0x26, 0x6d, 0x2f, 0x98, 0x86, 0x6a, 0x56, 0xcd, 0x60, 0x6e, 0x59, 0x9f, 0x2b,
		0x63, 0x55, 0x5b, 0xab, 0x7d, 0xac, 0x55, 0xac, 0xd5, 0xea, 0x6b, 0xf5, 0xbd, 0xa7, 0xaa, 0x4d,
		0xed, 0x6d, 0x12, 0xb8, 0x7e, 0x3d, 0xa5, 0xdf, 0x50, 0x8f, 0x92, 0xb1, 0xea, 0x45, 0xb6, 0x7d,
		0x44, 0xb6, 0x88, 0x6c, 0xdb, 0x8f, 0x6c, 0xab, 0x2e, 0xa6, 0xfc, 0x83, 0x33, 0x39, 0xbb, 0x95,
		0xaa, 0x79, 0x15, 0xca, 0x62, 0x9c, 0x66, 0xa5, 0x26, 0x7d, 0x94, 0x9a, 0xb0, 0xe7, 0xff, 0x51,
		0x6a, 0x62, 0xbc, 0xd4, 0xa4, 0xee, 0xe2, 0x2c, 0x24, 0x1c, 0x02, 0xf7, 0xc1, 0x73, 0xb3, 0xf0,
		0x96, 0x68, 0x8b, 0x6a, 0x39, 0x64, 0xc3, 0xc9, 0x6a, 0x56, 0x25, 0x46, 0xb6, 0x84, 0x29, 0x97,
		0xb2, 0xa9, 0x25, 0x4d, 0xbd, 0xb4, 0xd9, 0x96, 0x38, 0xdb, 0x52, 0x37, 0xb8, 0xe4, 0x9b, 0x2d,
		0xfd, 0x86, 0x26, 0xa0, 0x79, 0x06, 0x7a, 0xab, 0x6e, 0x36, 0xae, 0x3e, 0x5b, 0x5f, 0xc9, 0x63,
		0x82, 0xa1, 0x68, 0xaa, 0xd1, 0x9e, 0xff, 0xd0, 0xac, 0x0a, 0x8b, 0xba, 0x3a, 0x2d, 0x1f, 0x94,
		0xb8, 0x4a, 0x2d, 0x1f, 0x97, 0xab, 0x32, 0x6a, 0xa9, 0x43, 0xd4, 0x15, 0x52, 0x44, 0xcb, 0x64,
		0x75, 0xca, 0x08, 0xab, 0xd8, 0x36, 0xa6, 0x8c, 0xba, 0x9a, 0xed, 0x18, 0xe6, 0xee, 0x4d, 0x37,
		0x46, 0xb9, 0x6e, 0xab, 0xa6, 0xe3, 0x2d, 0x01, 0xa8, 0x8d, 0x86, 0xf6, 0xad, 0xa7, 0x19, 0x70,
		0x6d, 0x31, 0x30, 0xa0, 0x0d, 0xd0, 0x06, 0x68, 0x3b, 0x68, 0x68, 0x6b, 0x74, 0x79, 0xed, 0xfa,
		0x4a, 0xbe, 0x00, 0xb4, 0x01, 0xda, 0x5e, 0x0b, 0xb4, 0xf1, 0x5d, 0x86, 0x0b, 0x7c, 0x7b, 0xd5,
		0xf8, 0xd6, 0xb8, 0xe5, 0xf9, 0x86, 0xa1, 0x6f, 0xd8, 0xe1, 0x7c, 0xdd, 0xcc, 0xf7, 0x01, 0x6c,
		0x00, 0x36, 0x00, 0xdb, 0x4b, 0xdf, 0xb3, 0x69, 0xc2, 0x3d, 0x1f, 0xc8, 0x95, 0x53, 0x91, 0xf8,
		0xba, 0xc1, 0x31, 0xed, 0xad, 0xda, 0xbe, 0x1c, 0x9a, 0x68, 0x72, 0x69, 0x62, 0x3a, 0x72, 0x53,
		0xc1, 0x61, 0x32, 0x4c, 0x9b, 0x0e, 0x2e, 0x13, 0xc2, 0x6e, 0x4a, 0xd8, 0x4d, 0x4a, 0x0b, 0xa6,
		0x85, 0x18, 0x74, 0x88, 0xb4, 0x9b, 0x2c, 0x46, 0x2c, 0x8d, 0x15, 0x49, 0x12, 0xfc, 0xeb, 0x96,
		0x62, 0x4c, 0x38, 0x24, 0x6d, 0xec, 0x48, 0x1f, 0x43, 0xb2, 0xc6, 0x92, 0xdc, 0x31, 0xa5, 0xb1,
		0xa8, 0x84, 0x3f, 0x3a, 0x61, 0x88, 0x35, 0x59, 0x63, 0xce, 0x8d, 0xa9, 0xe5, 0xda, 0x30, 0x38,
		0xc6, 0x39, 0x7e, 0xd3, 0xcd, 0xd1, 0xae, 0x3b, 0x12, 0x21, 0x53, 0xb4, 0x78, 0x90, 0x8f, 0x8e,
		0x8c, 0x63, 0xdb, 0x17, 0x4e, 0xe4, 0xda, 0x09, 0x41, 0x5b, 0xa1, 0xad, 0x6e, 0x68, 0xab, 0x24,
		0xe0, 0x2b, 0xf0, 0x15, 0xf8, 0x0a, 0x7c, 0x05, 0xbe, 0x02, 0x5f, 0x81, 0xaf, 0xc0, 0x57, 0xe0,
		0x2b, 0xf0, 0xb5, 0x22, 0xbe, 0xce, 0x84, 0xfa, 0x2a, 0x15, 0x5d, 0x6f, 0xcc, 0x97, 0x20, 0x76,
		0x9b, 0x3c, 0xa0, 0x2c, 0x50, 0x16, 0x28, 0x0b, 0x94, 0x05, 0xca, 0x02, 0x65, 0x81, 0xb2, 0x40,
		0x59, 0xa0, 0x2c, 0x50, 0x76, 0x7f, 0x94, 0x8d, 0x3c, 0xc5, 0xc3, 0xac, 0xf3, 0x81, 0x01, 0xa7,
		0x80, 0x53, 0xc0, 0x29, 0xe0, 0x14, 0x70, 0x0a, 0x38, 0x05, 0x9c, 0x02, 0x4e, 0x01, 0xa7, 0x80,
		0xd3, 0x7d, 0x27, 0xd1, 0xf3, 0x7d, 0x79, 0x27, 0x7c, 0x03, 0x19, 0xd6, 0xad, 0x92, 0x80, 0xaf,
		0xc0, 0x57, 0xe0, 0x2b, 0xf0, 0x15, 0xf8, 0x0a, 0x7c, 0x05, 0xbe, 0x02, 0x5f, 0x81, 0xaf, 0xc0,
		0xd7, 0x7d, 0x27, 0xd1, 0x40, 0x79, 0x2b, 0xea, 0x5a, 0x01, 0xac, 0x00, 0x56, 0x00, 0x2b, 0x80,
		0x15, 0xc0, 0x0a, 0x60, 0x05, 0xb0, 0x02, 0x58, 0x01, 0xac, 0x04, 0xc0, 0xaa, 0x95, 0x08, 0xe2,
		0x99, 0xa7, 0x35, 0x2b, 0xb3, 0x16, 0xa5, 0x00, 0x5b, 0x81, 0xad, 0xc0, 0x56, 0x60, 0x2b, 0xb0,
		0x15, 0xd8, 0x0a, 0x6c, 0x05, 0xb6, 0x02, 0x5b, 0x81, 0xad, 0xfb, 0x63, 0x6b, 0xac, 0x6d, 0xc7,
		0x97, 0x42, 0x49, 0xd7, 0x0e, 0x62, 0xe9, 0x70, 0x30, 0xeb, 0xba, 0x08, 0x00, 0x2b, 0x80, 0x15,
		0xc0, 0x0a, 0x60, 0x05, 0xb0, 0x02, 0x58, 0x01, 0xac, 0x00, 0x56, 0x00, 0x2b, 0x80, 0xb5, 0x16,
		0xb0, 0xf2, 0xf3, 0x2a, 0x70, 0x15, 0xb8, 0x0a, 0x5c, 0x05, 0xae, 0x02, 0x57, 0x81, 0xab, 0xc0,
		0x55, 0xe0, 0x2a, 0x70, 0x15, 0xb8, 0x5a, 0x65, 0x12, 0x8d, 0xf5, 0xb9, 0x42, 0x83, 0x2b, 0xc0,
		0x2b, 0xe0, 0x15, 0xf0, 0x0a, 0x78, 0x05, 0xbc, 0x02, 0x5e, 0x01, 0xaf, 0x80, 0x57, 0xc0, 0x2b,
		0x11, 0xbc, 0x2a, 0x19, 0x47, 0x61, 0x10, 0x4b, 0xe6, 0xda, 0xd6, 0x9d, 0xd2, 0x80, 0xb1, 0xc0,
		0x58, 0x60, 0x2c, 0x30, 0x16, 0x18, 0x0b, 0x8c, 0x05, 0xc6, 0x02, 0x63, 0x81, 0xb1, 0xaf, 0x04,
		0x63, 0x5b, 0xbd, 0x55, 0xf6, 0x5d, 0x10, 0x84, 0x5a, 0xa4, 0x9a, 0x46, 0x73, 0xb9, 0x6c, 0xec,
		0xdc, 0xcb, 0x99, 0x88, 0x84, 0xbe, 0x4f, 0x9d, 0xd6, 0xc9, 0x2e, 0x06, 0x38, 0xf1, 0x02, 0x2d,
		0xd5, 0x54, 0x38, 0x32, 0x5e, 0xfe, 0x68, 0x3f, 0x16, 0x7e, 0x5f, 0xf8, 0xb5, 0x7e, 0x8a, 0xa4,
		0xed, 0x05, 0xd3, 0x50, 0xcd, 0xb2, 0xa7, 0x3d, 0xb9, 0x4d, 0x02, 0xd7, 0x5f, 0xfd, 0xd5, 0x4c,
		0xce, 0x6e, 0xa5, 0x3a, 0x21, 0xba, 0x9e, 0x7a, 0xfe, 0x75, 0xb4, 0x4a, 0x1c, 0x1d, 0x14, 0xf9,
		0xf2, 0xe6, 0xea, 0xe3, 0xe7, 0x9b, 0x3f, 0x7e, 0xff, 0x34, 0xf5, 0xae, 0x66, 0x3f, 0xcf, 0xdc,
		0x8f, 0x91, 0x54, 0x37, 0x57, 0xf9, 0x37, 0x59, 0xfe, 0xf8, 0x47, 0xe1, 0xd7, 0xcb, 0x9f, 0x52,
		0x40, 0xb8, 0x5a, 0x3e, 0xf3, 0xcd, 0x4f, 0xd9, 0xd7, 0x28, 0xfe, 0xe6, 0xd7, 0xec, 0x5b, 0xdc,
		0xfc, 0xfc, 0xfc, 0x2d, 0x0e, 0xf0, 0xca, 0x71, 0xcf, 0x71, 0x22, 0x3b, 0x08, 0x5d, 0x49, 0x77,
		0xe7, 0xf8, 0x72, 0x48, 0x9a, 0x4b, 0xc7, 0x4f, 0x71, 0xe9, 0x78, 0x67, 0xe2, 0x1f, 0x5c, 0x3a,
		0xde, 0x59, 0xf7, 0x40, 0x16, 0xcf, 0xd0, 0xc7, 0x31, 0x84, 0xf1, 0x0b, 0x71, 0xdc, 0x42, 0x18,
		0xfd, 0x71, 0xc4, 0x29, 0x5c, 0xf1, 0x09, 0x3b, 0xb3, 0xf2, 0xb1, 0x2a, 0x61, 0x1c, 0xc2, 0x12,
		0x7f, 0xb0, 0xc7, 0x1d, 0x87, 0x3c, 0x77, 0x1d, 0xe1, 0xf8, 0xeb, 0x43, 0x04, 0xb5, 0x9c, 0xaf,
		0x17, 0x88, 0x4b, 0x45, 0x6b, 0xab, 0xe3, 0x02, 0xd9, 0x80, 0x6c, 0x40, 0xb6, 0x83, 0x45, 0xb6,
		0x2b, 0xca, 0xd5, 0x5c, 0x5c, 0xd1, 0xfd, 0x0b, 0x82, 0xb1, 0x3e, 0x09, 0xad, 0xa5, 0x0a, 0xc8,
		0xe8, 0xad, 0xf7, 0xa7, 0xb0, 0xff, 0xe7, 0x9d, 0xfd, 0x7f, 0x4f, 0xed, 0xcb, 0x1f, 0x27, 0x37,
		0x27, 0xf6, 0xf5, 0x7f, 0xf5, 0x5e, 0xa5, 0x6f, 0xf0, 0x85, 0x13, 0xd9, 0x32, 0x10, 0xb7, 0x3e,
		0xc1, 0x56, 0xe8, 0x4a, 0x7b, 0x9f, 0x7c, 0x54, 0xf8, 0x05, 0xf8, 0x05, 0xf8, 0x85, 0x83, 0xf5,
		0x0b, 0xb1, 0x56, 0x5e, 0x70, 0x47, 0xea, 0x0f, 0x0e, 0xd1, 0x4e, 0x7a, 0xc1, 0x57, 0xdb, 0x15,
		0x5a, 0x10, 0x1a, 0xc9, 0x7c, 0x48, 0x1a, 0x0b, 0xd9, 0x87, 0x85, 0x84, 0x85, 0x84, 0x85, 0x7c,
		0xe9, 0x7b, 0xbe, 0xf7, 0x14, 0x8d, 0x6a, 0x0a, 0x47, 0x87, 0x2a, 0x7b, 0x25, 0xd9, 0x96, 0x8e,
		0xf0, 0xed, 0xaf, 0xf2, 0x89, 0xbe, 0x9c, 0xac, 0x5c, 0x0c, 0xea, 0xc8, 0xba, 0x6e, 0x52, 0xb8,
		0x4c, 0x0b, 0xbb, 0x89, 0x61, 0x37, 0x35, 0x2d, 0x98, 0x1c, 0xe2, 0x34, 0xe2, 0x41, 0xd4, 0x91,
		0xf5, 0x47, 0x0c, 0x75, 0x64, 0x23, 0xd4, 0x91, 0x11, 0x0f, 0x8e, 0x3a, 0x32, 0xc3, 0xcb, 0x6e,
		0x75, 0x6a, 0x4d, 0xd4, 0x91, 0x8d, 0xce, 0xcf, 0xcf, 0x50, 0x42, 0x66, 0xc6, 0x36, 0xd3, 0x8f,
		0x76, 0x4c, 0x27, 0x21, 0xe6, 0x30, 0x19, 0x85, 0x4a, 0xdb, 0x9e, 0xcb, 0xc5, 0xaa, 0xcf, 0xc3,
		0x83, 0x51, 0xc1, 0xa8, 0x60, 0x54, 0x30, 0x2a, 0x18, 0x15, 0x8c, 0x0a, 0x46, 0x05, 0xa3, 0x82,
		0x51, 0xc1, 0xa8, 0xd5, 0x18, 0x35, 0x52, 0x5e, 0xa8, 0x3c, 0xfd, 0xc4, 0x4a, 0xaa, 0xb9, 0x10,
		0xf0, 0x2a, 0x78, 0x15, 0xbc, 0x0a, 0x5e, 0x05, 0xaf, 0x82, 0x57, 0xc1, 0xab, 0xe0, 0x55, 0xf0,
		0x2a, 0x78, 0xb5, 0x1a, 0xaf, 0xc6, 0x5a, 0x68, 0xc9, 0x0a, 0xab, 0x73, 0x09, 0x20, 0x55, 0x90,
		0x2a, 0x48, 0x15, 0xa4, 0xba, 0x83, 0x54, 0x2f, 0x18, 0x40, 0xf5, 0x1c, 0xa0, 0x0a, 0x50, 0x05,
		0xa8, 0x56, 0x9b, 0xda, 0xc1, 0x39, 0x30, 0x15, 0x98, 0xda, 0x15, 0x4c, 0x8d, 0x9f, 0x62, 0x2d,
		0x67, 0xf6, 0x4c, 0x38, 0xb6, 0x70, 0x5d, 0x25, 0xe3, 0x98, 0x0b, 0x57, 0x4b, 0x24, 0x01, 0x5b,
		0x81, 0xad, 0xc0, 0x56, 0x60, 0xeb, 0x16, 0xdd, 0xa6, 0x37, 0x15, 0x16, 0xf1, 0x31, 0xd4, 0xe5,
		0x12, 0x27, 0x3e, 0x8e, 0x9a, 0x0f, 0xfc, 0xe7, 0xa9, 0x7d, 0x29, 0xec, 0xe9, 0x3b, 0xfb, 0x9f,
		0xd7, 0xff, 0x19, 0x7c, 0xff, 0xdb, 0x64, 0xf5, 0xef, 0x7f, 0xff, 0xcf, 0xf9, 0xf7, 0x1e, 0xbc,
		0xdb, 0x4b, 0xde, 0x8d, 0x7b, 0xdb, 0x70, 0x5d, 0x0c, 0xfc, 0x1a, 0xfc, 0x1a, 0xfc, 0x1a, 0xfc,
		0xda, 0x8e, 0x74, 0x0c, 0x36, 0x0e, 0x91, 0x8f, 0x41, 0x3e, 0xa6, 0x0b, 0xf9, 0x18, 0x6c, 0x1c,
		0x22, 0x23, 0xd3, 0x11, 0x66, 0xd5, 0x5a, 0x38, 0xf7, 0xd2, 0xb5, 0xc5, 0xdd, 0x9d, 0x4a, 0x27,
		0x34, 0x54, 0x3c, 0xa7, 0x32, 0xca, 0xe5, 0x80, 0x5a, 0x41, 0xad, 0xa0, 0x56, 0x50, 0xeb, 0x0e,
		0x6a, 0xc5, 0x55, 0x14, 0xa0, 0x56, 0x50, 0x6b, 0x17, 0xa8, 0x15, 0x57, 0x51, 0x00, 0x5d, 0x3b,
		0x84, 0xae, 0xcb, 0xd6, 0xaf, 0xf7, 0x22, 0x70, 0x7d, 0x86, 0x9a, 0xb7, 0x0d, 0x09, 0xc0, 0x55,
		0xe0, 0x2a, 0x70, 0x15, 0xb8, 0xba, 0x45, 0xb7, 0xc9, 0xdb, 0xd7, 0xae, 0x5b, 0x8c, 0x03, 0xd9,
		0x3f, 0xa4, 0x6f, 0x6b, 0x7b, 0x8c, 0xfe, 0x2b, 0x12, 0x4a, 0x07, 0xd2, 0x40, 0xf7, 0xb6, 0x6d,
		0x82, 0xe0, 0xcd, 0xe0, 0xcd, 0xe0, 0xcd, 0xe0, 0xcd, 0x76, 0x24, 0x5f, 0xb0, 0x65, 0x88, 0xe4,
		0x0b, 0x92, 0x2f, 0x5d, 0x48, 0xbe, 0x60, 0xcb, 0x10, 0x79, 0x97, 0x6e, 0x71, 0x2b, 0x5b, 0x07,
		0xb7, 0x75, 0x01, 0xe0, 0x54, 0x70, 0x2a, 0x38, 0x15, 0x9c, 0x0a, 0x4e, 0x05, 0xa7, 0x82, 0x53,
		0xc1, 0xa9, 0xe0, 0x54, 0x70, 0x6a, 0x55, 0x4e, 0xe5, 0x3b, 0x8e, 0x51, 0x2e, 0x06, 0xcc, 0x0a,
		0x66, 0x05, 0xb3, 0x82, 0x59, 0xc1, 0xac, 0x60, 0x56, 0x30, 0x2b, 0x98, 0x15, 0xcc, 0x0a, 0x66,
		0xad, 0xca, 0xac, 0x4c, 0x9d, 0xdc, 0x4a, 0x64, 0x80, 0x56, 0x41, 0xab, 0xa0, 0x55, 0xd0, 0xea,
		0x0e, 0x5a, 0x45, 0x2f, 0x37, 0xc0, 0x2a, 0x60, 0xb5, 0x03, 0xb0, 0x8a, 0x5e, 0x6e, 0x40, 0xd5,
		0x2e, 0xa1, 0xaa, 0x89, 0x6e, 0x6e, 0x3b, 0x64, 0x01, 0x5d, 0x81, 0xae, 0x40, 0x57, 0xa0, 0xeb,
		0x16, 0xdd, 0x46, 0x3f, 0x37, 0xf4, 0x73, 0x23, 0xf2, 0x70, 0xfc, 0x5b, 0x88, 0xe8, 0xe9, 0x06,
		0xdf, 0x06, 0xdf, 0x06, 0xdf, 0x56, 0x21, 0x2d, 0x83, 0x4d, 0x44, 0xe4, 0x65, 0x90, 0x97, 0xe9,
		0x42, 0x5e, 0x06, 0x9b, 0x88, 0xc8, 0xcc, 0x74, 0x83, 0x5b, 0x63, 0xe9, 0x4b, 0x47, 0xf3, 0xf7,
		0x74, 0xdb, 0x22, 0x07, 0xd4, 0x0a, 0x6a, 0x05, 0xb5, 0x82, 0x5a, 0x77, 0x50, 0x2b, 0x7a, 0xba,
		0x81, 0x5a, 0x41, 0xad, 0x5d, 0xa0, 0x56, 0xf4, 0x74, 0x03, 0xba, 0x52, 0xa1, 0xeb, 0x9b, 0x16,
		0x57, 0x50, 0xef, 0x5d, 0x10, 0x84, 0x3a, 0xeb, 0x6e, 0x43, 0xb2, 0x68, 0x7a, 0xb1, 0x73, 0x2f,
		0x67, 0x22, 0x12, 0xfa, 0x3e, 0x75, 0x5a, 0x27, 0xbb, 0x18, 0xe0, 0x24, 0xef, 0x13, 0x17, 0x2f,
		0x7f, 0xb4, 0x1f, 0x0b, 0xbf, 0x2f, 0xfc, 0x5a, 0x3f, 0x45, 0xd2, 0xf6, 0x82, 0x69, 0xa8, 0x66,
		0xd9, 0xd3, 0x9e, 0xdc, 0x26, 0x81, 0xeb, 0xaf, 0xfe, 0x6a, 0x26, 0x67, 0xb7, 0x52, 0x9d, 0xf8,
		0x5e, 0xf0, 0xd5, 0x76, 0x85, 0x16, 0x3d, 0x8a, 0xa0, 0x40, 0xab, 0xc4, 0xd1, 0x41, 0x11, 0x30,
		0x6f, 0xae, 0x3e, 0x7e, 0xbe, 0xf9, 0xe3, 0xf7, 0x4f, 0x53, 0xef, 0x6a, 0xf6, 0xf3, 0xcc, 0xfd,
		0x18, 0x49, 0x75, 0x93, 0xb7, 0xb0, 0x8a, 0x97, 0x3f, 0xfe, 0x51, 0xf8, 0xf5, 0xf2, 0xa7, 0x94,
		0x10, 0xae, 0x96, 0x0f, 0x7d, 0xf3, 0x53, 0xf6, 0x3d, 0x8a, 0xbf, 0xf9, 0x35, 0xfb, 0x1a, 0x37,
		0xbf, 0x78, 0xc1, 0xd7, 0xf7, 0xe9, 0xb7, 0x78, 0xd3, 0x8e, 0x76, 0x35, 0xd0, 0xac, 0x5e, 0x36,
		0x05, 0xa1, 0x72, 0xa5, 0xb2, 0x83, 0x24, 0xfd, 0x36, 0x8d, 0x95, 0x2b, 0xe7, 0xa0, 0xcd, 0xa1,
		0x1b, 0xae, 0x00, 0x9a, 0x80, 0x89, 0x2c, 0x50, 0xa2, 0x0c, 0x90, 0x4c, 0x05, 0x46, 0xd4, 0x01,
		0x11, 0x5b, 0x20, 0xc4, 0x16, 0x00, 0x19, 0x0c, 0x7c, 0xda, 0xf5, 0x17, 0x64, 0x01, 0x0e, 0x7d,
		0x3a, 0x9e, 0x30, 0x0d, 0x4f, 0x1c, 0xc8, 0x10, 0x86, 0x83, 0x1c, 0x81, 0x0b, 0x57, 0xc0, 0xc2,
		0x0e, 0xb1, 0x7c, 0xf0, 0x4a, 0x18, 0x98, 0xb0, 0x04, 0x24, 0x9c, 0xe9, 0xf3, 0x43, 0x9e, 0xb6,
		0x8e, 0x30, 0xfd, 0xf5, 0x01, 0x32, 0x1b, 0x65, 0x25, 0x22, 0x43, 0x1d, 0x51, 0x5e, 0x3b, 0x04,
		0x4e, 0x03, 0xa7, 0x81, 0xd3, 0x5e, 0xfa, 0x9e, 0xef, 0x3d, 0x45, 0xa3, 0x9a, 0x7c, 0x57, 0x4d,
		0xa3, 0x12, 0xf9, 0x40, 0xcc, 0x06, 0x97, 0xf9, 0x60, 0x37, 0x23, 0xec, 0xe6, 0xa4, 0x05, 0xb3,
		0x42, 0x8c, 0x3a, 0xa8, 0x44, 0x46, 0x25, 0x32, 0x21, 0xba, 0xd2, 0x69, 0x27, 0xd2, 0xe2, 0xc4,
		0x69, 0x71, 0xda, 0x85, 0xd4, 0x62, 0x62, 0xfc, 0x57, 0xe1, 0xbc, 0x5b, 0x7c, 0x8f, 0x43, 0x0c,
		0xb3, 0xb2, 0x2f, 0x61, 0xcf, 0x92, 0xc7, 0xf9, 0x1e, 0x05, 0x5d, 0xa8, 0xb5, 0x36, 0x30, 0xc2,
		0x2d, 0x84, 0x5b, 0x08, 0xb7, 0x0e, 0x2d, 0xdc, 0x92, 0x4a, 0x85, 0x8a, 0x3e, 0xd8, 0x9a, 0x0f,
		0x8b, 0x50, 0x0b, 0xa1, 0x16, 0x42, 0x2d, 0x84, 0x5a, 0x5b, 0x74, 0x1b, 0x25, 0x86, 0x94, 0x7a,
		0x8a, 0x12, 0xc3, 0xbd, 0x74, 0x0f, 0x25, 0x86, 0x5b, 0xa6, 0x16, 0x25, 0x86, 0x86, 0x0d, 0x34,
		0xfd, 0x68, 0xc7, 0x74, 0x3a, 0xa6, 0x10, 0x5e, 0x66, 0xcd, 0xef, 0x6c, 0x25, 0x45, 0x1c, 0x06,
		0xf4, 0xa8, 0xba, 0x4d, 0x10, 0xe0, 0x15, 0xf0, 0x0a, 0x78, 0x05, 0xbc, 0x6e, 0xd1, 0xed, 0x9f,
		0x66, 0xf6, 0xec, 0x56, 0x71, 0x98, 0x8c, 0x95, 0x74, 0xd8, 0x90, 0x70, 0xcc, 0x0f, 0x41, 0x32,
		0xa3, 0x5f, 0x24, 0x5f, 0xc2, 0xcf, 0x5a, 0x79, 0xc1, 0x1d, 0x0b, 0xa1, 0xf4, 0x4e, 0xd3, 0x77,
		0x7d, 0xbb, 0xf9, 0xae, 0xed, 0x24, 0xf8, 0x1a, 0x84, 0x0f, 0x41, 0x8f, 0x01, 0xb7, 0xfa, 0xdb,
		0x65, 0xce, 0xcf, 0x52, 0x8a, 0x5b, 0x5f, 0xb2, 0x3e, 0xc0, 0xd6, 0x6f, 0xed, 0x87, 0x61, 0x64,
		0xdf, 0x0a, 0xe7, 0x2b, 0x8b, 0xd8, 0xad, 0x5f, 0x3c, 0x05, 0xb7, 0x6f, 0x9e, 0x7e, 0xca, 0xf2,
		0xff, 0x2c, 0xa2, 0x07, 0xdb, 0x44, 0x2f, 0x36, 0x18, 0xe2, 0xfb, 0x44, 0xbb, 0x5c, 0xaf, 0xfb,
		0x6c, 0x9b, 0xf0, 0x99, 0x17, 0xd8, 0xcf, 0xc7, 0x67, 0x59, 0x24, 0x0f, 0xb7, 0x4a, 0x16, 0x8f,
		0xbc, 0x92, 0xcf, 0xb7, 0xaa, 0x98, 0x17, 0x7c, 0xb5, 0x7d, 0x6f, 0xe6, 0x69, 0x16, 0xb9, 0xa3,
		0x9d, 0x3a, 0x26, 0x19, 0x25, 0x8f, 0xb7, 0x49, 0x8e, 0xb5, 0x08, 0xdc, 0xdb, 0x27, 0xd6, 0x15,
		0x7d, 0xb1, 0x4d, 0xb8, 0x7c, 0x8c, 0x3c, 0xc5, 0x34, 0xc7, 0x97, 0xdb, 0x84, 0xba, 0x72, 0x2a,
		0x12, 0x9f, 0x49, 0xb5, 0x06, 0x3b, 0x35, 0x8b, 0x6b, 0x11, 0x0f, 0x4e, 0x77, 0x28, 0x96, 0x1d,
		0x2a, 0x3b, 0x08, 0xb5, 0x2d, 0xee, 0xee, 0x58, 0x64, 0x6f, 0x35, 0x9c, 0xcf, 0x2d, 0xa3, 0x38,
		0x85, 0x6f, 0x7f, 0xdf, 0xe2, 0xce, 0xe3, 0x99, 0xe1, 0xb3, 0x17, 0xac, 0x75, 0xfa, 0x75, 0x9d,
		0xe9, 0x1d, 0x8f, 0xf0, 0xe1, 0x1e, 0xc2, 0x95, 0x14, 0xee, 0x13, 0x8b, 0xf4, 0xf3, 0x97, 0xa6,
		0x3a, 0x0c, 0x79, 0xbe, 0xf6, 0x68, 0x1f, 0x1d, 0x4b, 0xfd, 0xd5, 0x53, 0xe0, 0xb0, 0x3c, 0xc0,
		0x56, 0xfb, 0x39, 0x0d, 0x95, 0xf4, 0xee, 0x8a, 0x6f, 0x20, 0x66, 0x79, 0x80, 0xad, 0x36, 0x54,
		0x68, 0x2d, 0x9c, 0x7b, 0x4e, 0xfb, 0x3d, 0xb8, 0xdc, 0xe7, 0xed, 0x3b, 0xa1, 0x9f, 0x7a, 0xec,
		0x14, 0x86, 0x19, 0x9e, 0xe1, 0x6c, 0xb7, 0x5d, 0x95, 0xbe, 0x64, 0x93, 0xbc, 0xd5, 0xb6, 0x2e,
		0xbe, 0x31, 0xe7, 0xab, 0x3f, 0xeb, 0xbf, 0xe4, 0xb7, 0x17, 0xfa, 0xc7, 0x22, 0x7c, 0x3b, 0x97,
		0x4e, 0xdd, 0xf4, 0x17, 0x8a, 0xed, 0x9d, 0x9f, 0xed, 0x92, 0xcc, 0xe5, 0x45, 0xcf, 0x86, 0xbb,
		0xa4, 0x06, 0xb7, 0xca, 0x4e, 0x02, 0x67, 0x9e, 0x82, 0xe2, 0x90, 0xbe, 0xd5, 0xb8, 0xce, 0x7c,
		0xe1, 0x44, 0x2c, 0x22, 0xb7, 0x9b, 0x55, 0x69, 0x7b, 0x71, 0xe8, 0x0b, 0x26, 0x4a, 0x3a, 0xdb,
		0x65, 0x4e, 0x1d, 0xe9, 0xda, 0xf1, 0x83, 0xa7, 0x9d, 0xfb, 0xf0, 0x1b, 0x69, 0xaa, 0x6c, 0x29,
		0x7e, 0x3b, 0x90, 0x2a, 0xe5, 0x7a, 0x31, 0xeb, 0x8a, 0xbe, 0xdc, 0x39, 0xcd, 0x76, 0x10, 0x16,
		0xfe, 0x8b, 0x17, 0x4c, 0x43, 0x8e, 0x87, 0xd8, 0xaa, 0xe8, 0x8e, 0x92, 0x82, 0x6b, 0x51, 0x0f,
		0x4f, 0x77, 0x47, 0x3f, 0x2c, 0x32, 0xfb, 0x2f, 0xbe, 0xed, 0x5b, 0xd7, 0xe7, 0x7e, 0xdb, 0x83,
		0xbd, 0x1e, 0x62, 0x6e, 0x5a, 0xf8, 0x9e, 0xe2, 0x6c, 0xbf, 0x57, 0xc1, 0x44, 0x50, 0xc3, 0xe1,
		0x6e, 0xf1, 0xa9, 0xec, 0x7b, 0x11, 0xa7, 0x8f, 0x11, 0x49, 0x9e, 0x65, 0x3f, 0x3c, 0x7f, 0xe1,
		0x0d, 0x08, 0x96, 0xcc, 0xd2, 0x70, 0xb4, 0x5b, 0xac, 0x56, 0x22, 0x88, 0xb3, 0x8b, 0x8e, 0x92,
		0x40, 0x7c, 0x13, 0x9e, 0x2f, 0x6e, 0x7d, 0x9e, 0xc5, 0x30, 0x7e, 0x49, 0x03, 0xf4, 0x42, 0x09,
		0x13, 0xa6, 0xa0, 0x7c, 0xb8, 0xd5, 0xf0, 0x2a, 0xe9, 0xa4, 0xd6, 0xfe, 0xc9, 0xd6, 0xde, 0x8c,
		0x69, 0xf6, 0x5f, 0x30, 0xbc, 0x0b, 0xa0, 0xe2, 0x10, 0x7d, 0xfe, 0x42, 0xd0, 0xc6, 0x69, 0x75,
		0xcf, 0x4f, 0x77, 0x64, 0xd9, 0xbc, 0x99, 0xf7, 0x3f, 0xd2, 0xb5, 0xc3, 0x84, 0x25, 0xe9, 0x74,
		0xfe, 0x82, 0xf1, 0x4d, 0xd7, 0x39, 0x6b, 0x9e, 0xef, 0xfc, 0x05, 0xc3, 0xeb, 0x84, 0x41, 0x90,
		0x02, 0x7c, 0xa6, 0x73, 0xb6, 0x4a, 0x82, 0x80, 0x6b, 0x12, 0xf6, 0xc9, 0x19, 0xb0, 0x61, 0xde,
		0xf9, 0x56, 0xd3, 0x1b, 0x84, 0xb6, 0x1f, 0xb2, 0x60, 0xce, 0xf9, 0x56, 0x9d, 0x77, 0x92, 0x59,
		0xe2, 0xdb, 0x4a, 0xfa, 0xf6, 0xed, 0x03, 0x5f, 0xc2, 0xf3, 0x7c, 0xb4, 0xe3, 0x3b, 0xcf, 0x04,
		0x8b, 0x8b, 0x3b, 0x1f, 0xef, 0x90, 0xb9, 0xe8, 0x9b, 0xce, 0x93, 0x93, 0x3a, 0xbf, 0xd8, 0x19,
		0x1e, 0x73, 0xee, 0x1f, 0x9c, 0x5f, 0xbe, 0xb8, 0x6f, 0xc2, 0xa6, 0xd8, 0xa3, 0x17, 0x56, 0x15,
		0x67, 0x5a, 0x60, 0x74, 0xfa, 0xe2, 0xf7, 0xf6, 0x1c, 0xa6, 0xaf, 0xdd, 0x7f, 0xe1, 0x7b, 0x7b,
		0x4e, 0x24, 0x19, 0xdf, 0xfa, 0x60, 0x97, 0x39, 0x49, 0xf5, 0x2d, 0x48, 0x66, 0x2c, 0x82, 0xcf,
		0x5e, 0x4a, 0x86, 0x64, 0x1e, 0xe5, 0xde, 0xbb, 0xbb, 0x97, 0x2a, 0xbb, 0xa1, 0x80, 0xe5, 0x29,
		0x86, 0xdb, 0x19, 0xc6, 0x5d, 0xfc, 0x82, 0x91, 0x25, 0x46, 0x5b, 0x0d, 0x6b, 0xa8, 0xd3, 0xaf,
		0x6d, 0xe6, 0x21, 0xb6, 0xae, 0xbc, 0xfb, 0xd0, 0x77, 0x6d, 0xae, 0x25, 0x37, 0x7e, 0x41, 0xef,
		0xb3, 0xc2, 0x7b, 0xdb, 0xf5, 0xe2, 0x94, 0xa0, 0x59, 0x0c, 0xed, 0xe8, 0xe2, 0xa5, 0x47, 0x98,
		0xba, 0xbc, 0x0f, 0xb0, 0xd5, 0xdc, 0xc6, 0x5e, 0x70, 0xe7, 0x4b, 0xcd, 0x9f, 0xbc, 0x79, 0x69,
		0x16, 0x84, 0x3b, 0xf3, 0x02, 0xb6, 0x24, 0xdd, 0xf8, 0x74, 0x57, 0x92, 0xce, 0x8b, 0xbe, 0x8d,
		0x58, 0x33, 0x93, 0xe3, 0xfe, 0x8b, 0xe2, 0xd9, 0xbe, 0xf9, 0xe0, 0x45, 0xd1, 0xdc, 0x39, 0xca,
		0xf1, 0x56, 0x0b, 0xcc, 0x8e, 0xd0, 0xe3, 0xed, 0x39, 0x2b, 0xdf, 0x93, 0x81, 0xce, 0x63, 0x29,
		0xad, 0x7c, 0x16, 0xf9, 0xdb, 0x6b, 0x06, 0xd2, 0x50, 0x82, 0x69, 0xdb, 0x67, 0x3c, 0x7a, 0x21,
		0x53, 0xb9, 0xf8, 0xd6, 0x5c, 0xe2, 0xc7, 0xdb, 0xf7, 0x3e, 0x92, 0x80, 0x05, 0xdc, 0x77, 0x64,
		0x08, 0x22, 0xdf, 0x73, 0xd8, 0xe2, 0xe4, 0xad, 0x76, 0xf5, 0x56, 0x04, 0xee, 0x83, 0xe7, 0xea,
		0xfb, 0x1e, 0x6d, 0xe1, 0xf3, 0x5b, 0xea, 0x4a, 0xb4, 0xab, 0xac, 0xd2, 0x91, 0xa1, 0x0c, 0x6d,
		0x8f, 0xba, 0x82, 0x89, 0x35, 0x60, 0x28, 0x68, 0xdf, 0x95, 0x2c, 0x9e, 0x58, 0x43, 0xb3, 0x12,
		0x17, 0xb1, 0xea, 0xc4, 0xea, 0x8f, 0x4c, 0xca, 0xcd, 0x03, 0x89, 0x89, 0x35, 0x3a, 0x35, 0x2d,
		0x78, 0x1e, 0x43, 0x4c, 0xac, 0xf3, 0x4b, 0xd3, 0x92, 0xf5, 0xbc, 0x76, 0xb5, 0xdf, 0x37, 0x25,
		0x78, 0x75, 0x17, 0x7d, 0x62, 0x0d, 0x2e, 0x0c, 0x49, 0x5e, 0xda, 0x97, 0x89, 0x65, 0xea, 0x35,
		0xe7, 0xbb, 0xa8, 0x13, 0xeb, 0xec, 0xcc, 0xa0, 0xcc, 0x25, 0x1f, 0x4d, 0xac, 0x71, 0xdf, 0xb4,
		0xe0, 0x15, 0x3a, 0x9a, 0x58, 0xe3, 0x81, 0xe9, 0x07, 0xc8, 0xc1, 0x74, 0x62, 0x8d, 0x4f, 0x0d,
		0x0a, 0x5f, 0xfb, 0xe2, 0x67, 0x43, 0x83, 0xb2, 0x0b, 0xdf, 0xf9, 0xcc, 0xd8, 0x0b, 0xdf, 0x08,
		0x44, 0x48, 0x8f, 0x45, 0xee, 0x23, 0x3b, 0x4f, 0xe9, 0x93, 0xde, 0x20, 0xbf, 0x8f, 0xe4, 0x3c,
		0xe9, 0x45, 0x7a, 0x47, 0xda, 0x3e, 0x92, 0x57, 0x62, 0xdf, 0x89, 0x35, 0xba, 0x30, 0x2c, 0x7e,
		0x35, 0xfa, 0x9f, 0x58, 0x23, 0xc3, 0x73, 0x5e, 0x48, 0xbb, 0x4d, 0xac, 0x51, 0xdf, 0xac, 0xf0,
		0xbc, 0xea, 0x70, 0x62, 0x0d, 0xce, 0xcc, 0x8b, 0xce, 0x49, 0xa1, 0x05, 0xd9, 0xf3, 0x7a, 0xc7,
		0x89, 0x35, 0x18, 0x9a, 0x95, 0x9d, 0xa7, 0xd5, 0x27, 0x56, 0xdf, 0x94, 0x69, 0x2b, 0x09, 0x76,
		0x27, 0xd6, 0xd8, 0xd4, 0x17, 0x5f, 0xaf, 0x78, 0x9b, 0x58, 0x67, 0xa7, 0xc6, 0x44, 0x27, 0x59,
		0x7c, 0x33, 0x36, 0xb5, 0xa8, 0x0b, 0x16, 0xdc, 0xd8, 0xeb, 0xdd, 0xdc, 0x1a, 0x9b, 0x58, 0xe7,
		0xa6, 0xfc, 0xc7, 0xb2, 0x2e, 0x7e, 0x62, 0xf5, 0x4d, 0x91, 0xe8, 0x66, 0x1a, 0x63, 0x62, 0x8d,
		0x47, 0x66, 0x85, 0x17, 0xb4, 0xd9, 0x94, 0xcb, 0x7a, 0x3e, 0xf8, 0x40, 0xdb, 0x14, 0x6f, 0xa7,
		0xc8, 0xcd, 0xca, 0xba, 0x89, 0x75, 0x36, 0x36, 0x27, 0x7c, 0xa3, 0x4a, 0x7a, 0x62, 0x0d, 0x4c,
		0x89, 0xcf, 0x77, 0x25, 0x26, 0xd6, 0xc8, 0x94, 0x72, 0xe5, 0x69, 0xc1, 0x89, 0x35, 0x3e, 0x37,
		0x26, 0xf3, 0x2e, 0xbb, 0x44, 0x71, 0x60, 0xca, 0x1d, 0xad, 0x56, 0x5f, 0x4f, 0xac, 0x33, 0xa3,
		0x72, 0x17, 0x91, 0xba, 0x49, 0x99, 0x79, 0x12, 0xe8, 0xdc, 0xa4, 0xd4, 0x02, 0x69, 0x9c, 0x9b,
		0xb2, 0x17, 0xcb, 0xd3, 0x96, 0x13, 0xab, 0x6f, 0xca, 0xcb, 0xaf, 0x9c, 0xfc, 0xa3, 0x3d, 0x01,
		0xfc, 0x92, 0xdc, 0x42, 0x2d, 0xd4, 0xc4, 0x3a, 0x37, 0xf6, 0x85, 0x8b, 0x87, 0x2c, 0x27, 0x56,
		0xdf, 0xd4, 0x02, 0x7a, 0xe6, 0xf5, 0xb3, 0x73, 0x93, 0x02, 0x37, 0xaa, 0x3c, 0x27, 0xd6, 0x70,
		0x68, 0xf4, 0x01, 0xca, 0x4b, 0xbe, 0x26, 0xd6, 0xf9, 0xc0, 0xe8, 0x63, 0x04, 0x22, 0x5d, 0x56,
		0x43, 0xb3, 0x2f, 0xbf, 0xa4, 0xce, 0x78, 0x62, 0x0d, 0x07, 0x6d, 0x3c, 0x43, 0xa1, 0xe0, 0x7a,
		0x62, 0x0d, 0xfb, 0xad, 0x3c, 0xc2, 0x53, 0xe0, 0xa4, 0xc2, 0xcf, 0x4c, 0x0b, 0x5f, 0x2b, 0xef,
		0x9f, 0x58, 0x67, 0x97, 0x86, 0x1f, 0x61, 0xa5, 0xcc, 0x77, 0x62, 0x0d, 0xc7, 0x46, 0xe5, 0xaf,
		0x96, 0x7d, 0x4e, 0xac, 0x73, 0xb3, 0xd3, 0xff, 0x5c, 0x16, 0x33, 0xb1, 0x86, 0x66, 0xdf, 0x7b,
		0x79, 0x9d, 0xf7, 0xc4, 0x1a, 0x9a, 0x22, 0xd2, 0x62, 0x79, 0xd6, 0xc4, 0x1a, 0x0d, 0x0c, 0x8a,
		0xcd, 0x7a, 0x17, 0x9d, 0x0f, 0xcd, 0x49, 0x9c, 0x89, 0x74, 0x71, 0x9f, 0x1b, 0x7c, 0xb5, 0xcb,
		0x02, 0xcf, 0x89, 0x75, 0x6e, 0x6a, 0x45, 0x6d, 0xab, 0xf9, 0x9a, 0x58, 0x23, 0x53, 0xbe, 0x65,
		0xfd, 0x94, 0xf7, 0xc4, 0x1a, 0xf4, 0x5b, 0x10, 0x5d, 0x38, 0x7e, 0x3a, 0xb1, 0x06, 0x97, 0x2d,
		0x3c, 0xc1, 0xf3, 0xf1, 0xe3, 0x89, 0x35, 0x18, 0x19, 0x16, 0x1f, 0x86, 0x59, 0xd4, 0x67, 0x6c,
		0xca, 0x0b, 0x05, 0x66, 0x13, 0xeb, 0xcc, 0xd4, 0xb7, 0x5d, 0x3b, 0x23, 0x32, 0xb1, 0x86, 0x17,
		0xc6, 0x24, 0x97, 0x2c, 0xb0, 0xa1, 0x31, 0xe1, 0xcb, 0xc2, 0x97, 0x89, 0x65, 0xea, 0x2b, 0x97,
		0x97, 0x13, 0x4e, 0xac, 0x91, 0xa9, 0xa5, 0xb5, 0x7e, 0xc0, 0x79, 0x62, 0x9d, 0xf5, 0x0d, 0x8b,
		0xde, 0x28, 0x27, 0x9e, 0x58, 0xa3, 0x33, 0xc3, 0xcf, 0xb0, 0x4c, 0x4e, 0xf6, 0x4d, 0x39, 0x95,
		0xf5, 0xd8, 0x68, 0x6c, 0xea, 0x3b, 0x2f, 0xbf, 0xeb, 0xa9, 0x31, 0x89, 0x25, 0x4d, 0xad, 0x26,
		0x56, 0xbf, 0xa3, 0x3d, 0x2e, 0xbf, 0x1f, 0x7f, 0x8f, 0x4b, 0x9a, 0x8b, 0x1a, 0x72, 0x29, 0x2f,
		0x34, 0xba, 0xa4, 0xba, 0xba, 0xda, 0xa2, 0xbb, 0xc5, 0x21, 0x1f, 0x0e, 0xdd, 0x2e, 0x4b, 0xe4,
		0xa1, 0xdb, 0xe5, 0x36, 0x01, 0xaf, 0xbd, 0xdb, 0x25, 0xd5, 0xad, 0x10, 0xf9, 0x80, 0xcf, 0xde,
		0x90, 0xba, 0x8b, 0xe6, 0xca, 0xba, 0x29, 0x0a, 0x21, 0x56, 0x08, 0xda, 0xe6, 0xbb, 0x6c, 0x66,
		0x89, 0xd3, 0x3c, 0xb5, 0x65, 0xa6, 0xb8, 0xcd, 0x95, 0x31, 0xb3, 0x65, 0xcc, 0x7c, 0xb5, 0x68,
		0xc6, 0xe8, 0x31, 0xcd, 0xe2, 0xa8, 0xef, 0xe7, 0x30, 0x43, 0xd6, 0x5a, 0x53, 0xdf, 0xd5, 0x30,
		0x40, 0xa8, 0x3b, 0xc9, 0x72, 0xc6, 0x83, 0xa1, 0xbf, 0x6f, 0x3e, 0x36, 0x4b, 0x9f, 0xdf, 0xe5,
		0x2c, 0x70, 0xf6, 0xfb, 0xcd, 0xa5, 0x9c, 0x16, 0x88, 0x95, 0xbc, 0xbb, 0xf2, 0x86, 0xb4, 0xf9,
		0x89, 0xb6, 0x79, 0x01, 0xce, 0x42, 0x1a, 0x8b, 0xb0, 0xef, 0x6f, 0xb9, 0xe6, 0x84, 0xeb, 0xe4,
		0xcb, 0x32, 0x74, 0x5c, 0x79, 0x3b, 0x64, 0x88, 0xbf, 0x2b, 0x2e, 0xca, 0x65, 0x9d, 0xf2, 0x4c,
		0xc6, 0xab, 0xb9, 0x17, 0x82, 0x50, 0xed, 0x7a, 0xb1, 0xfc, 0x26, 0x95, 0xa7, 0x9f, 0xf8, 0x78,
		0x30, 0x97, 0x00, 0x18, 0x04, 0x0c, 0x02, 0x06, 0x01, 0x83, 0x2d, 0xc2, 0x20, 0x8f, 0x29, 0x02,
		0x01, 0xee, 0x4b, 0x80, 0xe1, 0x57, 0x76, 0xec, 0x2b, 0x5c, 0x5d, 0xcc, 0x29, 0x2b, 0xeb, 0x5c,
		0x30, 0x4b, 0x17, 0xf0, 0xbc, 0xec, 0x84, 0x5d, 0x60, 0xd6, 0xa7, 0xe0, 0x41, 0x28, 0xa6, 0x6e,
		0x04, 0xb9, 0x9c, 0xf3, 0xe5, 0x7d, 0x9f, 0x60, 0xe6, 0x55, 0x11, 0xcf, 0x97, 0xab, 0x9e, 0x33,
		0xbe, 0xfe, 0xa2, 0xfa, 0x32, 0x53, 0xf9, 0xba, 0xf2, 0xb2, 0xd4, 0x1d, 0xe7, 0xe2, 0xc2, 0xaf,
		0x7c, 0x57, 0xc4, 0x65, 0x02, 0x9e, 0xd7, 0xc6, 0xc4, 0x3a, 0x43, 0x7c, 0xd1, 0x81, 0x91, 0xa8,
		0xb2, 0xe0, 0xc4, 0x77, 0xe9, 0x2f, 0x23, 0x9f, 0x0e, 0xdc, 0xa9, 0xbf, 0x7a, 0xe7, 0xfa, 0x89,
		0x81, 0x2d, 0x3d, 0xab, 0xe5, 0xcb, 0xf7, 0xb3, 0xff, 0xfb, 0x35, 0x79, 0x7c, 0x2f, 0xb4, 0x58,
		0xfe, 0xed, 0x73, 0xfa, 0x6d, 0x7f, 0xcf, 0xbe, 0x6c, 0xfa, 0x1f, 0x7a, 0xc7, 0xb7, 0x29, 0x9c,
		0xcd, 0x27, 0xdb, 0x26, 0xf0, 0x7c, 0x74, 0x5c, 0x71, 0x78, 0x28, 0x01, 0x34, 0x36, 0x7d, 0x3b,
		0x14, 0x20, 0xbf, 0x9e, 0x2b, 0x0e, 0x5d, 0x9b, 0xc1, 0x5e, 0x58, 0xb8, 0xdf, 0x70, 0x2d, 0x04,
		0xbd, 0x4d, 0x5f, 0x74, 0x5e, 0x97, 0xc5, 0xdb, 0x7f, 0x7c, 0xb0, 0x29, 0x90, 0xb1, 0x4b, 0xe6,
		0xd9, 0xa6, 0xb4, 0xfb, 0x50, 0x73, 0x4a, 0x1c, 0x6e, 0x4a, 0x0c, 0xe4, 0x5d, 0xa8, 0x3d, 0xbe,
		0xf6, 0xe2, 0x9b, 0x12, 0x6f, 0xa7, 0x2e, 0x67, 0x23, 0xc0, 0xd1, 0xa6, 0xc4, 0x45, 0x4b, 0xb0,
		0xd7, 0xdb, 0x9f, 0xad, 0xe4, 0x65, 0x70, 0x75, 0x7f, 0xd9, 0x36, 0xd3, 0x5c, 0x7d, 0x6e, 0xb6,
		0x18, 0x07, 0x96, 0x68, 0x7f, 0xc7, 0x62, 0xe5, 0x3a, 0xda, 0xbc, 0x6d, 0xa9, 0x72, 0x35, 0x9d,
		0x28, 0x33, 0x7d, 0x13, 0x6b, 0x80, 0x7a, 0x57, 0xfe, 0xd0, 0xe6, 0x39, 0x4e, 0x65, 0x88, 0x6b,
		0xf2, 0xa1, 0x11, 0xd4, 0x20, 0xa8, 0x41, 0x50, 0x83, 0xa0, 0x66, 0x6b, 0x50, 0x63, 0xcf, 0x92,
		0x47, 0xc4, 0x33, 0x9c, 0xf1, 0x8c, 0x2b, 0xb5, 0x70, 0xee, 0x19, 0xe3, 0x97, 0x07, 0xe1, 0xb1,
		0xde, 0xb2, 0x39, 0x6f, 0x85, 0xca, 0x74, 0x01, 0x54, 0x2a, 0x80, 0xf7, 0xa6, 0xd0, 0x2c, 0x22,
		0x71, 0xbd, 0x58, 0x2b, 0xef, 0x36, 0xd1, 0x9c, 0x41, 0xc8, 0xf2, 0x7b, 0xd8, 0x2b, 0xf2, 0x5e,
		0x6b, 0x1c, 0x92, 0x2b, 0x0e, 0x0f, 0x2c, 0xaf, 0x9c, 0xf0, 0x1d, 0xb2, 0x0a, 0x58, 0x9d, 0x4f,
		0x9e, 0x50, 0x2a, 0xb7, 0x13, 0x3c, 0xa1, 0xcc, 0xda, 0x37, 0xe0, 0x08, 0xce, 0x9e, 0x0d, 0x11,
		0xe2, 0x07, 0xa3, 0xf1, 0xc3, 0xb2, 0x34, 0x94, 0x2b, 0x8c, 0xa0, 0x2d, 0x3a, 0x46, 0x34, 0x81,
		0x68, 0x02, 0xd1, 0xc4, 0xd1, 0x46, 0x13, 0xe4, 0x07, 0x14, 0x10, 0x4e, 0x2c, 0x46, 0xcf, 0x6f,
		0x3a, 0x4a, 0x1e, 0x0b, 0x7d, 0x66, 0xd8, 0x0e, 0x84, 0xf4, 0xfa, 0x9b, 0xf2, 0x96, 0x7d, 0x16,
		0x39, 0xe4, 0x95, 0x7f, 0xc1, 0x79, 0x05, 0x08, 0x8b, 0xc0, 0x7e, 0xa9, 0xc0, 0x48, 0x79, 0x33,
		0xa1, 0x58, 0x36, 0x64, 0xfa, 0x83, 0x4d, 0x89, 0xcf, 0x7d, 0xda, 0xb9, 0xde, 0xea, 0xd9, 0xa6,
		0x48, 0x2f, 0x70, 0xbd, 0x6f, 0x9e, 0x9b, 0x08, 0x96, 0xab, 0x91, 0xfa, 0xc3, 0x4d, 0x89, 0xcb,
		0x66, 0xc2, 0x1c, 0x02, 0xcf, 0xcb, 0xbe, 0x22, 0xdb, 0xd5, 0xd5, 0xfd, 0xd1, 0xa6, 0x38, 0xde,
		0x18, 0xb6, 0x3f, 0xde, 0x94, 0x98, 0xdf, 0x42, 0x93, 0x77, 0x21, 0xe5, 0x10, 0x7c, 0x51, 0x32,
		0x95, 0xcc, 0xb1, 0x74, 0xff, 0xb2, 0xec, 0xf5, 0x32, 0x5d, 0x2f, 0x35, 0xd8, 0x66, 0xe3, 0xa4,
		0x2f, 0x99, 0xb4, 0xb5, 0x64, 0x3d, 0xba, 0x49, 0xe4, 0xcb, 0x47, 0xd6, 0x9b, 0xfd, 0x0b, 0xf6,
		0x26, 0xbf, 0x60, 0x86, 0xf3, 0x6a, 0xeb, 0xc2, 0xfb, 0xcc, 0x1b, 0xc7, 0x72, 0x5e, 0xf9, 0xba,
		0xb6, 0x30, 0xf2, 0x3b, 0x83, 0x38, 0x2f, 0x3c, 0x5c, 0xd3, 0x19, 0xb6, 0x55, 0x58, 0xb2, 0x08,
		0xe3, 0x7b, 0xc1, 0x54, 0x13, 0x51, 0xb2, 0xfa, 0xe6, 0x6d, 0xa4, 0x5f, 0xf3, 0x75, 0x67, 0xbb,
		0xcc, 0x2e, 0x63, 0x27, 0xa6, 0x6d, 0x4a, 0xcd, 0x77, 0x95, 0x4b, 0x99, 0x99, 0xe0, 0xbb, 0xf0,
		0xa0, 0x1c, 0x82, 0x18, 0xaf, 0xcf, 0x28, 0x75, 0xd8, 0x8c, 0x57, 0xb8, 0xad, 0x7b, 0x30, 0xc6,
		0x9b, 0x14, 0xca, 0x58, 0x8b, 0xb1, 0x63, 0xf6, 0x16, 0x1e, 0x60, 0xbc, 0xc0, 0x60, 0xc3, 0x5d,
		0xf2, 0xb5, 0x97, 0xdf, 0xc4, 0x48, 0xc6, 0x0e, 0xef, 0xa5, 0x58, 0xce, 0xd8, 0xfa, 0x7b, 0xdd,
		0xae, 0xf3, 0x5d, 0x33, 0xb7, 0x85, 0xa9, 0xf8, 0x5a, 0xf4, 0x97, 0x05, 0xaa, 0x5c, 0x95, 0x41,
		0x5b, 0xdc, 0x3f, 0xdf, 0xcd, 0x62, 0x65, 0x44, 0xc5, 0x77, 0x9b, 0x58, 0x59, 0x08, 0xce, 0xd8,
		0xf8, 0xbf, 0x34, 0x00, 0x67, 0xbc, 0xef, 0xb1, 0x2c, 0x85, 0xc2, 0xd7, 0x66, 0x70, 0x83, 0xdb,
		0x26, 0xd6, 0x05, 0xb6, 0x48, 0x18, 0x47, 0x68, 0x88, 0x97, 0xd4, 0xc7, 0xa6, 0x3a, 0x78, 0x5c,
		0x8a, 0x20, 0x74, 0xe8, 0xca, 0x49, 0xa8, 0x66, 0x91, 0x49, 0x7d, 0x45, 0x6b, 0xa0, 0x64, 0xcf,
		0x47, 0x8f, 0x16, 0xef, 0xae, 0x99, 0x86, 0xad, 0x9f, 0x67, 0xca, 0x06, 0x6d, 0xb8, 0x00, 0x68,
		0xf6, 0xe8, 0xc8, 0xf6, 0xe6, 0x28, 0xf7, 0xe4, 0x4c, 0xed, 0xc5, 0x51, 0xef, 0xc1, 0xb1, 0xed,
		0xbd, 0xb1, 0xed, 0xb9, 0x19, 0xdc, 0x6b, 0x6b, 0xd7, 0x5d, 0x90, 0xed, 0xa9, 0x2d, 0xfb, 0xfe,
		0xcc, 0xf7, 0x91, 0x08, 0xb4, 0xf0, 0x79, 0xf7, 0xec, 0xe2, 0x70, 0xad, 0x24, 0x49, 0xcb, 0xcd,
		0x75, 0x2b, 0x49, 0x90, 0x1d, 0x84, 0x95, 0x84, 0x95, 0x84, 0x95, 0x6c, 0xd1, 0x4a, 0x16, 0x0e,
		0x65, 0x66, 0x24, 0x2c, 0x83, 0x64, 0x46, 0x69, 0x33, 0x09, 0x92, 0x67, 0xb4, 0x95, 0x06, 0x3c,
		0x15, 0x06, 0xcf, 0x95, 0x05, 0xf3, 0xc3, 0x40, 0x7e, 0xe8, 0x90, 0xee, 0x0b, 0xaf, 0x1e, 0xeb,
		0x7c, 0xbe, 0xbe, 0x81, 0x70, 0xfc, 0x95, 0x53, 0x9c, 0xcf, 0x4d, 0xfb, 0xbb, 0x55, 0x73, 0x43,
		0xbe, 0x3b, 0xb1, 0xf1, 0x3e, 0x49, 0xd3, 0x5c, 0x6b, 0xba, 0x40, 0x9a, 0x18, 0xd9, 0x98, 0x29,
		0xaa, 0x72, 0xd1, 0xd6, 0x73, 0x0e, 0xad, 0x20, 0x52, 0x76, 0x81, 0x58, 0x90, 0xa4, 0x36, 0x90,
		0x0e, 0x91, 0x8a, 0x83, 0x02, 0x91, 0x80, 0x48, 0x40, 0xa4, 0x83, 0x45, 0xa4, 0xc4, 0x0b, 0x74,
		0x7f, 0x44, 0x08, 0x45, 0x04, 0x5b, 0xa5, 0xbd, 0xdf, 0x45, 0x70, 0x97, 0x3e, 0xdd, 0x9f, 0x24,
		0xda, 0x41, 0xe8, 0x55, 0x7f, 0xf5, 0x02, 0xfa, 0xaa, 0xd0, 0x7f, 0x0b, 0x3f, 0x91, 0x0c, 0x3d,
		0x71, 0xff, 0xa9, 0x84, 0xa3, 0xbd, 0x30, 0x78, 0xef, 0xdd, 0x79, 0x3a, 0x66, 0x10, 0xf0, 0x9b,
		0xbc, 0x13, 0x8b, 0xe6, 0x01, 0x53, 0xe1, 0xc7, 0xb2, 0x93, 0x3d, 0x98, 0x7f, 0x15, 0x8f, 0x7c,
		0x53, 0x36, 0x3a, 0x3f, 0xa7, 0xbe, 0x11, 0xf9, 0x90, 0xa7, 0xad, 0x23, 0x9c, 0x76, 0x7d, 0xa8,
		0x9c, 0x16, 0x29, 0x2f, 0x24, 0xe9, 0x17, 0xbe, 0x4a, 0x6a, 0xf9, 0xb0, 0x60, 0x35, 0xb0, 0x1a,
		0x58, 0x0d, 0xac, 0x06, 0x56, 0x03, 0xab, 0x81, 0xd5, 0xc0, 0x6a, 0x60, 0xb5, 0x5a, 0x93, 0x92,
		0xdf, 0xb0, 0x1c, 0x06, 0xf6, 0x73, 0xdb, 0x72, 0x22, 0x5e, 0xdb, 0x1c, 0x1a, 0xcc, 0x06, 0x66,
		0x03, 0xb3, 0x1d, 0x34, 0xb3, 0x9d, 0x0d, 0x08, 0x99, 0x6d, 0x0c, 0x66, 0x03, 0xb3, 0xbd, 0x16,
		0x66, 0x1b, 0x0e, 0x2e, 0x87, 0x97, 0xa3, 0xf1, 0xe0, 0x12, 0xe0, 0x06, 0x70, 0x6b, 0x0e, 0x6e,
		0x49, 0xe0, 0x4a, 0xe5, 0x3f, 0x79, 0xc1, 0xdd, 0xfc, 0x48, 0x46, 0x76, 0xba, 0x85, 0x88, 0xdc,
		0x4a, 0xc6, 0x06, 0xba, 0x01, 0xdd, 0x80, 0x6e, 0x48, 0xb7, 0x21, 0xdd, 0x06, 0x74, 0x43, 0xba,
		0x0d, 0xd4, 0xf6, 0x9a, 0xa9, 0xed, 0x8d, 0x41, 0x65, 0xef, 0xfd, 0xe2, 0xc5, 0xfa, 0x9d, 0xd6,
		0xcd, 0xf2, 0x72, 0xa9, 0x45, 0xfb, 0xe0, 0xcb, 0xd4, 0x77, 0x36, 0x54, 0xb5, 0x74, 0xa1, 0x15,
		0x46, 0xea, 0x5f, 0x0c, 0x87, 0xa3, 0xf1, 0x70, 0x78, 0x3a, 0x3e, 0x1b, 0x9f, 0x5e, 0x9e, 0x9f,
		0xf7, 0x47, 0x4d, 0xce, 0x8e, 0xf7, 0x3e, 0x2a, 0x57, 0x2a, 0xe9, 0xfe, 0xf4, 0xd4, 0x9b, 0x58,
		0x41, 0xe2, 0xfb, 0x46, 0xdf, 0x34, 0xd1, 0x41, 0xc8, 0x0e, 0x1c, 0x80, 0x6c, 0xe0, 0xe7, 0xdb,
		0x3b, 0xe8, 0x58, 0x0f, 0xda, 0xaa, 0x2f, 0xc6, 0x6a, 0x9f, 0xa8, 0xa8, 0x4c, 0x3d, 0xf9, 0xa8,
		0x95, 0xb0, 0x93, 0x20, 0xd6, 0xe2, 0xd6, 0xaf, 0x07, 0x71, 0xbd, 0x87, 0x7b, 0x19, 0xd4, 0xc6,
		0xa2, 0x06, 0x8a, 0xfb, 0x0c, 0x8b, 0x3f, 0xfe, 0x58, 0xa6, 0x75, 0xd6, 0x3f, 0xac, 0x1f, 0xe6,
		0x1a, 0xf7, 0x43, 0x13, 0xfd, 0x22, 0x8a, 0x62, 0x8a, 0xd1, 0x4b, 0xf6, 0xbe, 0x1a, 0x22, 0x37,
		0x75, 0xcc, 0xb2, 0x12, 0xab, 0xbc, 0xfc, 0x42, 0x5b, 0x49, 0x21, 0xbc, 0x97, 0xb1, 0xa3, 0xbc,
		0x88, 0xe4, 0xe8, 0x77, 0x51, 0x79, 0x36, 0x96, 0x7e, 0xfa, 0x4d, 0x7f, 0x6a, 0xac, 0x3a, 0xd4,
		0x41, 0x70, 0x51, 0x85, 0xdc, 0xc2, 0xab, 0x20, 0x88, 0x6c, 0x38, 0x22, 0xe0, 0x75, 0x8d, 0xda,
		0xf9, 0x96, 0x0f, 0x0b, 0x8d, 0xde, 0xf0, 0xa2, 0x5f, 0x55, 0x1b, 0xde, 0x10, 0x04, 0xda, 0x04,
		0x80, 0x1a, 0xca, 0xdb, 0x82, 0xc7, 0xaf, 0xa6, 0x9e, 0xfb, 0xab, 0x47, 0x85, 0x89, 0xee, 0x39,
		0x72, 0x66, 0xaf, 0xde, 0xa1, 0x5d, 0x6d, 0xa6, 0x73, 0x83, 0xb7, 0x3e, 0x50, 0x45, 0x65, 0x7b,
		0x3e, 0x7f, 0x57, 0xf1, 0x63, 0x75, 0x33, 0xa1, 0x4d, 0x32, 0x9f, 0x5c, 0x99, 0xce, 0xa6, 0x46,
		0x9d, 0x2c, 0x93, 0x49, 0x66, 0xb7, 0x19, 0x33, 0x95, 0xbc, 0xf8, 0xfa, 0xde, 0xab, 0x17, 0x68,
		0xf6, 0x5c, 0xf9, 0xff, 0x78, 0x5a, 0x4b, 0x65, 0xdf, 0x26, 0xd3, 0x69, 0x83, 0xf3, 0x59, 0xb9,
		0x8e, 0xad, 0x0f, 0x58, 0x73, 0x22, 0x9a, 0x6d, 0x3c, 0x34, 0xde, 0x70, 0xa0, 0xd8, 0x68, 0xe0,
		0xde, 0x60, 0xe0, 0x40, 0x72, 0x92, 0x0d, 0x05, 0x5e, 0x28, 0xe7, 0xd9, 0x40, 0x30, 0x9b, 0x1c,
		0x6a, 0xbc, 0x51, 0x40, 0xb7, 0x41, 0x40, 0xb0, 0x31, 0x40, 0xb4, 0x21, 0x40, 0x10, 0x19, 0x50,
		0x6e, 0x00, 0x50, 0x27, 0xfe, 0xd9, 0x32, 0xc7, 0xf4, 0x19, 0x63, 0x8a, 0xbb, 0x5f, 0x28, 0x13,
		0xfb, 0x1c, 0x09, 0xfd, 0x43, 0x9a, 0x8e, 0x96, 0xa2, 0xc2, 0x6b, 0x53, 0x99, 0xbd, 0x1a, 0xe8,
		0x39, 0x55, 0x62, 0xd6, 0xa4, 0xc7, 0x44, 0x6e, 0x40, 0x9f, 0x07, 0x02, 0xa7, 0x80, 0x53, 0xc0,
		0x29, 0x6c, 0x9c, 0xd2, 0xb4, 0x04, 0xf5, 0x79, 0xa1, 0x9d, 0x01, 0x53, 0xb6, 0xf8, 0xc6, 0x41,
		0x7f, 0x38, 0x1e, 0x5e, 0x9c, 0x8d, 0x86, 0x17, 0x07, 0xe4, 0x20, 0xd3, 0x35, 0x77, 0xbc, 0xb8,
		0x92, 0x4f, 0xc9, 0x18, 0xcc, 0x02, 0x66, 0xe9, 0x45, 0xe2, 0xc9, 0x0f, 0x85, 0xdb, 0x9c, 0x59,
		0x9e, 0x07, 0x02, 0xb3, 0x80, 0x59, 0xc0, 0x2c, 0xc8, 0xad, 0x20, 0xb7, 0x82, 0xdc, 0x0a, 0x72,
		0x2b, 0xe0, 0x14, 0x22, 0x4e, 0xd1, 0xde, 0x4c, 0xc6, 0x7e, 0x98, 0x4d, 0x5c, 0x43, 0x52, 0x59,
		0x0e, 0x05, 0x56, 0x01, 0xab, 0x80, 0x55, 0xd8, 0x58, 0xa5, 0x71, 0x33, 0xf6, 0x86, 0x4d, 0xd8,
		0x51, 0xcf, 0x49, 0x46, 0x5c, 0x7b, 0xd4, 0x73, 0x3a, 0x72, 0x86, 0x62, 0xce, 0x8a, 0xf6, 0xe2,
		0x85, 0xb7, 0x79, 0xfc, 0x95, 0x9c, 0x3f, 0x7f, 0xf8, 0x15, 0x65, 0x9c, 0x64, 0xba, 0xb4, 0xfd,
		0x15, 0xa3, 0x86, 0xb3, 0x81, 0xdd, 0x3e, 0x98, 0x1a, 0xce, 0x66, 0xe5, 0x83, 0x96, 0x91, 0x02,
		0xce, 0x9f, 0xe5, 0xac, 0x63, 0xd5, 0x9b, 0x77, 0x8e, 0x43, 0x53, 0xbd, 0xb9, 0x3e, 0x10, 0xaa,
		0x37, 0x4d, 0xdb, 0x72, 0x54, 0x6f, 0x92, 0x19, 0xbd, 0x06, 0xd5, 0x9b, 0xca, 0xfb, 0x26, 0x5d,
		0x7b, 0x16, 0xba, 0x92, 0xa2, 0x74, 0xb3, 0x30, 0x1a, 0xe2, 0x75, 0xc4, 0xeb, 0x88, 0xd7, 0xd9,
		0xe2, 0xf5, 0xff, 0xe5, 0x38, 0xb6, 0x2b, 0x95, 0x1d, 0x6b, 0xa1, 0x25, 0x45, 0xd8, 0xde, 0xe0,
		0x1e, 0x20, 0x9a, 0xfb, 0x7f, 0x68, 0xef, 0xfd, 0x99, 0xdf, 0xf7, 0xe3, 0x05, 0x76, 0x2c, 0xd5,
		0x37, 0xcf, 0x91, 0x14, 0x61, 0x41, 0x76, 0xc9, 0x4f, 0x98, 0x68, 0x3b, 0x9c, 0x52, 0x0e, 0x9b,
		0xdd, 0xed, 0x33, 0x13, 0x29, 0x2b, 0x06, 0x22, 0xa0, 0x19, 0xf3, 0x2c, 0x1d, 0x53, 0x78, 0x71,
		0xaf, 0xdd, 0x7e, 0x26, 0x64, 0x77, 0x02, 0x65, 0xdf, 0x85, 0xe4, 0x32, 0xf4, 0xa2, 0x4e, 0x90,
		0xec, 0x2b, 0xac, 0x4c, 0x1d, 0xc9, 0xbd, 0xdf, 0xeb, 0x3a, 0x36, 0xb1, 0xfa, 0x47, 0x1e, 0x13,
		0xd6, 0xd9, 0x65, 0x88, 0xa5, 0xb3, 0xb0, 0x7e, 0x8d, 0xc1, 0x65, 0x39, 0x14, 0xa8, 0x05, 0xd4,
		0x02, 0x6a, 0x61, 0xa5, 0x96, 0xa6, 0x8b, 0xed, 0xf8, 0xa9, 0x25, 0x08, 0xd5, 0x8c, 0xe4, 0x7a,
		0xc2, 0x39, 0xb1, 0x10, 0xa3, 0xc5, 0xe0, 0x38, 0xd1, 0x62, 0x40, 0x4e, 0x02, 0x04, 0x97, 0x15,
		0x3e, 0xab, 0xc2, 0xc4, 0x3a, 0x3d, 0x76, 0x02, 0xc0, 0x6e, 0xde, 0x0b, 0xb6, 0x73, 0xfb, 0xfe,
		0xd3, 0x9d, 0xe3, 0x60, 0x37, 0xaf, 0xa2, 0x5f, 0x7e, 0xe1, 0x6d, 0x1e, 0xff, 0x6e, 0xde, 0xff,
		0xfa, 0xf9, 0x67, 0xec, 0xe6, 0x91, 0xe9, 0xd2, 0xf6, 0x57, 0x8c, 0xdd, 0xbc, 0x06, 0x76, 0xfb,
		0x60, 0x76, 0xf3, 0x9a, 0x6d, 0x27, 0x59, 0x46, 0x76, 0xf3, 0xfe, 0x97, 0xe3, 0x74, 0x6c, 0x37,
		0xaf, 0xe4, 0x85, 0xd6, 0xdf, 0xd1, 0x2b, 0x1b, 0xac, 0xde, 0xae, 0xde, 0x29, 0x76, 0xf5, 0xb0,
		0xab, 0xd7, 0x3e, 0xb4, 0xd6, 0x0e, 0xbb, 0x73, 0xdd, 0xb8, 0x9a, 0x7f, 0x39, 0x2f, 0xd0, 0xd3,
		0xf9, 0xa2, 0x90, 0x69, 0xc8, 0x5b, 0x43, 0x29, 0x1a, 0x84, 0xdb, 0xcd, 0xc2, 0x6c, 0x9a, 0xf0,
		0x7a, 0x1e, 0x56, 0xc7, 0x2a, 0x6a, 0x42, 0xc9, 0x59, 0x2c, 0xad, 0x93, 0x20, 0x90, 0x4d, 0x42,
		0xf3, 0xc5, 0x4d, 0xfe, 0x59, 0x67, 0xac, 0x26, 0xc3, 0x9c, 0xcd, 0xf3, 0x96, 0xca, 0x6b, 0x94,
		0x28, 0xe8, 0x0d, 0xb3, 0x61, 0xc2, 0x40, 0x6a, 0x3b, 0x0a, 0xe3, 0x26, 0x23, 0x9d, 0x2f, 0x5f,
		0x8f, 0x7d, 0xa7, 0x1a, 0x7d, 0xb7, 0x51, 0x66, 0x3c, 0x62, 0x99, 0xb8, 0xe1, 0x83, 0xa7, 0xa4,
		0x7d, 0x2f, 0x85, 0x6b, 0xcb, 0xa0, 0xc9, 0x65, 0x04, 0xbd, 0xf1, 0xa2, 0x65, 0x57, 0x93, 0x31,
		0x2e, 0x16, 0x85, 0x23, 0x3d, 0xb3, 0xd9, 0xb7, 0xc6, 0x99, 0x8e, 0x67, 0x75, 0x6b, 0x94, 0xe4,
		0xc8, 0x5e, 0x5e, 0xa3, 0xab, 0x7b, 0xb2, 0x57, 0x37, 0xb1, 0x2e, 0x9a, 0xdc, 0x30, 0x5b, 0xa2,
		0x14, 0xcd, 0x8e, 0x47, 0x2d, 0x96, 0x50, 0xb3, 0x83, 0xe1, 0xcb, 0x05, 0x34, 0xb1, 0x9a, 0x64,
		0x24, 0x53, 0x0b, 0xd5, 0xac, 0x4b, 0xf3, 0xc2, 0x3e, 0x35, 0x4a, 0x3e, 0x15, 0x57, 0xf1, 0xc4,
		0x3a, 0xef, 0x66, 0x02, 0x88, 0x85, 0x47, 0x4b, 0xd4, 0x8b, 0xa6, 0xda, 0xec, 0xa5, 0x81, 0x51,
		0x7d, 0x06, 0x4e, 0x7d, 0x7d, 0xd5, 0x67, 0xcb, 0x88, 0xcd, 0xf7, 0x62, 0x6d, 0x2f, 0x42, 0xdf,
		0x86, 0x7b, 0xb9, 0x65, 0x83, 0x62, 0x57, 0x17, 0xbb, 0xba, 0xd8, 0xd5, 0xa5, 0x0a, 0x2f, 0x37,
		0x74, 0xeb, 0x00, 0xcf, 0x8e, 0xbd, 0xad, 0x69, 0xad, 0x02, 0xe1, 0xdb, 0xbe, 0xb8, 0xcd, 0x10,
		0x8b, 0xc2, 0x50, 0x2d, 0xc7, 0x83, 0x8d, 0x82, 0x8d, 0x82, 0x8d, 0x62, 0xb3, 0x51, 0x09, 0x55,
		0x03, 0xb1, 0x31, 0x7a, 0x71, 0xac, 0x0d, 0x86, 0x5e, 0x1c, 0x8d, 0xa6, 0x82, 0xa3, 0x17, 0x07,
		0xf5, 0x9d, 0xb3, 0x68, 0xc8, 0xf1, 0xe2, 0x9f, 0x2e, 0x37, 0xe4, 0xf0, 0x07, 0x76, 0xf8, 0x4d,
		0xaa, 0x7b, 0x49, 0xd1, 0x3c, 0xac, 0x38, 0x18, 0xa0, 0x05, 0xd0, 0x02, 0x68, 0x01, 0xb4, 0x00,
		0x5a, 0x00, 0x2d, 0x80, 0x16, 0x40, 0x0b, 0xcd, 0x27, 0x50, 0xdd, 0x5b, 0xac, 0x47, 0x2d, 0xd9,
		0x3b, 0x42, 0xb5, 0x6f, 0x45, 0xac, 0xa8, 0xf8, 0x76, 0x8f, 0xbf, 0xfa, 0xf7, 0x53, 0xfe, 0xb5,
		0xff, 0xb7, 0x14, 0xee, 0x87, 0x66, 0x2a, 0x65, 0xa1, 0x16, 0xf8, 0xc5, 0x5a, 0xe0, 0x92, 0x17,
		0x8e, 0xca, 0xe0, 0x06, 0x36, 0xff, 0x60, 0x2a, 0x83, 0x69, 0xb7, 0xfe, 0x2d, 0x23, 0x95, 0xc2,
		0x1b, 0xca, 0xda, 0xb1, 0xba, 0xe1, 0x79, 0xd1, 0x0e, 0x4d, 0x69, 0x46, 0xc9, 0x58, 0xa8, 0xc6,
		0x30, 0x6d, 0xfd, 0x51, 0x8d, 0x41, 0x66, 0x18, 0x6b, 0x57, 0x63, 0xa0, 0x6b, 0x2f, 0x12, 0x84,
		0x48, 0x10, 0x1e, 0x56, 0x82, 0x10, 0x5d, 0x7b, 0x5f, 0x53, 0x26, 0x60, 0x8e, 0x2a, 0x08, 0xfe,
		0xc9, 0x82, 0xff, 0xe7, 0x17, 0x7a, 0xfc, 0xf1, 0xfe, 0xe7, 0xc6, 0xaa, 0x83, 0x20, 0xff, 0xe5,
		0x20, 0xff, 0x73, 0x53, 0x7d, 0x42, 0x64, 0x7f, 0x40, 0x91, 0x7d, 0xe3, 0xc8, 0xd1, 0x4c, 0x30,
		0x3f, 0x57, 0xca, 0xae, 0x45, 0xf0, 0xcf, 0x27, 0x66, 0x88, 0x82, 0xf8, 0xd2, 0xe1, 0x10, 0xc7,
		0x23, 0x8e, 0x7f, 0x7d, 0x71, 0xbc, 0x88, 0x62, 0xaa, 0xbe, 0x78, 0xcb, 0xa1, 0x10, 0xc7, 0x23,
		0x8e, 0x47, 0x1c, 0xcf, 0x16, 0xc7, 0x7f, 0xce, 0xfc, 0x57, 0xba, 0xdc, 0xa4, 0x46, 0x5b, 0xbc,
		0xcd, 0xd1, 0x16, 0x6d, 0xf1, 0xb4, 0xed, 0x64, 0x16, 0x21, 0x51, 0xd2, 0x25, 0x6b, 0x8f, 0xf7,
		0x10, 0xaa, 0xaf, 0x5e, 0x70, 0x67, 0x0b, 0x27, 0x2b, 0xe9, 0xa0, 0xea, 0x90, 0x17, 0xa9, 0x50,
		0x4b, 0x47, 0x13, 0x0e, 0x7b, 0x56, 0x7c, 0x5a, 0x2f, 0xa0, 0x1b, 0x78, 0x58, 0x7c, 0xde, 0x7c,
		0xe0, 0x63, 0x69, 0xef, 0xb7, 0xa6, 0x36, 0x34, 0x3d, 0x7f, 0xd7, 0x66, 0x97, 0xa6, 0x7d, 0xe0,
		0xc6, 0x14, 0x34, 0x3a, 0x4d, 0xbe, 0x4c, 0x68, 0xad, 0x2a, 0x38, 0x4d, 0x63, 0xc2, 0x0d, 0x3d,
		0x9c, 0x58, 0x67, 0x68, 0x51, 0x88, 0xd4, 0xe5, 0xb6, 0x4c, 0xdb, 0x73, 0x80, 0x86, 0xec, 0x25,
		0x5d, 0xf6, 0x72, 0xf9, 0x4e, 0x5f, 0x41, 0x02, 0x33, 0xfd, 0xb2, 0x9f, 0x3e, 0x7e, 0x46, 0x0a,
		0x93, 0x39, 0x85, 0x99, 0xbf, 0x67, 0x24, 0x31, 0x5f, 0x45, 0x12, 0x93, 0x20, 0x73, 0x66, 0x28,
		0x8f, 0x99, 0x69, 0x66, 0x18, 0x77, 0x2d, 0x93, 0xa9, 0x22, 0xa2, 0x1c, 0xe6, 0xda, 0x40, 0xc8,
		0x5e, 0x22, 0x7b, 0xf9, 0xfa, 0xb2, 0x97, 0x4d, 0x97, 0x13, 0xf1, 0xb2, 0x6a, 0xb8, 0xbc, 0x90,
		0xc9, 0x44, 0x26, 0xf3, 0x10, 0x32, 0x99, 0x75, 0x97, 0x6b, 0x3e, 0x80, 0x17, 0xc5, 0xf5, 0xda,
		0xf7, 0x6e, 0x55, 0xd2, 0x7c, 0xc4, 0x86, 0x53, 0xd5, 0x6c, 0xe1, 0x92, 0x2d, 0x60, 0xca, 0x85,
		0x6c, 0x6a, 0x41, 0x73, 0xc4, 0x4c, 0x2c, 0x0b, 0x9c, 0x35, 0x6c, 0x32, 0xb4, 0xe0, 0x9b, 0x47,
		0x4e, 0x14, 0x79, 0xd7, 0xa6, 0x86, 0x60, 0x69, 0x10, 0x62, 0x5b, 0xb8, 0x33, 0x2f, 0xb0, 0xdd,
		0xf0, 0x81, 0xf0, 0xd8, 0x6e, 0x6e, 0x1d, 0x56, 0x86, 0x27, 0x9a, 0xe4, 0x66, 0xbb, 0x95, 0x6c,
		0x26, 0x83, 0xc3, 0x74, 0x98, 0x36, 0x21, 0x5c, 0xa6, 0x84, 0xdd, 0xa4, 0xb0, 0x9b, 0x96, 0x16,
		0x4c, 0x0c, 0x8d, 0xa9, 0x21, 0x32, 0x39, 0xf9, 0xf7, 0x6f, 0xbc, 0x9b, 0xba, 0xdd, 0x58, 0x34,
		0xec, 0xa2, 0xb0, 0xcd, 0x50, 0x9c, 0x11, 0x0e, 0x49, 0xd3, 0x65, 0x61, 0xfd, 0x0f, 0xed, 0x22,
		0xb3, 0xa8, 0xbb, 0x30, 0x6c, 0x0c, 0xfe, 0xdc, 0x0a, 0x60, 0xd0, 0x1f, 0x8e, 0x87, 0x17, 0x67,
		0xa3, 0xe1, 0xc5, 0x5b, 0x1e, 0x41, 0x5c, 0xad, 0x01, 0x36, 0x75, 0x70, 0xd9, 0x2a, 0x20, 0xb5,
		0x19, 0xe4, 0x42, 0xbe, 0xbf, 0x65, 0x98, 0x62, 0xf1, 0x68, 0x70, 0x8a, 0xc7, 0x47, 0x34, 0xc5,
		0x34, 0xdd, 0x20, 0x78, 0xec, 0x34, 0xfd, 0x68, 0xd7, 0x6f, 0xba, 0xf1, 0x3c, 0x14, 0x1d, 0x4d,
		0xfc, 0xd0, 0x69, 0x78, 0xa2, 0xf4, 0x45, 0x37, 0xb4, 0x29, 0x82, 0x96, 0x5b, 0xfb, 0xe0, 0x56,
		0x70, 0x2b, 0xb8, 0xd5, 0x34, 0xb7, 0x52, 0x85, 0xcc, 0xc5, 0xd0, 0x39, 0xdb, 0xb0, 0xb3, 0x1d,
		0xa1, 0x5c, 0xfb, 0x36, 0x89, 0x6d, 0x19, 0x88, 0x5b, 0x5f, 0xba, 0xf4, 0xda, 0x57, 0x08, 0xa7,
		0xb7, 0x88, 0x24, 0x56, 0x16, 0xda, 0x10, 0x9b, 0xcd, 0x64, 0x71, 0x9a, 0xae, 0xb6, 0x4c, 0x18,
		0xb7, 0x29, 0x33, 0x66, 0xd2, 0x8c, 0x99, 0xb6, 0x16, 0x4d, 0x1c, 0x13, 0xfa, 0x11, 0xaf, 0x0e,
		0xf2, 0x90, 0x9d, 0x3d, 0x74, 0x67, 0x0c, 0xe1, 0x99, 0x43, 0x79, 0xbe, 0x90, 0xde, 0x48, 0x68,
		0x6f, 0x3c, 0xc4, 0x37, 0x1e, 0x07, 0x1a, 0x0b, 0xf9, 0x19, 0x43, 0x7f, 0x23, 0x29, 0x00, 0xe3,
		0xa9, 0x80, 0x4e, 0xa8, 0x02, 0x4f, 0x6a, 0x80, 0xc7, 0x4f, 0xf0, 0x8d, 0x7a, 0xdd, 0xd1, 0x54,
		0x06, 0xe1, 0x5a, 0xea, 0xcd, 0x84, 0x63, 0x0b, 0xd7, 0x55, 0x32, 0x8e, 0xf9, 0x88, 0xbd, 0x28,
		0x04, 0x8c, 0x0e, 0x46, 0x07, 0xa3, 0x83, 0xd1, 0x5b, 0x62, 0xf4, 0xc6, 0x4d, 0x88, 0x5e, 0xb2,
		0x44, 0x35, 0x9b, 0x13, 0x1d, 0x96, 0xd7, 0x88, 0x3d, 0x57, 0xda, 0x82, 0xcf, 0x61, 0x2c, 0xc6,
		0xe7, 0xf1, 0x15, 0x7d, 0xf8, 0x0a, 0xf8, 0x0a, 0xf8, 0x8a, 0x43, 0xf7, 0x15, 0xd4, 0xa9, 0xec,
		0x7c, 0x60, 0x11, 0xc7, 0x52, 0x69, 0xe9, 0xda, 0x53, 0xe1, 0xf9, 0x89, 0x62, 0x54, 0xd6, 0xbc,
		0x75, 0xc5, 0xba, 0x44, 0x26, 0x55, 0xe2, 0x31, 0x80, 0xec, 0x86, 0xd0, 0x84, 0x41, 0x6c, 0xdb,
		0x30, 0x9a, 0x32, 0x90, 0xc6, 0x0d, 0xa5, 0x71, 0x83, 0xd9, 0x01, 0xc3, 0xc9, 0x9c, 0xe8, 0x60,
		0x5a, 0x5d, 0x5c, 0x06, 0x35, 0x17, 0xe0, 0x24, 0x4a, 0xc9, 0x40, 0x37, 0x6c, 0xf8, 0x53, 0x79,
		0x25, 0xaf, 0x8a, 0x65, 0x56, 0x3a, 0x9e, 0x7c, 0x84, 0x71, 0x53, 0x6b, 0xd2, 0xe4, 0x76, 0xc5,
		0xf4, 0x9a, 0x36, 0xc1, 0xad, 0x99, 0xe2, 0xd6, 0x4c, 0x72, 0x87, 0x4c, 0x33, 0xaf, 0x89, 0x66,
		0x36, 0xd5, 0xfc, 0xf9, 0x92, 0xad, 0x6b, 0xf3, 0xb3, 0x8a, 0xec, 0xd9, 0xdd, 0x4c, 0x3f, 0xa3,
		0xea, 0xdc, 0xaa, 0x36, 0xeb, 0x04, 0x55, 0x99, 0x5f, 0x87, 0x06, 0x64, 0x91, 0x74, 0x96, 0xda,
		0x7f, 0x22, 0x29, 0x3b, 0x50, 0xed, 0x2d, 0x35, 0xeb, 0x54, 0xe5, 0xb9, 0xbe, 0x5c, 0x9d, 0x4d,
		0x43, 0xe6, 0xc7, 0x5a, 0x76, 0xb5, 0x12, 0x9e, 0xb6, 0x75, 0x68, 0x2b, 0x19, 0xeb, 0x50, 0xb5,
		0xf8, 0x34, 0x83, 0xf9, 0x6e, 0x45, 0x90, 0x08, 0xdf, 0x8e, 0x1f, 0x3c, 0xed, 0xdc, 0xb7, 0xf7,
		0x2c, 0x67, 0xf3, 0x44, 0xd8, 0x5d, 0x20, 0x7c, 0xdb, 0x95, 0x77, 0x4a, 0xb8, 0x2d, 0xbe, 0x98,
		0x61, 0xe1, 0x61, 0xd2, 0x87, 0x68, 0xef, 0x49, 0xce, 0xd3, 0x27, 0x99, 0x86, 0xca, 0x91, 0x6e,
		0xeb, 0x53, 0x34, 0xca, 0xde, 0xca, 0x7d, 0xa2, 0xdd, 0xf0, 0x21, 0x68, 0xef, 0x31, 0xc6, 0xf3,
		0xe2, 0x93, 0x6f, 0xc2, 0xf7, 0xdc, 0xf6, 0x9e, 0xe2, 0x22, 0xbb, 0x04, 0x34, 0xf8, 0x1a, 0x6c,
		0xbe, 0x0b, 0x23, 0x0f, 0xf1, 0xfd, 0xad, 0x29, 0x53, 0x4d, 0xd5, 0xed, 0x6d, 0x6f, 0x91, 0xbb,
		0xd4, 0x7d, 0x62, 0x9d, 0x1b, 0x9c, 0xe4, 0x12, 0x67, 0xc1, 0x1e, 0x83, 0xac, 0x3e, 0x40, 0xa9,
		0x9a, 0x37, 0xba, 0x34, 0xb6, 0xf2, 0x33, 0xec, 0x72, 0x10, 0x24, 0xcd, 0xf5, 0xf6, 0x7e, 0x92,
		0x2d, 0xb6, 0x67, 0x62, 0x8d, 0x4c, 0x3e, 0xc4, 0x2e, 0x1f, 0xc5, 0x52, 0xb5, 0xf6, 0xd2, 0xa3,
		0x94, 0x78, 0x28, 0x92, 0xee, 0x84, 0x7b, 0x3f, 0x47, 0xb9, 0x19, 0x9c, 0x58, 0x17, 0x06, 0x9f,
		0x61, 0x37, 0x54, 0x4d, 0xac, 0xbe, 0x19, 0xab, 0x7c, 0xe8, 0x11, 0xdc, 0x41, 0x56, 0xc4, 0xb9,
		0xf2, 0x36, 0x4c, 0x82, 0xd4, 0x67, 0xb8, 0xd2, 0x17, 0x4f, 0xe6, 0x72, 0x6d, 0xeb, 0x82, 0x91,
		0x6d, 0x43, 0xb6, 0x0d, 0xd9, 0x36, 0x64, 0xdb, 0x90, 0x6d, 0xab, 0xb5, 0x36, 0x13, 0xae, 0x23,
		0x05, 0xdb, 0x2c, 0xa9, 0x01, 0x8c, 0x66, 0x3e, 0x72, 0xb0, 0xfe, 0xc7, 0x60, 0x98, 0x66, 0xe2,
		0x48, 0xc2, 0x86, 0xd0, 0xe7, 0xba, 0x74, 0x83, 0x41, 0x98, 0xd5, 0x46, 0x79, 0xfa, 0xe6, 0x1a,
		0x31, 0x55, 0xae, 0xde, 0x52, 0xa2, 0xc1, 0x32, 0x75, 0xb4, 0x61, 0xab, 0x4a, 0x0d, 0x07, 0x97,
		0xc3, 0xcb, 0xd1, 0x78, 0x70, 0x79, 0x0e, 0xdd, 0x32, 0xa5, 0x5b, 0x47, 0x12, 0x94, 0x5d, 0x23,
		0x28, 0xdb, 0x11, 0x94, 0x19, 0x2e, 0x80, 0x58, 0x17, 0x8c, 0xa0, 0x0c, 0x41, 0x19, 0x82, 0x32,
		0x04, 0x65, 0x08, 0xca, 0x6a, 0xad, 0x4d, 0x94, 0x40, 0xf0, 0x4c, 0x24, 0x4a, 0x20, 0x50, 0x02,
		0xb1, 0xfa, 0x2c, 0x28, 0x81, 0x28, 0x7d, 0x12, 0x94, 0x40, 0x6c, 0x3c, 0x06, 0x4a, 0x20, 0x2c,
		0x94, 0x40, 0x98, 0x79, 0x12, 0x94, 0x40, 0xa0, 0x04, 0x62, 0xe3, 0x21, 0x50, 0x02, 0xb1, 0xfe,
		0x1c, 0x28, 0x81, 0x30, 0x97, 0x6d, 0x43, 0x09, 0xc4, 0xe6, 0xdc, 0x2b, 0x19, 0x85, 0xd9, 0x99,
		0x4a, 0xc3, 0xc9, 0xb6, 0x35, 0xb9, 0xc8, 0xb5, 0x21, 0xd7, 0x86, 0x5c, 0x1b, 0x72, 0x6d, 0xc8,
		0xb5, 0x21, 0xd7, 0x86, 0x5c, 0x1b, 0x72, 0x6d, 0xc8, 0xb5, 0x21, 0xd7, 0x86, 0x5c, 0x1b, 0x72,
		0x6d, 0xc8, 0xb5, 0x21, 0xd7, 0x86, 0x5c, 0x1b, 0x72, 0x6d, 0xc8, 0xb5, 0x21, 0xd7, 0x76, 0xf0,
		0xb9, 0xb6, 0x58, 0x8b, 0x5b, 0x5f, 0xda, 0xda, 0x9b, 0x19, 0x4c, 0xb4, 0x15, 0x85, 0x22, 0xcb,
		0x86, 0x2c, 0x1b, 0xb2, 0x6c, 0xc8, 0xb2, 0x21, 0xcb, 0x56, 0x6b, 0x6d, 0x26, 0x5e, 0xa0, 0x47,
		0x43, 0x83, 0x29, 0xb5, 0x0b, 0x1c, 0x33, 0xaa, 0xff, 0xc5, 0x70, 0xcc, 0xc8, 0xe4, 0x03, 0xe0,
		0x98, 0x11, 0xb7, 0x4a, 0xf5, 0x2f, 0x86, 0xc3, 0xd1, 0x78, 0x38, 0x3c, 0x1d, 0x9f, 0x8d, 0x4f,
		0x2f, 0xcf, 0xcf, 0xfb, 0xa3, 0x3e, 0x0e, 0x1c, 0x19, 0xd3, 0x32, 0x1c, 0x38, 0x3a, 0xda, 0xb0,
		0x4c, 0x9b, 0x00, 0x89, 0x1c, 0x22, 0x32, 0x69, 0x08, 0xc4, 0x10, 0x88, 0x21, 0x10, 0x43, 0x20,
		0x86, 0x40, 0xac, 0xd6, 0xda, 0xdc, 0x28, 0x77, 0x40, 0xa1, 0x43, 0xc3, 0x29, 0x6c, 0xaf, 0xd0,
		0xe1, 0x5e, 0x28, 0xf7, 0x41, 0x28, 0x69, 0xcf, 0xbc, 0x38, 0xf6, 0x82, 0x3b, 0xe6, 0xcb, 0x1d,
		0x4a, 0x1f, 0x24, 0x2b, 0x77, 0xf0, 0xc5, 0x93, 0x54, 0x7d, 0x5b, 0xb8, 0x33, 0x2f, 0x58, 0xd4,
		0xcf, 0xb4, 0xf0, 0x28, 0x83, 0xc2, 0xa3, 0x48, 0xa5, 0x42, 0xd5, 0xc6, 0x43, 0x64, 0x45, 0x0e,
		0x5f, 0xa5, 0x8c, 0x84, 0xef, 0x7d, 0x9b, 0xcf, 0x0c, 0xfb, 0xad, 0x1b, 0xa5, 0x0f, 0x92, 0x15,
		0x38, 0xf8, 0x5e, 0xf0, 0xd5, 0xfe, 0x2b, 0x11, 0xbe, 0xa7, 0x9f, 0x9e, 0xf7, 0xb3, 0x5a, 0x79,
		0x9a, 0xf3, 0x79, 0x1d, 0x8a, 0x96, 0x76, 0xa4, 0xc2, 0x5b, 0x5f, 0xce, 0xda, 0x78, 0x88, 0x51,
		0x7e, 0xf1, 0xd3, 0xcc, 0x8b, 0x67, 0xa2, 0xb0, 0xd7, 0x69, 0xbc, 0xb8, 0x61, 0x6d, 0x3f, 0x0d,
		0x05, 0x05, 0x0d, 0x45, 0x6e, 0x35, 0x85, 0x66, 0x37, 0xf3, 0xb7, 0x2e, 0x7c, 0xb3, 0xbb, 0xc6,
		0x3b, 0xec, 0x31, 0xdb, 0xdd, 0x3c, 0xbb, 0x1e, 0x64, 0xd5, 0x1a, 0x9b, 0xad, 0x28, 0xd8, 0x6d,
		0x02, 0xcd, 0xee, 0xa2, 0x97, 0x1a, 0x40, 0xb3, 0xf5, 0x2e, 0xe5, 0xe6, 0xcf, 0x6c, 0x7d, 0xc5,
		0xba, 0xf1, 0x9b, 0x58, 0x63, 0x6c, 0xdd, 0xb7, 0x9b, 0x23, 0x3a, 0xa8, 0x6b, 0x84, 0x7e, 0xf1,
		0x62, 0xfd, 0x4e, 0x6b, 0xe6, 0xbb, 0x84, 0x7e, 0xf5, 0x82, 0x0f, 0xbe, 0x4c, 0xa3, 0x5c, 0xe6,
		0x74, 0x6d, 0xef, 0x57, 0xf1, 0x58, 0x90, 0x64, 0x36, 0x59, 0xdd, 0xfb, 0xa8, 0x5c, 0xa9, 0xa4,
		0xfb, 0xd3, 0x53, 0x6f, 0x62, 0x05, 0x89, 0xef, 0x1f, 0x94, 0x26, 0xbc, 0x0b, 0x82, 0x50, 0x0b,
		0xed, 0x85, 0xbc, 0xfb, 0x55, 0xbd, 0xd8, 0xb9, 0x97, 0x33, 0x11, 0x09, 0x7d, 0x9f, 0xc2, 0xdb,
		0xc9, 0xae, 0x94, 0xc7, 0x89, 0x17, 0x68, 0xa9, 0xa6, 0xc2, 0x91, 0xf1, 0xf2, 0x47, 0xfb, 0xb1,
		0xf0, 0xfb, 0xc2, 0xaf, 0xf5, 0x53, 0x24, 0x6d, 0x2f, 0x98, 0x86, 0x6a, 0x96, 0x7d, 0x8b, 0x93,
		0x58, 0x45, 0x3b, 0xff, 0xee, 0x45, 0x71, 0xf6, 0xf7, 0x13, 0x3f, 0x74, 0x84, 0xbf, 0xfa, 0x4f,
		0xb3, 0x1b, 0x4d, 0x4f, 0x0c, 0xdd, 0xf4, 0x37, 0x7f, 0x2d, 0x5a, 0x25, 0x8e, 0x0e, 0x8a, 0x69,
		0xbf, 0x9b, 0xab, 0x8f, 0x9f, 0x6f, 0xfe, 0xf8, 0xfd, 0xd3, 0xd4, 0xbb, 0x9a, 0xfd, 0x3c, 0x73,
		0x3f, 0x46, 0x52, 0xdd, 0x5c, 0xe5, 0x6f, 0x64, 0xf9, 0xe3, 0x1f, 0x85, 0x5f, 0x2f, 0x7f, 0xfa,
		0xf2, 0x14, 0xc9, 0xab, 0xe5, 0x77, 0xba, 0xf9, 0xac, 0xa2, 0x1d, 0x7f, 0xbd, 0x8a, 0xe2, 0xf4,
		0xaf, 0x37, 0xbf, 0xa4, 0xef, 0x62, 0xe5, 0xdf, 0x79, 0xae, 0x7c, 0x77, 0xf3, 0x6e, 0xf1, 0x26,
		0xfe, 0xc9, 0xc9, 0xd8, 0xf4, 0x96, 0x93, 0x61, 0xad, 0xf4, 0xb2, 0x56, 0xc9, 0x76, 0x4a, 0xa7,
		0xf6, 0x1c, 0x4f, 0xb5, 0xf2, 0xee, 0xee, 0xa4, 0xe2, 0xbf, 0x78, 0x72, 0xab, 0x64, 0xde, 0x0b,
		0x28, 0x4f, 0x71, 0x01, 0xe5, 0xcb, 0x73, 0x83, 0x0b, 0x28, 0x89, 0x05, 0xe2, 0x02, 0xca, 0x8e,
		0xf3, 0x02, 0x7b, 0xbe, 0xdd, 0x5c, 0x5f, 0x65, 0x03, 0xfd, 0x94, 0x0d, 0x15, 0x38, 0x19, 0xd8,
		0xfd, 0x30, 0x59, 0xd0, 0x64, 0xba, 0x90, 0xa9, 0xb5, 0xd2, 0x12, 0xf3, 0x25, 0x25, 0x06, 0x12,
		0x98, 0x46, 0x0b, 0x95, 0x5a, 0xeb, 0x83, 0xfc, 0x9a, 0x74, 0xe6, 0x40, 0x53, 0x32, 0xd7, 0xaf,
		0x38, 0x5c, 0x99, 0x09, 0xc7, 0x16, 0xae, 0xab, 0x64, 0x1c, 0xf3, 0x47, 0x28, 0x45, 0x61, 0x08,
		0x4a, 0x10, 0x94, 0x20, 0x28, 0x41, 0x50, 0x72, 0xa4, 0x41, 0x49, 0x3c, 0xaf, 0x54, 0xe1, 0x0f,
		0x4a, 0xfa, 0x17, 0xaf, 0xd8, 0x7b, 0x45, 0xc2, 0xf9, 0x2a, 0xb5, 0x1d, 0xcb, 0x40, 0x67, 0x67,
		0x07, 0x0d, 0x64, 0xd9, 0x36, 0x45, 0xc2, 0x93, 0xc1, 0x93, 0xc1, 0x93, 0xc1, 0x93, 0x1d, 0xa9,
		0x27, 0x43, 0x7a, 0x6d, 0xef, 0x3f, 0x48, 0xaf, 0x21, 0x55, 0xd2, 0xaa, 0x59, 0x58, 0x55, 0x15,
		0xa4, 0xd7, 0x8e, 0x4b, 0x67, 0x90, 0x5e, 0x3b, 0xb8, 0x00, 0x45, 0xc9, 0x59, 0xa8, 0xa5, 0xad,
		0xe4, 0x5f, 0x89, 0x8c, 0x35, 0x7f, 0x74, 0xb2, 0x26, 0x0f, 0xa1, 0x09, 0x42, 0x13, 0x84, 0x26,
		0x08, 0x4d, 0x8e, 0x34, 0x34, 0xc9, 0x4f, 0xd8, 0x79, 0x51, 0x9c, 0xda, 0x3c, 0x13, 0xe9, 0x36,
		0xc6, 0x22, 0x76, 0x33, 0xc7, 0xe9, 0xcc, 0x1e, 0xa3, 0x2b, 0xf4, 0x09, 0x5e, 0x4c, 0x12, 0xa3,
		0x63, 0x5a, 0x11, 0x5c, 0xda, 0x1d, 0xd8, 0xf0, 0x33, 0x94, 0xf4, 0x04, 0x36, 0xfc, 0x04, 0x65,
		0x9d, 0x80, 0x0d, 0x3f, 0xc2, 0x46, 0xff, 0x5f, 0xc3, 0xf2, 0x4b, 0xba, 0xfe, 0x1a, 0x7e, 0x82,
		0x51, 0xf1, 0x1c, 0x5a, 0x51, 0xf6, 0x61, 0x9f, 0xa8, 0x36, 0x76, 0xf6, 0x6c, 0xc7, 0xec, 0x19,
		0x39, 0xd2, 0xb3, 0x69, 0xbf, 0x8c, 0x84, 0x99, 0x3b, 0x2c, 0x87, 0x91, 0x83, 0x5d, 0xbb, 0xec,
		0x86, 0x91, 0x53, 0x76, 0x5b, 0xad, 0x86, 0x91, 0xb3, 0x64, 0xa5, 0x2b, 0xd6, 0xc8, 0xf1, 0xad,
		0x9d, 0x6e, 0x8b, 0xbb, 0xfb, 0xea, 0xc1, 0x1d, 0x7d, 0x3a, 0x8c, 0x44, 0xc0, 0xa3, 0x3d, 0x93,
		0x71, 0x2c, 0xee, 0xe6, 0x27, 0x51, 0x0c, 0x64, 0x02, 0xd6, 0x04, 0x22, 0x15, 0x80, 0x54, 0x00,
		0x52, 0x01, 0x48, 0x05, 0x20, 0x15, 0x80, 0x54, 0x00, 0x52, 0x01, 0x48, 0x05, 0x20, 0x15, 0x80,
		0x54, 0x00, 0x52, 0x01, 0x48, 0x05, 0x20, 0x15, 0x80, 0x54, 0x00, 0x52, 0x01, 0x86, 0x53, 0x01,
		0x81, 0xf4, 0xee, 0xee, 0x6f, 0x43, 0x65, 0x1b, 0x3d, 0x7e, 0xb3, 0x4d, 0x30, 0x52, 0x03, 0x48,
		0x0d, 0x20, 0x35, 0x80, 0xd4, 0xc0, 0x91, 0xa6, 0x06, 0x70, 0x14, 0xc7, 0x90, 0x57, 0x5b, 0x1c,
		0x8d, 0xd1, 0x66, 0x2a, 0xdd, 0x56, 0xe5, 0xc1, 0x87, 0xc1, 0x87, 0xc1, 0x87, 0xc1, 0x87, 0x1d,
		0xa9, 0x0f, 0x33, 0x75, 0x06, 0xe7, 0x0c, 0x67, 0x70, 0x5e, 0xfe, 0x22, 0xad, 0x9c, 0xc1, 0x19,
		0xf4, 0x87, 0xe3, 0xe1, 0xc5, 0xd9, 0x68, 0x78, 0xf1, 0x8a, 0x0e, 0x56, 0xa4, 0x36, 0x0f, 0x67,
		0x71, 0x1a, 0xab, 0xcc, 0x18, 0x67, 0x71, 0x0e, 0x26, 0x33, 0x66, 0xe1, 0x2c, 0x0e, 0x67, 0x84,
		0xa2, 0xef, 0xcd, 0xd5, 0xdf, 0x2c, 0xa5, 0x21, 0x3a, 0x41, 0x74, 0x82, 0xe8, 0x04, 0xd1, 0xc9,
		0x91, 0x46, 0x27, 0x2b, 0xc5, 0x37, 0x99, 0xd5, 0x4b, 0x0d, 0x13, 0x2a, 0x70, 0xf6, 0x99, 0x24,
		0xf3, 0x15, 0x38, 0xf1, 0x7d, 0xa8, 0x74, 0x36, 0x4d, 0xc6, 0x6a, 0x6f, 0xfc, 0x30, 0xb8, 0x33,
		0x26, 0x71, 0x50, 0x2c, 0xb1, 0xc8, 0x84, 0xa2, 0xb6, 0x62, 0x3f, 0x51, 0xcb, 0x69, 0x32, 0x72,
		0x77, 0x4d, 0x51, 0x13, 0xcd, 0x54, 0x51, 0xac, 0x68, 0xc5, 0xc4, 0x1a, 0x60, 0xf7, 0xfc, 0x10,
		0x29, 0x5e, 0x6b, 0xdf, 0x08, 0xbf, 0xa7, 0x72, 0x40, 0xee, 0x20, 0x77, 0x90, 0x3b, 0xc8, 0xfd,
		0x48, 0xc9, 0x1d, 0xcd, 0xbd, 0xf6, 0xfe, 0x83, 0xe6, 0x5e, 0xcd, 0xe4, 0xa1, 0xb9, 0x17, 0xa9,
		0xaa, 0xa0, 0xb9, 0xd7, 0x71, 0xe9, 0x0c, 0x36, 0x14, 0x0e, 0x2e, 0x14, 0x89, 0xa5, 0x3f, 0xb5,
		0x5d, 0xa9, 0xa5, 0xa3, 0xa5, 0x6b, 0xae, 0xc7, 0x57, 0xb9, 0x58, 0x04, 0x2a, 0x08, 0x54, 0x10,
		0xa8, 0x20, 0x50, 0x39, 0xd2, 0x40, 0x05, 0xe7, 0x7b, 0x6b, 0xcd, 0x0f, 0xce, 0xf7, 0xe2, 0x7c,
		0x2f, 0xce, 0xf7, 0xe2, 0x7c, 0x6f, 0x63, 0x3b, 0x82, 0xf3, 0xbd, 0xbc, 0x62, 0x71, 0xbe, 0x17,
		0xe7, 0x7b, 0x71, 0xbe, 0xf7, 0x48, 0xd2, 0x02, 0x81, 0x3b, 0xbf, 0x1a, 0x28, 0xfb, 0x5f, 0x5b,
		0xc9, 0x99, 0xf0, 0x02, 0x4e, 0x0a, 0x2b, 0xa4, 0x06, 0xb6, 0x89, 0x46, 0x7a, 0x00, 0xe9, 0x01,
		0xa4, 0x07, 0x90, 0x1e, 0x38, 0xd2, 0xf4, 0x00, 0xf6, 0x31, 0xf7, 0xfe, 0x83, 0x7d, 0xcc, 0x66,
		0xf2, 0xb0, 0x8f, 0x49, 0xaa, 0x2a, 0xd8, 0xc7, 0x3c, 0x2e, 0x9d, 0xc1, 0x3e, 0xe6, 0xc1, 0x05,
		0x2c, 0xda, 0x74, 0x6f, 0x62, 0x8d, 0xde, 0xc4, 0x08, 0x4e, 0x10, 0x9c, 0x20, 0x38, 0x79, 0x1d,
		0xc1, 0x09, 0xf6, 0x2e, 0x6b, 0xcd, 0x0f, 0xf6, 0x2e, 0xb1, 0x77, 0x89, 0xbd, 0x4b, 0xec, 0x5d,
		0x36, 0xb6, 0x23, 0xd8, 0xbb, 0xe4, 0x15, 0x8b, 0xbd, 0x4b, 0xec, 0x5d, 0x62, 0xef, 0xf2, 0x58,
		0x52, 0x01, 0xed, 0xf4, 0x26, 0xd6, 0xe8, 0x4d, 0x8c, 0xd4, 0x00, 0x52, 0x03, 0x48, 0x0d, 0xbc,
		0xae, 0xd4, 0x00, 0x7a, 0x13, 0x1b, 0xf2, 0x6a, 0x46, 0x7b, 0x13, 0x6b, 0xf4, 0x26, 0x86, 0x0f,
		0x83, 0x0f, 0x83, 0x0f, 0x7b, 0x15, 0x3e, 0x0c, 0xbd, 0x89, 0xf7, 0xfd, 0x83, 0xde, 0xc4, 0x44,
		0x82, 0xd1, 0x9b, 0x98, 0x52, 0x65, 0xd0, 0x9b, 0xd8, 0x90, 0xca, 0xa0, 0x04, 0x67, 0xd7, 0x9f,
		0xeb, 0xd7, 0x1e, 0xa1, 0x18, 0xeb, 0x4d, 0xac, 0xd1, 0x9b, 0x18, 0xd1, 0x09, 0xa2, 0x13, 0x44,
		0x27, 0xaf, 0x20, 0x3a, 0x41, 0x6f, 0xe2, 0xfa, 0x93, 0x84, 0xde, 0xc4, 0xd4, 0x12, 0xd1, 0x9b,
		0xb8, 0xae, 0x28, 0xf4, 0x26, 0x3e, 0x0c, 0x8a, 0x7f, 0xe5, 0xbb, 0xe7, 0x46, 0x7a, 0x13, 0x6b,
		0xf4, 0x26, 0x06, 0xb9, 0x83, 0xdc, 0x41, 0xee, 0x47, 0x4d, 0xee, 0x38, 0xd3, 0xbb, 0xf7, 0x1f,
		0x9c, 0xe9, 0x6d, 0x26, 0x0f, 0x67, 0x7a, 0x49, 0x55, 0x05, 0x67, 0x7a, 0x8f, 0x4b, 0x67, 0xb0,
		0xa1, 0x70, 0x70, 0xa1, 0xc8, 0x83, 0x12, 0x91, 0x1d, 0x6b, 0xa1, 0x0d, 0x6c, 0x27, 0x14, 0x64,
		0x21, 0x24, 0x41, 0x48, 0x82, 0x90, 0x04, 0x21, 0xc9, 0x91, 0x86, 0x24, 0x2b, 0x9b, 0x09, 0xec,
		0x66, 0xcf, 0xc2, 0x76, 0x42, 0x7d, 0x69, 0xcb, 0x03, 0xbd, 0x46, 0xe6, 0x29, 0x97, 0xdb, 0x7f,
		0xf6, 0x88, 0x91, 0x74, 0xcd, 0x49, 0x1d, 0xcc, 0x77, 0x32, 0x9c, 0xaf, 0xd2, 0xb5, 0xc3, 0x44,
		0x1b, 0xfe, 0xce, 0x67, 0xc5, 0x5d, 0x8d, 0x82, 0x68, 0xec, 0x6d, 0xec, 0x27, 0x6a, 0x5d, 0x4d,
		0xcd, 0x6c, 0x38, 0x94, 0xab, 0x8b, 0x99, 0x23, 0x9b, 0x25, 0xca, 0x62, 0xe6, 0xa8, 0xe6, 0xea,
		0xca, 0xc4, 0x21, 0xc5, 0x83, 0x8c, 0x6d, 0xb4, 0x5a, 0x34, 0x39, 0x35, 0xd8, 0x5a, 0xb5, 0x4c,
		0x28, 0xa2, 0x1d, 0x44, 0x3b, 0x88, 0x76, 0x10, 0xed, 0x1c, 0x69, 0xb4, 0x83, 0x0d, 0x98, 0xbd,
		0xff, 0x60, 0x03, 0xa6, 0x99, 0x3c, 0x6c, 0xc0, 0x90, 0xaa, 0x0a, 0x36, 0x60, 0x8e, 0x4b, 0x67,
		0xb0, 0x01, 0xc3, 0x1b, 0xa4, 0xbc, 0xe9, 0xf0, 0x0a, 0xef, 0xbd, 0x0b, 0x82, 0x50, 0x8b, 0x54,
		0xd3, 0x59, 0x16, 0x75, 0x2f, 0x76, 0xee, 0xe5, 0x4c, 0x2c, 0xca, 0x0e, 0x7b, 0x27, 0xbb, 0x18,
		0xec, 0xc4, 0x0b, 0xb4, 0x54, 0x53, 0xe1, 0xc8, 0x78, 0xf9, 0xa3, 0xfd, 0x58, 0xf8, 0x7d, 0xe1,
		0xd7, 0xfa, 0x29, 0x92, 0xb6, 0x17, 0x4c, 0x43, 0x35, 0xcb, 0x9e, 0xfe, 0x24, 0x56, 0xd1, 0xce,
		0xbf, 0x7b, 0x51, 0x9c, 0xfd, 0xfd, 0xc4, 0x0f, 0x1d, 0xe1, 0xaf, 0xfe, 0x53, 0xcf, 0x95, 0xb6,
		0xe8, 0x71, 0xdc, 0xd6, 0xa1, 0x55, 0xe2, 0xe8, 0xa0, 0x18, 0x4e, 0xdc, 0x5c, 0x7d, 0xfc, 0x7c,
		0xf3, 0xc7, 0xef, 0x9f, 0xa6, 0xde, 0xd5, 0xec, 0xe7, 0x99, 0xfb, 0x31, 0x92, 0xea, 0xe6, 0x2a,
		0xff, 0xe2, 0xcb, 0x1f, 0xff, 0x28, 0xfc, 0x7a, 0xf9, 0x53, 0xca, 0x67, 0x57, 0xcb, 0x47, 0xbf,
		0xf9, 0xac, 0xa2, 0x1d, 0x7f, 0xbd, 0x8a, 0xe2, 0xf4, 0xaf, 0x37, 0xbf, 0xa4, 0x5f, 0x79, 0xe5,
		0xdf, 0x79, 0xae, 0x7c, 0x47, 0xcb, 0xbc, 0x74, 0x6a, 0x4e, 0xa8, 0xe2, 0xbd, 0x6c, 0x6a, 0x6f,
		0xc9, 0x55, 0x7b, 0xd9, 0x62, 0x63, 0x3e, 0x3e, 0xf1, 0xa2, 0x7c, 0x4e, 0xcb, 0x13, 0x0f, 0xcb,
		0x15, 0x9b, 0x73, 0xc6, 0xe4, 0x6d, 0xc5, 0xe2, 0xdc, 0x31, 0xb8, 0xb1, 0xd8, 0xdb, 0x58, 0xcc,
		0xdd, 0x62, 0xac, 0xdd, 0x6d, 0x17, 0xfb, 0xde, 0x53, 0x3c, 0x4b, 0x43, 0xc4, 0xb1, 0x54, 0x5a,
		0xba, 0x59, 0x6f, 0xc0, 0x44, 0x19, 0x28, 0xc6, 0xd8, 0x90, 0xc8, 0x9b, 0xa4, 0xec, 0x23, 0x49,
		0xd9, 0x39, 0xc3, 0x68, 0xca, 0x40, 0x1a, 0x37, 0x94, 0xc6, 0x0d, 0x66, 0x07, 0x0c, 0x27, 0x6f,
		0x94, 0xc6, 0x95, 0xa4, 0xe4, 0x32, 0xa8, 0xb9, 0x00, 0x27, 0x51, 0x4a, 0x06, 0x9a, 0xb9, 0xc4,
		0x6d, 0x63, 0x25, 0xaf, 0x8a, 0x65, 0x56, 0x3a, 0xde, 0x7d, 0x20, 0x63, 0xa6, 0xd6, 0xa4, 0xc9,
		0xed, 0x8a, 0xe9, 0x35, 0x6d, 0x82, 0x5b, 0x33, 0xc5, 0xad, 0x99, 0xe4, 0x0e, 0x99, 0x66, 0x43,
		0x69, 0x3a, 0xee, 0x7a, 0x17, 0xee, 0x7d, 0xa5, 0x8d, 0xb5, 0x99, 0x57, 0xd3, 0x2d, 0x50, 0x75,
		0x6e, 0x55, 0x6d, 0x69, 0xa4, 0xd9, 0xbd, 0x81, 0xba, 0xba, 0x5c, 0x96, 0x91, 0xfa, 0xba, 0xe5,
		0x44, 0x9a, 0xac, 0xb3, 0xcb, 0xa5, 0x2e, 0xeb, 0xed, 0x56, 0x66, 0xd3, 0x90, 0xf9, 0xb1, 0xb6,
		0x5e, 0xa5, 0xd1, 0xda, 0xd3, 0x94, 0x5c, 0xaa, 0xd1, 0xda, 0xb3, 0x94, 0x5d, 0xaf, 0xd1, 0xda,
		0xc3, 0x6c, 0x5c, 0xb4, 0xd1, 0xda, 0x93, 0x94, 0x5c, 0xb9, 0xd1, 0xda, 0xb3, 0x8c, 0xe6, 0xed,
		0x2f, 0x12, 0xed, 0x86, 0x0f, 0x41, 0x7b, 0x8f, 0x31, 0x9e, 0x77, 0x74, 0xfc, 0x26, 0x7c, 0xcf,
		0x6d, 0xef, 0x29, 0x2e, 0x8a, 0x05, 0xa5, 0xab, 0x4f, 0x61, 0xe4, 0x21, 0xbe, 0xbf, 0x35, 0x65,
		0xaa, 0x4d, 0xd5, 0x98, 0xe6, 0x22, 0x77, 0xa9, 0xbb, 0x91, 0x5b, 0x4a, 0xf2, 0x27, 0x29, 0x71,
		0x16, 0xc6, 0xf6, 0x70, 0xe7, 0x0f, 0x50, 0xaa, 0xe6, 0xac, 0xe5, 0x28, 0x1b, 0xcf, 0xb0, 0xcb,
		0x41, 0x18, 0x29, 0xc5, 0xcd, 0x9f, 0x64, 0x8b, 0xed, 0x31, 0x72, 0x93, 0xc8, 0xf2, 0x21, 0x76,
		0xf9, 0x28, 0x23, 0x15, 0xc2, 0xeb, 0x8f, 0x52, 0xe2, 0xa1, 0x8c, 0x5c, 0xeb, 0x92, 0x3f, 0x47,
		0xb9, 0x19, 0x9c, 0x58, 0x17, 0x06, 0x9f, 0x61, 0x37, 0x54, 0x71, 0x57, 0x51, 0x9b, 0x89, 0xaf,
		0xac, 0x03, 0x2e, 0xb4, 0x60, 0xf4, 0x57, 0x3d, 0x57, 0xde, 0x86, 0x49, 0x90, 0xfa, 0x0c, 0x57,
		0xfa, 0xe2, 0xc9, 0x5c, 0xae, 0x6d, 0x5d, 0x30, 0xb2, 0x6d, 0xc8, 0xb6, 0x21, 0xdb, 0x86, 0x6c,
		0x1b, 0xb2, 0x6d, 0xb5, 0xd6, 0x26, 0x7b, 0x35, 0xf7, 0xba, 0x25, 0x35, 0x80, 0xd1, 0x86, 0xaa,
		0xbb, 0x9f, 0xff, 0x18, 0x0c, 0xd3, 0x4c, 0x56, 0x7b, 0xe7, 0x42, 0x0d, 0x57, 0x7d, 0xe7, 0x72,
		0xdb, 0xaa, 0xe4, 0x5d, 0xae, 0x11, 0xd3, 0x15, 0xbd, 0x86, 0x13, 0x0d, 0x96, 0xe9, 0xaa, 0xf0,
		0x0d, 0x95, 0x32, 0x5d, 0x1d, 0x0e, 0xdd, 0x32, 0x10, 0x2e, 0x99, 0x91, 0x72, 0x8d, 0xa0, 0x6c,
		0x47, 0x50, 0x66, 0xb8, 0x00, 0x62, 0x5d, 0x30, 0x82, 0x32, 0x04, 0x65, 0x08, 0xca, 0x10, 0x94,
		0x21, 0x28, 0xab, 0xb5, 0x36, 0x51, 0x02, 0xc1, 0x33, 0x91, 0x28, 0x81, 0x40, 0x09, 0xc4, 0xea,
		0xb3, 0xa0, 0x04, 0xa2, 0xf4, 0x49, 0x50, 0x02, 0xb1, 0xf1, 0x18, 0x28, 0x81, 0xb0, 0x50, 0x02,
		0x61, 0xe6, 0x49, 0x50, 0x02, 0x81, 0x12, 0x88, 0x8d, 0x87, 0x40, 0x09, 0xc4, 0xfa, 0x73, 0xa0,
		0x04, 0xc2, 0x5c, 0xb6, 0x0d, 0x25, 0x10, 0x9b, 0x73, 0xaf, 0x64, 0x14, 0x66, 0x67, 0x2a, 0x0d,
		0x27, 0xdb, 0xd6, 0xe4, 0x22, 0xd7, 0x86, 0x5c, 0x1b, 0x72, 0x6d, 0xc8, 0xb5, 0x21, 0xd7, 0x86,
		0x5c, 0x1b, 0x72, 0x6d, 0xc8, 0xb5, 0x21, 0xd7, 0x86, 0x5c, 0x1b, 0x72, 0x6d, 0xc8, 0xb5, 0x21,
		0xd7, 0x86, 0x5c, 0x1b, 0x72, 0x6d, 0xc8, 0xb5, 0x21, 0xd7, 0x86, 0x5c, 0xdb, 0xc1, 0xe7, 0xda,
		0x62, 0x2d, 0x6e, 0x7d, 0x99, 0x5d, 0xb5, 0x60, 0x2e, 0xd1, 0x56, 0x14, 0x8a, 0x2c, 0x1b, 0xb2,
		0x6c, 0xc8, 0xb2, 0x21, 0xcb, 0x86, 0x2c, 0x5b, 0xad, 0xb5, 0x99, 0x78, 0x81, 0x1e, 0x0d, 0x0d,
		0xa6, 0xd4, 0x2e, 0x70, 0xcc, 0xa8, 0xfe, 0x17, 0xc3, 0x31, 0x23, 0x93, 0x0f, 0x80, 0x63, 0x46,
		0xdc, 0x2a, 0xd5, 0xbf, 0x18, 0x0e, 0x47, 0xe3, 0xe1, 0xf0, 0x74, 0x7c, 0x36, 0x3e, 0xbd, 0x3c,
		0x3f, 0xef, 0x8f, 0xfa, 0x38, 0x70, 0x64, 0x4c, 0xcb, 0x70, 0xe0, 0xe8, 0x68, 0xc3, 0x32, 0x6d,
		0x02, 0x24, 0x72, 0x88, 0xc8, 0xa4, 0x21, 0x10, 0x43, 0x20, 0x86, 0x40, 0x0c, 0x81, 0x18, 0x02,
		0xb1, 0x5a, 0x6b, 0x73, 0xa3, 0xdc, 0x01, 0x85, 0x0e, 0x0d, 0xa7, 0xb0, 0xbd, 0x42, 0x87, 0x7b,
		0xa1, 0xdc, 0x07, 0xa1, 0xa4, 0x3d, 0xf3, 0xe2, 0xd8, 0x0b, 0xee, 0x98, 0x2f, 0x77, 0x28, 0x7d,
		0x90, 0xac, 0xdc, 0xc1, 0x17, 0x4f, 0x52, 0xf5, 0x6d, 0xe1, 0xce, 0xbc, 0x60, 0x51, 0x3f, 0xd3,
		0xc2, 0xa3, 0x0c, 0x0a, 0x8f, 0x22, 0x95, 0x0a, 0x55, 0x1b, 0x0f, 0x91, 0x15, 0x39, 0x7c, 0x95,
		0x32, 0x12, 0xbe, 0xf7, 0x6d, 0x3e, 0x33, 0xec, 0xb7, 0x6e, 0x94, 0x3e, 0x48, 0x56, 0xe0, 0xe0,
		0x7b, 0xc1, 0x57, 0xfb, 0xaf, 0x44, 0xf8, 0x9e, 0x7e, 0x7a, 0xde, 0xcf, 0x6a, 0xe5, 0x69, 0xce,
		0xe7, 0x75, 0x28, 0x5a, 0xda, 0x91, 0x0a, 0x6f, 0x7d, 0x39, 0x6b, 0xe3, 0x21, 0x46, 0xf9, 0xc5,
		0x4f, 0x33, 0x2f, 0x9e, 0x89, 0xc2, 0x5e, 0xa7, 0xf1, 0xe2, 0x86, 0xb5, 0xfd, 0x34, 0x14, 0x14,
		0x34, 0x14, 0xb9, 0xd5, 0x14, 0x9a, 0xdd, 0xcc, 0xdf, 0xba, 0xf0, 0xcd, 0xee, 0x1a, 0xef, 0xb0,
		0xc7, 0x6c, 0x77, 0xf3, 0xec, 0x7a, 0x90, 0x55, 0x6b, 0x6c, 0xb6, 0xa2, 0x60, 0xb7, 0x09, 0x34,
		0xbb, 0x8b, 0x5e, 0x6a, 0x00, 0xcd, 0xd6, 0xbb, 0x94, 0x9b, 0x3f, 0xb3, 0xf5, 0x15, 0xeb, 0xc6,
		0x6f, 0x62, 0x8d, 0xb1, 0x75, 0xdf, 0x6e, 0x8e, 0xe8, 0xa0, 0xae, 0x11, 0xfa, 0xc5, 0x8b, 0xf5,
		0x3b, 0xad, 0x99, 0xef, 0x12, 0xfa, 0xd5, 0x0b, 0x3e, 0xf8, 0x32, 0x8d, 0x72, 0x99, 0xd3, 0xb5,
		0xbd, 0x5f, 0xc5, 0x63, 0x41, 0x92, 0xd9, 0x64, 0x75, 0xef, 0xa3, 0x72, 0xa5, 0x92, 0xee, 0x4f,
		0x4f, 0xbd, 0x89, 0x15, 0x24, 0xbe, 0x7f, 0x50, 0x9a, 0xc0, 0x7c, 0x09, 0xee, 0xd2, 0x6a, 0x1e,
		0xca, 0x65, 0xb8, 0xb7, 0x27, 0x86, 0x6e, 0xfa, 0xb3, 0xba, 0x7e, 0x4b, 0xee, 0x4f, 0x37, 0xef,
		0x16, 0x6f, 0xe2, 0x9f, 0x9c, 0x8c, 0xcd, 0x70, 0xed, 0x34, 0xc3, 0x9d, 0xa8, 0x59, 0xab, 0x64,
		0x3b, 0xa5, 0x53, 0x7b, 0x8e, 0xa7, 0x5a, 0x79, 0x77, 0x77, 0x52, 0xf1, 0x5f, 0x3c, 0xb9, 0x55,
		0x32, 0xef, 0x05, 0x94, 0xa7, 0xb8, 0x80, 0xf2, 0xe5, 0xb9, 0xc1, 0x05, 0x94, 0xc4, 0x02, 0x71,
		0x01, 0x65, 0xc7, 0x79, 0x81, 0x3d, 0xdf, 0x6e, 0xae, 0xaf, 0xb2, 0x81, 0x7e, 0xca, 0x86, 0x0a,
		0x9c, 0x0c, 0xec, 0x7e, 0x98, 0x2c, 0x68, 0x32, 0x5d, 0xc8, 0xd4, 0x5a, 0x69, 0x89, 0xf9, 0x92,
		0x12, 0x03, 0x09, 0x4c, 0xa3, 0x85, 0x4a, 0xad, 0xf5, 0x41, 0x7e, 0x4d, 0x3a, 0x73, 0xa0, 0x29,
		0x99, 0xeb, 0x57, 0x1c, 0xae, 0xcc, 0x84, 0x63, 0x0b, 0xd7, 0x55, 0x32, 0x8e, 0xf9, 0x23, 0x94,
		0xa2, 0x30, 0x04, 0x25, 0x08, 0x4a, 0x10, 0x94, 0x20, 0x28, 0x39, 0xd2, 0xa0, 0x24, 0x9e, 0x57,
		0xaa, 0xf0, 0x07, 0x25, 0xfd, 0x8b, 0x57, 0xec, 0xbd, 0x22, 0xe1, 0x7c, 0x95, 0xda, 0x8e, 0x65,
		0xa0, 0xb3, 0xb3, 0x83, 0x06, 0xb2, 0x6c, 0x9b, 0x22, 0xe1, 0xc9, 0xe0, 0xc9, 0xe0, 0xc9, 0xe0,
		0xc9, 0x8e, 0xd4, 0x93, 0x21, 0xbd, 0xb6, 0xf7, 0x1f, 0xa4, 0xd7, 0x90, 0x2a, 0x69, 0xd5, 0x2c,
		0xac, 0xaa, 0x0a, 0xd2, 0x6b, 0xc7, 0xa5, 0x33, 0x48, 0xaf, 0x1d, 0x5c, 0x80, 0xa2, 0xe4, 0x2c,
		0xd4, 0xd2, 0x56, 0xf2, 0xaf, 0x44, 0xc6, 0x9a, 0x3f, 0x3a, 0x59, 0x93, 0x87, 0xd0, 0x04, 0xa1,
		0x09, 0x42, 0x13, 0x84, 0x26, 0x47, 0x1a, 0x9a, 0xe4, 0x27, 0xec, 0xbc, 0x28, 0x4e, 0x6d, 0x9e,
		0x89, 0x74, 0x1b, 0x63, 0x11, 0xbb, 0x99, 0xe3, 0x74, 0x66, 0x8f, 0xd1, 0x15, 0xfa, 0x04, 0x2f,
		0x26, 0x89, 0xd1, 0x31, 0xad, 0x08, 0x2e, 0xed, 0x0e, 0x6c, 0xf8, 0x19, 0x4a, 0x7a, 0x02, 0x1b,
		0x7e, 0x82, 0xb2, 0x4e, 0xc0, 0x86, 0x1f, 0x61, 0xa3, 0xff, 0xaf, 0x61, 0xf9, 0x25, 0x5d, 0x7f,
		0x0d, 0x3f, 0xc1, 0xa8, 0x78, 0x0e, 0xad, 0x28, 0xfb, 0xb0, 0x4f, 0x54, 0x1b, 0x3b, 0x7b, 0xb6,
		0x63, 0xf6, 0x8c, 0x1c, 0xe9, 0xd9, 0xb4, 0x5f, 0x46, 0xc2, 0xcc, 0x1d, 0x96, 0xc3, 0xc8, 0xc1,
		0xae, 0x5d, 0x76, 0xc3, 0xc8, 0x29, 0xbb, 0xad, 0x56, 0xc3, 0xc8, 0x59, 0xb2, 0xd2, 0x15, 0x6b,
		0xe4, 0xf8, 0xd6, 0x4e, 0xb7, 0xc5, 0xdd, 0x7d, 0xf5, 0xe0, 0x8e, 0x3e, 0x1d, 0x46, 0x22, 0xe0,
		0xd1, 0x9e, 0xc9, 0x38, 0x16, 0x77, 0xf3, 0x93, 0x28, 0x06, 0x32, 0x01, 0x6b, 0x02, 0x91, 0x0a,
		0x40, 0x2a, 0x00, 0xa9, 0x00, 0xa4, 0x02, 0x90, 0x0a, 0x40, 0x2a, 0x00, 0xa9, 0x00, 0xa4, 0x02,
		0x90, 0x0a, 0x40, 0x2a, 0x00, 0xa9, 0x00, 0xa4, 0x02, 0x90, 0x0a, 0x40, 0x2a, 0x00, 0xa9, 0x00,
		0xc3, 0xa9, 0x80, 0x40, 0x7a, 0x77, 0xf7, 0xb7, 0xa1, 0xb2, 0x8d, 0x1e, 0xbf, 0xd9, 0x26, 0x18,
		0xa9, 0x01, 0xa4, 0x06, 0x90, 0x1a, 0x40, 0x6a, 0xe0, 0x48, 0x53, 0x03, 0x38, 0x8a, 0x63, 0xc8,
		0xab, 0x2d, 0x8e, 0xc6, 0x68, 0x33, 0x95, 0x6e, 0xab, 0xf2, 0xe0, 0xc3, 0xe0, 0xc3, 0xe0, 0xc3,
		0xe0, 0xc3, 0x8e, 0xd4, 0x87, 0x99, 0x3a, 0x83, 0x73, 0x86, 0x33, 0x38, 0x2f, 0x7f, 0x91, 0x56,
		0xce, 0xe0, 0x0c, 0xfa, 0xc3, 0xf1, 0xf0, 0xe2, 0x6c, 0x34, 0xbc, 0x78, 0x45, 0x07, 0x2b, 0x52,
		0x9b, 0x87, 0xb3, 0x38, 0x8d, 0x55, 0x66, 0x8c, 0xb3, 0x38, 0x07, 0x93, 0x19, 0xb3, 0x70, 0x16,
		0x87, 0x33, 0x42, 0xd1, 0xf7, 0xe6, 0xea, 0x6f, 0x96, 0xd2, 0x10, 0x9d, 0x20, 0x3a, 0x41, 0x74,
		0x82, 0xe8, 0xe4, 0x48, 0xa3, 0x93, 0x95, 0xe2, 0x9b, 0xcc, 0xea, 0xa5, 0x86, 0x09, 0x15, 0x38,
		0xfb, 0x4c, 0x92, 0xf9, 0x0a, 0x9c, 0xf8, 0x3e, 0x54, 0x3a, 0x9b, 0x26, 0x63, 0xb5, 0x37, 0x7e,
		0x18, 0xdc, 0x19, 0x93, 0x38, 0x28, 0x96, 0x58, 0x64, 0x42, 0x51, 0x5b, 0xb1, 0x9f, 0xa8, 0xe5,
		0x34, 0x19, 0xb9, 0xbb, 0xa6, 0xa8, 0x89, 0x66, 0xaa, 0x28, 0x56, 0xb4, 0x62, 0x62, 0x0d, 0xb0,
		0x7b, 0x7e, 0x88, 0x14, 0xaf, 0xb5, 0x6f, 0x84, 0xdf, 0x53, 0x39, 0x20, 0x77, 0x90, 0x3b, 0xc8,
		0x1d, 0xe4, 0x7e, 0xa4, 0xe4, 0x8e, 0xe6, 0x5e, 0x7b, 0xff, 0x41, 0x73, 0xaf, 0x66, 0xf2, 0xd0,
		0xdc, 0x8b, 0x54, 0x55, 0xd0, 0xdc, 0xeb, 0xb8, 0x74, 0x06, 0x1b, 0x0a, 0x07, 0x17, 0x8a, 0xc4,
		0xd2, 0x9f, 0xda, 0xae, 0xd4, 0xd2, 0xd1, 0xd2, 0x35, 0xd7, 0xe3, 0xab, 0x5c, 0x2c, 0x02, 0x15,
		0x04, 0x2a, 0x08, 0x54, 0x10, 0xa8, 0x1c, 0x69, 0xa0, 0x82, 0xf3, 0xbd, 0xb5, 0xe6, 0x07, 0xe7,
		0x7b, 0x71, 0xbe, 0x17, 0xe7, 0x7b, 0x71, 0xbe, 0xb7, 0xb1, 0x1d, 0xc1, 0xf9, 0x5e, 0x5e, 0xb1,
		0x38, 0xdf, 0x8b, 0xf3, 0xbd, 0x38, 0xdf, 0x7b, 0x24, 0x69, 0x81, 0xc0, 0x9d, 0x5f, 0x0d, 0x94,
		0xfd, 0xaf, 0xad, 0xe4, 0x4c, 0x78, 0x01, 0x27, 0x85, 0x15, 0x52, 0x03, 0xdb, 0x44, 0x23, 0x3d,
		0x80, 0xf4, 0x00, 0xd2, 0x03, 0x48, 0x0f, 0x1c, 0x69, 0x7a, 0x00, 0xfb, 0x98, 0x7b, 0xff, 0xc1,
		0x3e, 0x66, 0x33, 0x79, 0xd8, 0xc7, 0x24, 0x55, 0x15, 0xec, 0x63, 0x1e, 0x97, 0xce, 0x60, 0x1f,
		0xf3, 0xe0, 0x02, 0x16, 0x6d, 0xba, 0x37, 0xb1, 0x46, 0x6f, 0x62, 0x04, 0x27, 0x08, 0x4e, 0x10,
		0x9c, 0xbc, 0x8e, 0xe0, 0x04, 0x7b, 0x97, 0xb5, 0xe6, 0x07, 0x7b, 0x97, 0xd8, 0xbb, 0xc4, 0xde,
		0x25, 0xf6, 0x2e, 0x1b, 0xdb, 0x11, 0xec, 0x5d, 0xf2, 0x8a, 0xc5, 0xde, 0x25, 0xf6, 0x2e, 0xb1,
		0x77, 0x79, 0x2c, 0xa9, 0x80, 0x76, 0x7a, 0x13, 0x6b, 0xf4, 0x26, 0x46, 0x6a, 0x00, 0xa9, 0x01,
		0xa4, 0x06, 0x5e, 0x57, 0x6a, 0x00, 0xbd, 0x89, 0x0d, 0x79, 0x35, 0xa3, 0xbd, 0x89, 0x35, 0x7a,
		0x13, 0xc3, 0x87, 0xc1, 0x87, 0xc1, 0x87, 0xbd, 0x0a, 0x1f, 0x86, 0xde, 0xc4, 0xfb, 0xfe, 0x41,
		0x6f, 0x62, 0x22, 0xc1, 0xe8, 0x4d, 0x4c, 0xa9, 0x32, 0xe8, 0x4d, 0x6c, 0x48, 0x65, 0x50, 0x82,
		0xb3, 0xeb, 0xcf, 0xf5, 0x6b, 0x8f, 0x50, 0x8c, 0xf5, 0x26, 0xd6, 0xe8, 0x4d, 0x8c, 0xe8, 0x04,
		0xd1, 0x09, 0xa2, 0x93, 0x57, 0x10, 0x9d, 0xa0, 0x37, 0x71, 0xfd, 0x49, 0x42, 0x6f, 0x62, 0x6a,
		0x89, 0xe8, 0x4d, 0x5c, 0x57, 0x14, 0x7a, 0x13, 0x1f, 0x06, 0xc5, 0xbf, 0xf2, 0xdd, 0x73, 0x23,
		0xbd, 0x89, 0x35, 0x7a, 0x13, 0x83, 0xdc, 0x41, 0xee, 0x20, 0xf7, 0xa3, 0x26, 0x77, 0x9c, 0xe9,
		0xdd, 0xfb, 0x0f, 0xce, 0xf4, 0x36, 0x93, 0x87, 0x33, 0xbd, 0xa4, 0xaa, 0x82, 0x33, 0xbd, 0xc7,
		0xa5, 0x33, 0xd8, 0x50, 0x38, 0xb8, 0x50, 0xe4, 0x41, 0x89, 0xc8, 0x8e, 0xb5, 0xd0, 0x06, 0xb6,
		0x13, 0x0a, 0xb2, 0x10, 0x92, 0x20, 0x24, 0x41, 0x48, 0x82, 0x90, 0xe4, 0x48, 0x43, 0x92, 0x95,
		0xcd, 0x04, 0x76, 0xb3, 0x67, 0x61, 0x3b, 0xa1, 0xbe, 0xb4, 0xe5, 0x81, 0x5e, 0x23, 0xf3, 0x94,
		0xcb, 0xed, 0x3f, 0x7b, 0xc4, 0x48, 0xba, 0xe6, 0xa4, 0x0e, 0xe6, 0x3b, 0x19, 0xce, 0x57, 0xe9,
		0xda, 0x61, 0xa2, 0x0d, 0x7f, 0xe7, 0xb3, 0xe2, 0xae, 0x46, 0x41, 0x34, 0xf6, 0x36, 0xf6, 0x13,
		0xb5, 0xae, 0xa6, 0x66, 0x36, 0x1c, 0xca, 0xd5, 0xc5, 0xcc, 0x91, 0xcd, 0x12, 0x65, 0x31, 0x73,
		0x54, 0x73, 0x75, 0x65, 0xe2, 0x90, 0xe2, 0x41, 0xc6, 0x36, 0x5a, 0x2d, 0x9a, 0x9c, 0x1a, 0x6c,
		0xad, 0x5a, 0x26, 0x14, 0xd1, 0x0e, 0xa2, 0x1d, 0x44, 0x3b, 0x88, 0x76, 0x8e, 0x34, 0xda, 0xc1,
		0x06, 0xcc, 0xde, 0x7f, 0xb0, 0x01, 0xd3, 0x4c, 0x1e, 0x36, 0x60, 0x48, 0x55, 0x05, 0x1b, 0x30,
		0xc7, 0xa5, 0x33, 0xd8, 0x80, 0xe1, 0x0d, 0x52, 0xde, 0x74, 0x78, 0x85, 0xf7, 0xde, 0x05, 0x41,
		0xa8, 0x45, 0xaa, 0xe9, 0x2c, 0x8b, 0xba, 0x17, 0x3b, 0xf7, 0x72, 0x26, 0x16, 0x65, 0x87, 0xbd,
		0x93, 0x5d, 0x0c, 0x76, 0xe2, 0x05, 0x5a, 0xaa, 0xa9, 0x70, 0x64, 0xbc, 0xfc, 0xd1, 0x7e, 0x2c,
		0xfc, 0xbe, 0xf0, 0x6b, 0xfd, 0x14, 0x49, 0xdb, 0x0b, 0xa6, 0xa1, 0x9a, 0x65, 0x4f, 0x7f, 0x12,
		0xab, 0x68, 0xe7, 0xdf, 0xbd, 0x28, 0xce, 0xfe, 0x7e, 0xe2, 0x87, 0x8e, 0xf0, 0x57, 0xff, 0xa9,
		0xe7, 0x4a, 0xfb, 0xb6, 0xc7, 0x71, 0x5b, 0x87, 0x56, 0x89, 0xa3, 0x83, 0x62, 0x38, 0x71, 0x73,
		0xf5, 0xf1, 0xf3, 0xcd, 0x1f, 0xbf, 0x7f, 0x9a, 0x7a, 0x57, 0xb3, 0x9f, 0x67, 0xee, 0xc7, 0x48,
		0xaa, 0x9b, 0xab, 0xfc, 0x8b, 0x2f, 0x7f, 0xfc, 0xa3, 0xf0, 0xeb, 0xe5, 0x4f, 0x29, 0x9f, 0x5d,
		0x2d, 0x1f, 0xfd, 0xe6, 0xb3, 0x8a, 0x76, 0xfc, 0xf5, 0x2a, 0x8a, 0xd3, 0xbf, 0xde, 0xfc, 0x92,
		0x7e, 0xe5, 0x95, 0x7f, 0xe7, 0xb9, 0xf2, 0x27, 0x5a, 0xe6, 0xa5, 0x53, 0x73, 0x42, 0x15, 0x2f,
		0x04, 0xd6, 0x91, 0x54, 0x5e, 0xe8, 0x92, 0x2b, 0x79, 0x49, 0x08, 0xbf, 0x90, 0x44, 0xbc, 0x50,
		0x79, 0xe2, 0x76, 0xb6, 0x78, 0x9d, 0x33, 0x4e, 0x6f, 0x2b, 0x3e, 0xe7, 0x8e, 0xcb, 0x8d, 0xc5,
		0xe3, 0xc6, 0xe2, 0xf0, 0x16, 0xe3, 0xef, 0x6e, 0xbb, 0x5d, 0xb6, 0x38, 0x9b, 0x3f, 0xbe, 0x66,
		0x8c, 0xab, 0x99, 0xe3, 0x69, 0xc6, 0xac, 0x86, 0x89, 0xf8, 0xd9, 0x54, 0xdc, 0x6c, 0x3c, 0xf6,
		0x31, 0x17, 0xf3, 0x30, 0xc6, 0xc7, 0x46, 0xe2, 0x62, 0xe3, 0xf1, 0xf0, 0x31, 0xeb, 0xc2, 0x81,
		0xc4, 0x8f, 0xd7, 0x5d, 0xc5, 0xf4, 0x37, 0x1d, 0x5a, 0x91, 0xbd, 0x5f, 0xbc, 0x58, 0xbf, 0xd3,
		0x5a, 0x91, 0x2e, 0xc1, 0xd4, 0xac, 0x7f, 0xf0, 0x65, 0x0a, 0x30, 0xc4, 0xaa, 0x9f, 0x5a, 0x8b,
		0xc2, 0xc8, 0xfd, 0x8b, 0xe1, 0x70, 0x34, 0x1e, 0x0e, 0x4f, 0xc7, 0x67, 0xe3, 0xd3, 0xcb, 0xf3,
		0xf3, 0xfe, 0xa8, 0x4f, 0xb8, 0xb0, 0x7b, 0x1f, 0x95, 0x2b, 0x95, 0x74, 0x7f, 0x7a, 0xea, 0x4d,
		0xac, 0x20, 0xf1, 0xfd, 0x4e, 0xcd, 0x1c, 0x53, 0x06, 0xe2, 0x10, 0x32, 0x0f, 0x84, 0x74, 0xd6,
		0xd5, 0x54, 0x03, 0x0d, 0xd8, 0x37, 0xb7, 0x35, 0xcd, 0x46, 0x68, 0xa8, 0xeb, 0xd4, 0x3a, 0xde,
		0x3d, 0xdd, 0x26, 0xd0, 0xe4, 0x8e, 0x68, 0x70, 0x33, 0x85, 0xad, 0xaf, 0x66, 0x0d, 0x54, 0xac,
		0xa7, 0x84, 0x96, 0xb6, 0xef, 0xcd, 0x3c, 0x3d, 0x9f, 0x8c, 0xa6, 0x3a, 0x96, 0x07, 0x91, 0xeb,
		0x03, 0x37, 0x5c, 0x06, 0xcf, 0xe5, 0xa6, 0x0d, 0x87, 0xa1, 0xca, 0x59, 0x51, 0xe6, 0xa8, 0x4c,
		0xe5, 0xa4, 0xa8, 0x73, 0x50, 0x6c, 0x39, 0x27, 0xb6, 0x1c, 0x93, 0xc1, 0x9c, 0x52, 0xbb, 0x4e,
		0xe3, 0xbd, 0x47, 0x43, 0xb3, 0x3d, 0x2f, 0xb6, 0x85, 0x3b, 0xf3, 0x02, 0xdb, 0x0d, 0x1f, 0xe8,
		0x20, 0x6b, 0xd9, 0xa2, 0x73, 0x65, 0x78, 0xa2, 0x49, 0xa6, 0x4d, 0x77, 0x93, 0xa7, 0xb9, 0x39,
		0xd2, 0xdb, 0xa6, 0xd3, 0xda, 0x5c, 0xe9, 0x6c, 0xf6, 0x34, 0x36, 0x7b, 0xfa, 0xba, 0x85, 0xb4,
		0x75, 0xb7, 0xa2, 0x69, 0xf2, 0xf4, 0x34, 0x5b, 0x3f, 0x5f, 0x86, 0xfe, 0xbd, 0x4c, 0x59, 0x68,
		0x86, 0x5c, 0x3f, 0x67, 0xd6, 0xd9, 0x58, 0xff, 0x5d, 0x63, 0x29, 0x46, 0xf6, 0xfe, 0xba, 0x1c,
		0xe5, 0xe8, 0x9c, 0x59, 0x65, 0x63, 0xfd, 0x72, 0x5b, 0x99, 0x62, 0x9e, 0xec, 0xf1, 0xf7, 0x8e,
		0x66, 0x63, 0xaf, 0xbb, 0x92, 0x67, 0x21, 0x08, 0x71, 0x0a, 0x51, 0xa7, 0x2b, 0xb5, 0xf0, 0x7c,
		0xe9, 0xd2, 0xc4, 0xb5, 0xbb, 0xe2, 0xdb, 0x55, 0x49, 0xb4, 0x14, 0xdb, 0x07, 0xc5, 0x82, 0x62,
		0x41, 0xb1, 0xa6, 0x29, 0x96, 0x2a, 0x80, 0xce, 0x07, 0x4c, 0x83, 0xdc, 0x48, 0x79, 0xa1, 0xf2,
		0xf4, 0x93, 0xfd, 0x6d, 0xe1, 0x3c, 0x99, 0xea, 0xc9, 0x4a, 0x64, 0xa1, 0xa2, 0x0c, 0x15, 0x65,
		0x1d, 0x33, 0x62, 0xc6, 0x8c, 0x59, 0x8b, 0x46, 0x8d, 0x09, 0xfd, 0x0e, 0xb2, 0xa2, 0xac, 0x3f,
		0x62, 0xac, 0x28, 0x1b, 0xa1, 0xa2, 0xcc, 0x4c, 0x6c, 0xbf, 0x11, 0x00, 0xa2, 0xa2, 0xac, 0x43,
		0x31, 0xbf, 0x91, 0xd8, 0x7f, 0x43, 0x05, 0x46, 0xe7, 0xe7, 0x67, 0x28, 0x26, 0xeb, 0x86, 0x6f,
		0xe0, 0x1b, 0x15, 0xc5, 0x64, 0xfb, 0xa8, 0x0d, 0x8a, 0xc9, 0x76, 0x08, 0x43, 0x31, 0x59, 0x9b,
		0x05, 0x37, 0x6b, 0x15, 0x19, 0x27, 0xcc, 0x19, 0x2c, 0xab, 0x03, 0x85, 0x39, 0xbf, 0x0b, 0x2d,
		0x7f, 0x49, 0xbf, 0x61, 0x56, 0x60, 0x96, 0xff, 0xed, 0xfd, 0xe2, 0xeb, 0x36, 0x2f, 0xda, 0x21,
		0xcc, 0x7e, 0xa2, 0xca, 0xcc, 0x80, 0xd2, 0x1f, 0x41, 0xb1, 0xd9, 0x8a, 0x4e, 0x1f, 0x62, 0xc9,
		0x59, 0xac, 0x14, 0x71, 0xad, 0x59, 0x3e, 0x22, 0x8a, 0xcc, 0xda, 0x4e, 0x53, 0xa1, 0xc8, 0x0c,
		0x45, 0x66, 0x55, 0x07, 0x42, 0x91, 0x19, 0xb6, 0xe7, 0x0c, 0x98, 0x12, 0x76, 0x93, 0xc2, 0x6e,
		0x5a, 0x5a, 0x30, 0x31, 0xdd, 0x8c, 0xb2, 0x51, 0x64, 0x86, 0x22, 0x33, 0x14, 0x99, 0xb5, 0xb4,
		0xfa, 0xd6, 0xf3, 0x47, 0x28, 0x32, 0xab, 0x35, 0xc5, 0x28, 0x32, 0x6b, 0x25, 0xcd, 0xf2, 0x96,
		0x84, 0x57, 0xd3, 0x88, 0x53, 0x06, 0xe2, 0xd6, 0x97, 0x2e, 0x0b, 0xb0, 0x16, 0xc7, 0x07, 0xb1,
		0x82, 0x58, 0x41, 0xac, 0x20, 0x56, 0x10, 0x2b, 0x88, 0x15, 0xc4, 0x0a, 0x62, 0x05, 0xb1, 0x82,
		0x58, 0x2b, 0x4e, 0x62, 0x8a, 0x93, 0xcc, 0xe7, 0x21, 0x36, 0x45, 0xe0, 0x20, 0x04, 0xb8, 0x15,
		0xdc, 0x7a, 0xe0, 0xdc, 0x4a, 0x7e, 0x10, 0xc2, 0x0b, 0x02, 0xa9, 0xec, 0xa9, 0xf0, 0xfc, 0x6c,
		0x33, 0x9f, 0xef, 0x14, 0xc4, 0xba, 0x20, 0x1c, 0x81, 0xc0, 0x11, 0x88, 0x8e, 0x99, 0x2f, 0x63,
		0x66, 0xac, 0x45, 0x73, 0xc6, 0x84, 0x79, 0x07, 0x77, 0x04, 0x22, 0xbf, 0xa2, 0x33, 0x05, 0xa5,
		0xd4, 0x2a, 0x25, 0x4a, 0x32, 0x1e, 0x88, 0xe0, 0xb8, 0x97, 0x93, 0xf7, 0x3e, 0x4e, 0x33, 0xf7,
		0x70, 0x16, 0xee, 0xdf, 0xe4, 0x9d, 0x88, 0x5c, 0xe0, 0xfc, 0xe2, 0x4d, 0xe1, 0x69, 0x5b, 0x87,
		0xb6, 0x92, 0xb1, 0x0e, 0x95, 0x31, 0xd9, 0xd9, 0xf5, 0x9b, 0xb1, 0x77, 0x17, 0x08, 0x7f, 0xee,
		0x09, 0x0d, 0xc9, 0xcd, 0x2e, 0xde, 0x9c, 0x86, 0xca, 0x91, 0xae, 0x1d, 0x3f, 0x78, 0xda, 0xb9,
		0x37, 0x25, 0x79, 0x58, 0xbc, 0xf2, 0xb3, 0x28, 0xf3, 0xb0, 0xee, 0xd2, 0x62, 0xbf, 0xe3, 0x73,
		0xc7, 0xec, 0xb0, 0x5e, 0x78, 0xb9, 0xb9, 0xf4, 0x58, 0x8f, 0x72, 0x6c, 0x55, 0x7e, 0xd6, 0xeb,
		0x44, 0x4b, 0x15, 0x70, 0x62, 0x71, 0x5e, 0x95, 0xbc, 0xcb, 0xc0, 0x70, 0xdd, 0x26, 0xfa, 0xfd,
		0xd5, 0xe4, 0x82, 0x28, 0xef, 0x15, 0xf1, 0x62, 0x5b, 0x04, 0x41, 0x98, 0x04, 0x0e, 0x67, 0xf0,
		0x53, 0x10, 0x82, 0xc0, 0x07, 0x81, 0x0f, 0x02, 0x1f, 0x04, 0x3e, 0x2d, 0x05, 0x3e, 0xdc, 0x97,
		0x89, 0x9c, 0xe1, 0xe8, 0xf7, 0xf2, 0xc1, 0x8d, 0x1e, 0xfd, 0xe6, 0xde, 0xc7, 0xcc, 0x05, 0xb6,
		0x79, 0xf8, 0x97, 0x65, 0x5f, 0x93, 0x39, 0x7e, 0xb0, 0x8c, 0x1f, 0x01, 0xe7, 0xde, 0xef, 0xec,
		0x84, 0x2a, 0xe0, 0x1c, 0xb8, 0xd5, 0xe5, 0x73, 0xe0, 0xb4, 0x8c, 0x3e, 0xdf, 0x3e, 0x50, 0x5e,
		0x70, 0x67, 0x7b, 0x81, 0x9d, 0xc4, 0xbc, 0xb0, 0xbe, 0x29, 0x0d, 0xd4, 0x0e, 0x6a, 0x07, 0xb5,
		0x83, 0xda, 0x41, 0xed, 0xa0, 0x76, 0x50, 0x3b, 0xa8, 0x1d, 0xd4, 0x0e, 0x6a, 0x07, 0xb5, 0xbf,
		0x44, 0xed, 0x61, 0xa2, 0x0d, 0x52, 0xfb, 0xa6, 0x34, 0x50, 0x3b, 0xa8, 0x1d, 0xd4, 0x0e, 0x6a,
		0x07, 0xb5, 0x83, 0xda, 0x41, 0xed, 0xa0, 0x76, 0x50, 0x3b, 0xa8, 0x1d, 0xd4, 0xfe, 0x12, 0xb5,
		0x3f, 0xa8, 0x30, 0xb8, 0xb3, 0xbf, 0x49, 0x15, 0x7b, 0x61, 0x60, 0x2b, 0xe9, 0x48, 0xef, 0x1b,
		0xe1, 0xc1, 0xfa, 0x32, 0x74, 0xdf, 0x22, 0x12, 0xfc, 0x0e, 0x7e, 0x07, 0xbf, 0x83, 0xdf, 0xc1,
		0xef, 0xe0, 0x77, 0xf0, 0x3b, 0xf8, 0x1d, 0xfc, 0x0e, 0x7e, 0x07, 0xbf, 0xef, 0x9c, 0x74, 0x5f,
		0xc4, 0xba, 0x1c, 0xa7, 0x6d, 0xed, 0xcd, 0x18, 0x13, 0xf0, 0x2f, 0x09, 0x06, 0xcb, 0x83, 0xe5,
		0xc1, 0xf2, 0x60, 0xf9, 0x96, 0x58, 0x3e, 0xe1, 0x86, 0xf9, 0x31, 0x60, 0xbe, 0x25, 0x98, 0xc7,
		0x9d, 0x67, 0xaf, 0x1e, 0xe2, 0x87, 0x83, 0xcb, 0xe1, 0xe5, 0x68, 0x3c, 0xb8, 0xc4, 0xc5, 0x67,
		0x80, 0xf8, 0xc3, 0x87, 0xf8, 0x99, 0x70, 0x6c, 0xe1, 0xba, 0x4a, 0xc6, 0x31, 0xe3, 0xbd, 0xc4,
		0x05, 0x21, 0x80, 0x73, 0xc0, 0x39, 0xe0, 0x1c, 0x70, 0xde, 0x12, 0x9c, 0xc7, 0xf3, 0x4e, 0x33,
		0x8c, 0xfd, 0x77, 0x2e, 0x5e, 0x81, 0xd7, 0x08, 0xe4, 0xe3, 0xbc, 0x9f, 0x51, 0x24, 0x9c, 0xaf,
		0x52, 0xdb, 0xb1, 0x0c, 0x5c, 0xe6, 0xa4, 0xcf, 0x76, 0x91, 0xf0, 0x28, 0xf0, 0x28, 0xf0, 0x28,
		0xf0, 0x28, 0x48, 0xf7, 0x20, 0xdd, 0x83, 0x74, 0x0f, 0xd2, 0x3d, 0x48, 0xf7, 0x20, 0xdd, 0x83,
		0x74, 0xcf, 0x16, 0x70, 0x0f, 0x5d, 0x69, 0xc7, 0x5a, 0x68, 0x4e, 0x52, 0x5f, 0xca, 0x00, 0x9a,
		0x03, 0xcd, 0x81, 0xe6, 0x40, 0xf3, 0x96, 0xd0, 0x7c, 0xa5, 0xf5, 0x32, 0x9b, 0x59, 0xb2, 0xd0,
		0x7d, 0xf9, 0x65, 0x29, 0xab, 0xdd, 0x97, 0xb9, 0xa6, 0x21, 0x17, 0x97, 0xf5, 0x5e, 0x76, 0xd3,
		0xc5, 0xf6, 0x4d, 0xaa, 0x27, 0x33, 0x32, 0x07, 0xeb, 0x1d, 0x88, 0xe7, 0x12, 0xd1, 0x7f, 0x78,
		0x55, 0x44, 0xd9, 0xac, 0x90, 0xdd, 0xf2, 0x52, 0x2a, 0x71, 0x4d, 0xed, 0x78, 0xfb, 0x0e, 0x6f,
		0x2a, 0xc0, 0xc4, 0x1a, 0xa0, 0x0b, 0x6f, 0xa7, 0x08, 0x38, 0xb6, 0x83, 0x50, 0xdb, 0x61, 0x60,
		0xb3, 0xd8, 0xbd, 0x15, 0x10, 0x5e, 0x15, 0xc5, 0xc3, 0xc3, 0x7d, 0xf0, 0x30, 0x78, 0x18, 0x3c,
		0x7c, 0xe8, 0x3c, 0x4c, 0x7d, 0xe3, 0xd2, 0xd2, 0xff, 0xe5, 0x17, 0x22, 0xcd, 0x9b, 0xc2, 0x33,
		0x69, 0xea, 0xe6, 0xfd, 0x4b, 0x7c, 0x57, 0x3e, 0x30, 0xa5, 0x02, 0xd8, 0x4d, 0xa0, 0x09, 0x53,
		0xd8, 0xb6, 0x49, 0x34, 0x65, 0x1a, 0x8d, 0x9b, 0x48, 0xe3, 0xa6, 0xb2, 0x03, 0x26, 0x93, 0x0f,
		0x36, 0x59, 0xc3, 0x18, 0xae, 0xd4, 0xc2, 0xee, 0x14, 0x83, 0x81, 0x6b, 0x6e, 0x18, 0xf3, 0x0c,
		0x66, 0xf2, 0x0d, 0x66, 0xf3, 0x0e, 0x5b, 0xf2, 0x0f, 0xfc, 0x13, 0xb5, 0x9a, 0x89, 0x68, 0xe7,
		0x16, 0xa8, 0xd5, 0xcc, 0x84, 0xf9, 0xdb, 0xa0, 0x72, 0xf9, 0xad, 0xdd, 0x0a, 0x95, 0x3f, 0x81,
		0xd9, 0xdb, 0xa1, 0x98, 0xcd, 0x9b, 0xc1, 0x6c, 0x4d, 0x2e, 0xaa, 0xa5, 0x5b, 0xa3, 0x36, 0x73,
		0x38, 0x46, 0x6e, 0x8f, 0xca, 0xc5, 0xb6, 0x72, 0x8b, 0x54, 0x69, 0x2e, 0xc9, 0xc8, 0x6d, 0x52,
		0xb9, 0xe4, 0x36, 0x6e, 0x95, 0xe2, 0x45, 0x0d, 0xeb, 0x80, 0x76, 0xa2, 0x39, 0x6e, 0xbf, 0xf7,
		0x62, 0x3b, 0x3b, 0x37, 0xfb, 0x7c, 0x3b, 0x14, 0x5f, 0xb7, 0x9d, 0xcd, 0x80, 0x70, 0xab, 0x68,
		0x04, 0x87, 0x08, 0x0e, 0x11, 0x1c, 0x22, 0x38, 0x3c, 0xd2, 0xe0, 0x90, 0xab, 0x32, 0x74, 0xdd,
		0xd0, 0x71, 0x5e, 0xdb, 0xc9, 0x5b, 0x29, 0xfa, 0xfc, 0xc7, 0x00, 0xc1, 0x9a, 0xa8, 0x1c, 0xcd,
		0x85, 0x99, 0xee, 0xfe, 0x93, 0x0b, 0x36, 0x5d, 0x46, 0xb8, 0xd4, 0x79, 0x43, 0xdd, 0x80, 0x0c,
		0xc5, 0x56, 0x96, 0xa9, 0x4a, 0xd3, 0xed, 0x2a, 0x33, 0x7e, 0x45, 0x2a, 0xc3, 0x5b, 0x81, 0xca,
		0x1f, 0x59, 0xf0, 0x8e, 0x7e, 0xfd, 0x8a, 0xe3, 0x96, 0xf2, 0xc8, 0x81, 0xe7, 0xb0, 0xd9, 0x86,
		0x03, 0xdf, 0x25, 0x1c, 0xb1, 0x0b, 0x62, 0x17, 0xc4, 0x2e, 0x88, 0x5d, 0x8e, 0x34, 0x76, 0x49,
		0x4c, 0x05, 0x2f, 0x63, 0x04, 0x2f, 0x1d, 0x0d, 0x5e, 0x4e, 0x01, 0xa0, 0x08, 0x5a, 0xf6, 0x53,
		0x15, 0x53, 0xc7, 0xe4, 0x10, 0xb4, 0x20, 0x68, 0x39, 0x80, 0xa0, 0x85, 0xb3, 0xab, 0xd2, 0x86,
		0xa7, 0xe6, 0xeb, 0xae, 0x84, 0xa0, 0x04, 0x41, 0x09, 0x82, 0x12, 0x04, 0x25, 0x9d, 0x09, 0x4a,
		0xd8, 0xba, 0x37, 0xad, 0x5b, 0x3a, 0xe2, 0x2e, 0x4e, 0x87, 0xe5, 0xbd, 0xb2, 0x93, 0x92, 0x81,
		0x30, 0x91, 0x60, 0x5b, 0x8a, 0x82, 0xe7, 0x82, 0xe7, 0x82, 0xe7, 0x82, 0xe7, 0x82, 0xe7, 0x82,
		0xe7, 0xaa, 0xfd, 0x0e, 0xe6, 0xf7, 0x32, 0x1b, 0x3b, 0xe9, 0xb4, 0x2a, 0x0e, 0x1e, 0x0c, 0x1e,
		0x0c, 0x1e, 0x0c, 0x1e, 0xec, 0x48, 0x3d, 0x18, 0x4e, 0x3a, 0xd5, 0x9e, 0x23, 0x9c, 0x74, 0xc2,
		0x49, 0x27, 0x9c, 0x74, 0x6a, 0xb6, 0x84, 0x70, 0xd2, 0x89, 0x57, 0x2c, 0x4e, 0x3a, 0xe1, 0xa4,
		0xd3, 0x71, 0x04, 0x81, 0xe9, 0x0c, 0xca, 0x40, 0xab, 0x27, 0x5b, 0x3e, 0xce, 0xf7, 0x86, 0x99,
		0xc3, 0xc0, 0x75, 0x81, 0x08, 0x04, 0x11, 0x08, 0x22, 0x10, 0x44, 0x20, 0x78, 0xa4, 0x81, 0x20,
		0x4e, 0x35, 0xed, 0xfb, 0x07, 0xa7, 0x9a, 0x88, 0x04, 0xe3, 0x54, 0x13, 0xa5, 0xca, 0xe0, 0x54,
		0x93, 0x21, 0x95, 0x41, 0x81, 0xe0, 0xae, 0x3f, 0xd7, 0xaf, 0xb3, 0x2b, 0x2a, 0x71, 0xd7, 0xc0,
		0x5f, 0xbc, 0x58, 0xbf, 0xd3, 0x9a, 0xa9, 0x75, 0xe0, 0xaf, 0x5e, 0xf0, 0xc1, 0x97, 0x29, 0x87,
		0x31, 0x2d, 0xa1, 0xd4, 0x1a, 0x15, 0x24, 0xf4, 0x2f, 0x86, 0xc3, 0xd1, 0x78, 0x38, 0x3c, 0x1d,
		0x9f, 0x8d, 0x4f, 0x2f, 0xcf, 0xcf, 0xfb, 0xa3, 0x3e, 0x43, 0x45, 0x71, 0xef, 0xa3, 0x72, 0xa5,
		0x92, 0xee, 0x4f, 0x4f, 0xbd, 0x89, 0x15, 0x24, 0xbe, 0xdf, 0xe9, 0x19, 0x7e, 0x17, 0x04, 0xa1,
		0x16, 0xa9, 0x2d, 0xe3, 0x99, 0xe3, 0xd8, 0xb9, 0x97, 0x33, 0x11, 0x09, 0x7d, 0x9f, 0xd2, 0xdd,
		0xc9, 0x2e, 0xd8, 0x3e, 0xf1, 0x02, 0x2d, 0xd5, 0x54, 0x38, 0x32, 0x5e, 0xfe, 0x68, 0x3f, 0x16,
		0x7e, 0x5f, 0xf8, 0xb5, 0x7e, 0x8a, 0xa4, 0xed, 0x05, 0xd3, 0x50, 0xcd, 0xb2, 0xa7, 0x3f, 0x89,
		0x55, 0xf4, 0xc2, 0xdf, 0x55, 0xf6, 0xf7, 0xec, 0x07, 0x57, 0x6a, 0xe1, 0xf9, 0xd2, 0x9d, 0xff,
		0x86, 0xbb, 0x95, 0xee, 0xfc, 0x45, 0x68, 0x95, 0x38, 0x3a, 0x28, 0x86, 0x90, 0x37, 0x57, 0x1f,
		0x3f, 0xdf, 0xfc, 0xf1, 0xfb, 0xa7, 0xa9, 0x77, 0x35, 0xfb, 0x79, 0xe6, 0x7e, 0x8c, 0xa4, 0xba,
		0xb9, 0xca, 0xdf, 0xc1, 0xf2, 0xc7, 0x3f, 0x0a, 0xbf, 0x5e, 0xfe, 0x94, 0x32, 0xf9, 0xd5, 0xf2,
		0x0b, 0xde, 0x7c, 0x56, 0xd1, 0xce, 0xbf, 0xaa, 0xf4, 0xaf, 0xe9, 0xff, 0xbf, 0x5f, 0x7c, 0xf9,
		0xec, 0xef, 0xbf, 0xa5, 0xdf, 0xfd, 0xb7, 0x50, 0x7f, 0x0c, 0x7e, 0x4f, 0xbf, 0xf8, 0xab, 0xe9,
		0xd1, 0x6c, 0xa8, 0x3f, 0x33, 0x7a, 0x33, 0x5b, 0xe8, 0xcd, 0xdc, 0xed, 0x2c, 0x0c, 0x7a, 0x33,
		0xb7, 0xed, 0x83, 0xd1, 0x9b, 0xb9, 0xba, 0xe9, 0x43, 0xa2, 0xba, 0x7b, 0x26, 0xd1, 0x94, 0x69,
		0x34, 0x6e, 0x22, 0x8d, 0x9b, 0xca, 0x0e, 0x98, 0x4c, 0xde, 0x10, 0x1d, 0x15, 0x4b, 0x75, 0x91,
		0x0f, 0x15, 0x4b, 0xd5, 0xa4, 0xa1, 0x62, 0x09, 0x15, 0x4b, 0xa8, 0x58, 0xaa, 0x2f, 0x0a, 0x15,
		0x4b, 0xa8, 0x58, 0x42, 0xc5, 0x92, 0xa1, 0x51, 0xd1, 0x9b, 0x19, 0xc1, 0x21, 0x82, 0x43, 0x04,
		0x87, 0x08, 0x0e, 0x0f, 0x3b, 0x38, 0x44, 0x15, 0xd3, 0xbe, 0x7f, 0x50, 0xc5, 0x44, 0x24, 0x18,
		0x55, 0x4c, 0x94, 0x2a, 0x83, 0x2a, 0x26, 0x43, 0x2a, 0x83, 0x2a, 0xa6, 0x5d, 0x7f, 0xd0, 0x9b,
		0x19, 0xbd, 0x99, 0x11, 0xbb, 0x20, 0x76, 0x41, 0xec, 0x82, 0xd8, 0x05, 0xbd, 0x99, 0x11, 0xbc,
		0x18, 0x22, 0x51, 0xf4, 0x66, 0x46, 0xd0, 0xb2, 0xa7, 0xaa, 0xa0, 0x37, 0x33, 0x82, 0x16, 0x04,
		0x2d, 0xb9, 0x92, 0xa0, 0x37, 0x33, 0x82, 0x12, 0x04, 0x25, 0x08, 0x4a, 0x10, 0x94, 0xd0, 0xae,
		0x2d, 0x74, 0xb8, 0x34, 0xe1, 0xbd, 0xd0, 0x9b, 0x19, 0x9e, 0x0b, 0x9e, 0x0b, 0x9e, 0x0b, 0x9e,
		0x0b, 0x9e, 0xeb, 0xb0, 0x3c, 0x17, 0x7a, 0x33, 0xc3, 0x83, 0xc1, 0x83, 0xc1, 0x83, 0xc1, 0x83,
		0xd1, 0xaf, 0x2d, 0x9c, 0x74, 0xaa, 0x3d, 0x47, 0x38, 0xe9, 0x84, 0x93, 0x4e, 0x38, 0xe9, 0xd4,
		0x6c, 0x09, 0xe1, 0xa4, 0x13, 0xaf, 0x58, 0x9c, 0x74, 0xc2, 0x49, 0xa7, 0xe3, 0x08, 0x02, 0xd1,
		0x9b, 0x19, 0x81, 0x20, 0x02, 0x41, 0x04, 0x82, 0x08, 0x04, 0x79, 0xd6, 0x16, 0x4e, 0x35, 0xed,
		0xfb, 0x07, 0xa7, 0x9a, 0x88, 0x04, 0xe3, 0x54, 0x13, 0xa5, 0xca, 0xe0, 0x54, 0x93, 0x21, 0x95,
		0x41, 0x81, 0xe0, 0xae, 0x3f, 0xe8, 0xcd, 0x4c, 0xa1, 0x6e, 0xe8, 0xcd, 0x5c, 0x43, 0x28, 0x7a,
		0x33, 0x17, 0xe3, 0xe5, 0x83, 0xe9, 0xcd, 0xfc, 0x4a, 0xfb, 0x32, 0xbf, 0x9e, 0xa6, 0xcc, 0xcb,
		0x0d, 0xf5, 0x4c, 0x7b, 0xf8, 0xda, 0x32, 0xaf, 0x0b, 0xe2, 0x69, 0xcc, 0x7c, 0x8a, 0xc6, 0xcc,
		0x68, 0xcc, 0x7c, 0x30, 0xa9, 0x17, 0x34, 0x66, 0x36, 0x9d, 0x5a, 0x31, 0xbd, 0xb7, 0xce, 0xb9,
		0xa7, 0xce, 0xbb, 0x97, 0x6e, 0x66, 0x0f, 0xdd, 0xf8, 0xde, 0x79, 0x9b, 0x7b, 0xe6, 0x6d, 0xed,
		0x95, 0xb7, 0xb7, 0x47, 0x6e, 0x78, 0x6f, 0x9c, 0x2d, 0xd3, 0xcb, 0xbe, 0x17, 0xde, 0xd6, 0x1e,
		0xb8, 0xe1, 0xbd, 0xef, 0x76, 0xf6, 0xbc, 0xcd, 0xef, 0x75, 0xb7, 0xb2, 0xc7, 0xdd, 0xf9, 0x3c,
		0x4c, 0x27, 0x03, 0xa0, 0x48, 0x38, 0x5f, 0xa5, 0xb6, 0x63, 0x19, 0xcc, 0xbb, 0xcc, 0x28, 0xbe,
		0x10, 0x68, 0x53, 0x14, 0x82, 0x20, 0x04, 0x41, 0x08, 0x82, 0x10, 0x04, 0xb5, 0x14, 0x04, 0xb1,
		0x75, 0x9c, 0x61, 0xec, 0x34, 0xc3, 0xbc, 0x91, 0xcc, 0x88, 0x78, 0x26, 0x36, 0x8e, 0x4d, 0x75,
		0x92, 0x31, 0xbe, 0xd9, 0x67, 0x6e, 0x93, 0x8f, 0x71, 0x43, 0xd8, 0xc8, 0x46, 0xb0, 0xf1, 0x0e,
		0x31, 0xc7, 0xac, 0x0b, 0x07, 0x02, 0xea, 0xd7, 0xaf, 0x00, 0xd4, 0x63, 0x2f, 0xb8, 0xf3, 0x65,
		0xb6, 0x1d, 0x65, 0xdf, 0x3e, 0xf0, 0x51, 0xfa, 0x9a, 0x1c, 0x20, 0x3a, 0x10, 0x1d, 0x88, 0x0e,
		0x44, 0x07, 0xa2, 0x03, 0xd1, 0x81, 0xe8, 0x40, 0x74, 0x20, 0x3a, 0x10, 0x1d, 0x88, 0x5e, 0x3e,
		0xe9, 0xdf, 0xa4, 0x8a, 0xbd, 0x30, 0xb0, 0x83, 0x64, 0x76, 0xcb, 0x99, 0x48, 0x5f, 0x93, 0x03,
		0x44, 0x07, 0xa2, 0x03, 0xd1, 0x81, 0xe8, 0x40, 0x74, 0x20, 0x3a, 0x10, 0x1d, 0x88, 0x0e, 0x44,
		0x07, 0xa2, 0x03, 0xd1, 0xcb, 0x27, 0xfd, 0x41, 0x2b, 0x9e, 0x9b, 0x9c, 0x72, 0x77, 0x98, 0x4b,
		0x00, 0x96, 0x03, 0xcb, 0x81, 0xe5, 0xc0, 0x72, 0x60, 0x39, 0xb0, 0x1c, 0x58, 0x0e, 0x2c, 0x07,
		0x96, 0x03, 0xcb, 0x81, 0xe5, 0xbb, 0xb1, 0x5c, 0xd9, 0x4a, 0xce, 0x84, 0x17, 0x78, 0xc1, 0x9d,
		0xed, 0x05, 0x41, 0xfa, 0x77, 0x8e, 0x23, 0x58, 0x1b, 0xb0, 0xbe, 0x45, 0x2e, 0x10, 0x1e, 0x08,
		0x0f, 0x84, 0x07, 0xc2, 0x03, 0xe1, 0x81, 0xf0, 0x40, 0x78, 0x20, 0x3c, 0x10, 0x1e, 0x08, 0x0f,
		0x84, 0xdf, 0x1f, 0xe1, 0xe7, 0x4d, 0x6f, 0xcc, 0x23, 0x7c, 0x41, 0x2e, 0x10, 0x1e, 0x08, 0x0f,
		0x84, 0x07, 0xc2, 0x03, 0xe1, 0x81, 0xf0, 0x40, 0x78, 0x20, 0x3c, 0x10, 0x1e, 0x08, 0x7f, 0x54,
		0x08, 0xff, 0xa6, 0x43, 0x2b, 0x92, 0xa7, 0x37, 0x30, 0x5f, 0x4f, 0x60, 0xa3, 0xbd, 0x80, 0x79,
		0x7a, 0x00, 0x53, 0xcd, 0x1c, 0x53, 0xcf, 0xdf, 0x43, 0xe8, 0xf5, 0xdb, 0xa3, 0x3c, 0xa5, 0xdd,
		0xc9, 0xae, 0xbe, 0x34, 0x5c, 0xdf, 0xdc, 0xd4, 0x34, 0x1b, 0xa1, 0xa1, 0xaa, 0x53, 0xab, 0x78,
		0xf7, 0x54, 0x9b, 0x40, 0x91, 0x3b, 0xa2, 0xc0, 0xcd, 0x14, 0xb6, 0xbe, 0x9a, 0x35, 0x50, 0xb1,
		0x9e, 0x0e, 0xa3, 0xd0, 0x0f, 0xef, 0x9e, 0xe6, 0x53, 0xd1, 0x54, 0xc3, 0xf2, 0x08, 0x72, 0x75,
		0xd8, 0x86, 0x4b, 0xe0, 0xb9, 0x1d, 0x6b, 0xc3, 0x61, 0xa8, 0xd2, 0x55, 0x94, 0xe9, 0x29, 0x53,
		0xe9, 0x28, 0xea, 0xf4, 0x13, 0x5b, 0xba, 0x89, 0x2d, 0xbd, 0x64, 0x30, 0x9d, 0xd4, 0xae, 0xc3,
		0x78, 0xef, 0xd1, 0x80, 0x6c, 0xcf, 0x8b, 0x6d, 0xe1, 0xce, 0xbc, 0xc0, 0x76, 0xc3, 0x07, 0x3a,
		0xbe, 0x5a, 0xde, 0x8f, 0xb5, 0x32, 0x3c, 0xd1, 0x24, 0xd3, 0x66, 0xba, 0xc9, 0x33, 0xdc, 0x1c,
		0x99, 0x6d, 0xd3, 0x19, 0x6d, 0xae, 0x4c, 0x36, 0x7b, 0x06, 0x9b, 0x3d, 0x73, 0xdd, 0x42, 0xc6,
		0xba, 0x5b, 0x81, 0x34, 0x79, 0x66, 0x9a, 0xed, 0x32, 0x3d, 0x86, 0xcb, 0xf3, 0x98, 0x12, 0xd0,
		0x3c, 0xb7, 0x15, 0xf1, 0xed, 0x43, 0x99, 0xba, 0xfc, 0xce, 0x58, 0x76, 0x91, 0xfd, 0x72, 0xbb,
		0xef, 0x3c, 0xd7, 0x45, 0x19, 0x9c, 0xe2, 0xf1, 0x11, 0x4d, 0x31, 0x4f, 0xe2, 0xb8, 0xab, 0x4d,
		0xb9, 0xaf, 0xbb, 0x92, 0x63, 0x21, 0x08, 0x71, 0xfc, 0xd0, 0x11, 0x7e, 0x31, 0xc5, 0x40, 0xcf,
		0xac, 0x9b, 0x22, 0x68, 0xb9, 0xb5, 0x0f, 0x6e, 0x05, 0xb7, 0x82, 0x5b, 0x4d, 0x73, 0x2b, 0x55,
		0xc8, 0x9c, 0x0f, 0x18, 0xc8, 0x47, 0x6d, 0xe7, 0x39, 0xb0, 0xc5, 0x15, 0x02, 0xae, 0xf4, 0xc5,
		0x13, 0x5f, 0x49, 0xd9, 0x0e, 0x99, 0x28, 0x27, 0x43, 0x39, 0x59, 0xc7, 0x8c, 0x9a, 0x31, 0xe3,
		0xd6, 0xa2, 0x91, 0x63, 0x82, 0x3f, 0x94, 0x93, 0xad, 0x5b, 0x22, 0x94, 0x93, 0x19, 0x8a, 0xee,
		0x37, 0x42, 0x40, 0x94, 0x93, 0x75, 0x28, 0xea, 0x37, 0x12, 0xfd, 0x6f, 0xa8, 0x00, 0xca, 0xc9,
		0x3a, 0xe6, 0x20, 0xf8, 0x46, 0x7d, 0x0d, 0x27, 0x42, 0xe6, 0xed, 0x49, 0xed, 0x70, 0x6a, 0xaf,
		0x5e, 0xa6, 0xcd, 0xc7, 0xed, 0x5b, 0x04, 0x02, 0xda, 0x01, 0xed, 0x80, 0x76, 0x40, 0x7b, 0x8b,
		0xd0, 0xde, 0x1f, 0x31, 0x42, 0xfb, 0x08, 0xd0, 0x0e, 0x68, 0x07, 0xb4, 0xb7, 0x03, 0xed, 0xa3,
		0xf3, 0xf3, 0x33, 0xf0, 0x3a, 0x78, 0xfd, 0xf0, 0x79, 0x3d, 0xbb, 0xf2, 0x2b, 0x25, 0x67, 0x3e,
		0x42, 0x5f, 0x8a, 0xe0, 0x61, 0xf2, 0x3e, 0x98, 0x1c, 0x4c, 0x0e, 0x26, 0x3f, 0x74, 0x26, 0xa7,
		0xde, 0x45, 0xcc, 0x07, 0xbe, 0x0f, 0x23, 0xdb, 0x09, 0x93, 0xec, 0x8d, 0x33, 0x69, 0xe9, 0xf3,
		0xea, 0x5b, 0x8a, 0x62, 0x52, 0x1e, 0x9e, 0x34, 0x04, 0xbb, 0xe9, 0x33, 0x61, 0x02, 0xdb, 0x36,
		0x85, 0xa6, 0x4c, 0xa2, 0x71, 0xd3, 0x68, 0xdc, 0x44, 0x76, 0xc0, 0x54, 0x32, 0xa3, 0x2a, 0xd3,
		0xea, 0x62, 0x4b, 0x6b, 0x98, 0x4b, 0x6f, 0x18, 0x48, 0x73, 0x18, 0x4a, 0x77, 0xf0, 0xa7, 0x3d,
		0x8c, 0xa6, 0x3f, 0x4c, 0xa7, 0x41, 0x5a, 0x8b, 0x83, 0xcd, 0xc7, 0xc3, 0x06, 0xd2, 0x23, 0x46,
		0xd3, 0x24, 0x6d, 0xa4, 0x4b, 0x5e, 0xa3, 0xba, 0xbc, 0x39, 0xcc, 0xd1, 0xaf, 0x0f, 0x24, 0xfd,
		0xc3, 0x71, 0xb0, 0xc0, 0x8b, 0xbe, 0x0d, 0x6d, 0xe1, 0xba, 0x4a, 0xc6, 0x31, 0x7f, 0x38, 0xb2,
		0x22, 0x0d, 0x11, 0x09, 0x22, 0x12, 0x44, 0x24, 0x88, 0x48, 0x8e, 0x34, 0x22, 0x31, 0x60, 0xeb,
		0x8a, 0xf6, 0xae, 0x7f, 0xc1, 0x28, 0xe3, 0x93, 0xd0, 0x5a, 0xaa, 0x80, 0x3d, 0x34, 0xe9, 0xfd,
		0xed, 0x6f, 0x7f, 0x9e, 0xda, 0x97, 0xd7, 0xff, 0xef, 0x9f, 0x7d, 0xfb, 0xf2, 0x7a, 0xfe, 0x63,
		0x3f, 0xfb, 0xbf, 0xf9, 0xcf, 0x83, 0x3f, 0x4f, 0xed, 0xe1, 0xf3, 0xcf, 0xe7, 0x7f, 0x9e, 0xda,
		0xe7, 0xd7, 0x7f, 0xff, 0xef, 0xff, 0xfe, 0xf1, 0xef, 0xff, 0x39, 0xfb, 0x5e, 0xfd, 0x83, 0x7f,
		0xfb, 0xff, 0xfd, 0xf9, 0xdf, 0xff, 0x1d, 0xfd, 0xe7, 0xb7, 0xef, 0xe9, 0xff, 0xfe, 0xf2, 0xfd,
		0xfa, 0xbf, 0xfe, 0xfe, 0xff, 0xef, 0x81, 0x31, 0x38, 0x18, 0x23, 0xb6, 0x63, 0xa5, 0xec, 0x38,
		0x89, 0xa2, 0x50, 0x69, 0xe9, 0x1a, 0xe0, 0x8c, 0x75, 0x89, 0x60, 0x0d, 0xb0, 0x06, 0x58, 0x03,
		0xac, 0x71, 0xac, 0xac, 0xc1, 0x74, 0x20, 0x63, 0xdd, 0xd0, 0x9d, 0x21, 0xf9, 0xb9, 0x47, 0x46,
		0xab, 0x8d, 0xe4, 0x27, 0x77, 0x7b, 0x86, 0x4e, 0xa6, 0xb5, 0x58, 0xda, 0x37, 0x18, 0xb2, 0x0e,
		0xab, 0x2a, 0xd3, 0x46, 0x12, 0x94, 0xbb, 0xdd, 0x43, 0x27, 0x55, 0x06, 0x99, 0x50, 0x44, 0x29,
		0x5b, 0xa3, 0x94, 0x07, 0x25, 0xa2, 0xc8, 0x50, 0x7c, 0xf2, 0x2c, 0x0b, 0x91, 0x09, 0x22, 0x13,
		0x44, 0x26, 0x88, 0x4c, 0x10, 0x99, 0x20, 0x32, 0x41, 0x64, 0x82, 0xc8, 0x04, 0x91, 0x09, 0x22,
		0x13, 0x44, 0x26, 0x88, 0x4c, 0x0a, 0x4a, 0x32, 0x13, 0x8e, 0xb9, 0x12, 0x8d, 0xa2, 0x30, 0xc4,
		0x26, 0x88, 0x4d, 0x10, 0x9b, 0x20, 0x36, 0x39, 0xd2, 0xd8, 0x24, 0xd6, 0x0c, 0x8d, 0x39, 0xca,
		0x2c, 0x5d, 0xff, 0xe2, 0x15, 0x7b, 0xaf, 0x20, 0x74, 0xa5, 0xbd, 0xb8, 0xca, 0x85, 0xd9, 0x77,
		0x2d, 0x45, 0xc1, 0x73, 0xc1, 0x73, 0xc1, 0x73, 0xc1, 0x73, 0xc1, 0x73, 0xbd, 0x16, 0xcf, 0xd5,
		0xe9, 0xa3, 0xc4, 0x2c, 0x37, 0x52, 0x2e, 0x73, 0x34, 0x5c, 0x37, 0x53, 0x16, 0xb3, 0x40, 0xc6,
		0x6e, 0xa8, 0xcc, 0x85, 0xb2, 0xdc, 0x54, 0xc9, 0x35, 0xc3, 0x4c, 0x37, 0x57, 0xe6, 0xe3, 0x77,
		0xe6, 0x9a, 0xbf, 0x95, 0x9b, 0xe0, 0x4e, 0x36, 0x1a, 0xe8, 0x9f, 0x70, 0x35, 0xd7, 0xb0, 0x3a,
		0x70, 0x2f, 0xe0, 0x97, 0xc5, 0x77, 0xcf, 0x6e, 0xb7, 0xfc, 0x25, 0xfd, 0xea, 0xc5, 0xff, 0xfa,
		0xbb, 0x17, 0xdc, 0xfd, 0x96, 0x7e, 0xf1, 0x57, 0xd0, 0xa5, 0x45, 0x7b, 0x33, 0x69, 0xc7, 0x5e,
		0xe0, 0x48, 0xdb, 0x17, 0x71, 0xa1, 0x4f, 0xb9, 0x73, 0xbf, 0xd8, 0x2c, 0x61, 0xea, 0xdd, 0xf2,
		0x92, 0x60, 0x74, 0x59, 0x44, 0x47, 0x97, 0x8e, 0x82, 0x3c, 0x3a, 0xba, 0xb4, 0xed, 0xa4, 0xd1,
		0x1a, 0xbd, 0x74, 0x68, 0x74, 0x59, 0xdc, 0x25, 0x04, 0x5d, 0x16, 0x3b, 0x1a, 0x6f, 0x5b, 0x68,
		0x8d, 0x7e, 0x80, 0xba, 0x80, 0x56, 0x8b, 0xdd, 0x87, 0xf8, 0xc5, 0x65, 0x43, 0x4a, 0x3a, 0xd2,
		0xfb, 0xc6, 0x50, 0x0f, 0xfb, 0x32, 0xcd, 0xaf, 0x3f, 0x01, 0xb0, 0x1e, 0x58, 0x0f, 0xac, 0x07,
		0xd6, 0x03, 0xeb, 0x81, 0xf5, 0xc0, 0x7a, 0x60, 0x3d, 0xb0, 0x1e, 0x58, 0x0f, 0xac, 0xdf, 0x82,
		0xf5, 0xcf, 0x10, 0x9d, 0xd2, 0xb5, 0x62, 0x84, 0xf7, 0x55, 0x39, 0x40, 0x74, 0x20, 0x3a, 0x10,
		0x1d, 0x88, 0x0e, 0x44, 0x07, 0xa2, 0x03, 0xd1, 0x81, 0xe8, 0x40, 0x74, 0x20, 0xfa, 0x51, 0x21,
		0xfa, 0x9b, 0x0e, 0xad, 0x48, 0x9e, 0x8a, 0x42, 0xbe, 0x4a, 0x42, 0xa3, 0x15, 0x84, 0x3c, 0x95,
		0x83, 0x54, 0x33, 0xc7, 0x54, 0x29, 0x78, 0x30, 0x15, 0x82, 0x84, 0x88, 0xd6, 0xe9, 0x7a, 0x40,
		0x1a, 0xc4, 0x6f, 0x6e, 0x75, 0x9a, 0x8d, 0xd0, 0x50, 0xeb, 0xa9, 0xb5, 0xbd, 0xa3, 0x5a, 0x4e,
		0xa0, 0xd3, 0x5d, 0xd2, 0xe5, 0x66, 0xaa, 0x5b, 0x5f, 0xe1, 0xea, 0x7d, 0xb2, 0xa6, 0x8a, 0x52,
		0xa9, 0x66, 0x67, 0x54, 0xb2, 0x81, 0x12, 0xb6, 0xac, 0x7c, 0xf5, 0xf4, 0xad, 0xba, 0xb6, 0xd4,
		0xd0, 0x94, 0x5e, 0xfa, 0x92, 0xe3, 0x54, 0x4d, 0x62, 0xed, 0x39, 0xf5, 0xcf, 0xdf, 0x2f, 0x8f,
		0xee, 0xac, 0x8e, 0x57, 0x53, 0x77, 0x9b, 0xdd, 0x34, 0xd9, 0x38, 0x0b, 0x4a, 0x91, 0xed, 0xe4,
		0xce, 0x6a, 0x52, 0x65, 0x2f, 0xc9, 0xb3, 0x94, 0xe4, 0xd9, 0x48, 0x03, 0x59, 0x47, 0xb3, 0x96,
		0xb9, 0xe9, 0xcd, 0x8b, 0x3d, 0x57, 0x68, 0x61, 0x2b, 0xa1, 0x53, 0xfb, 0xa9, 0xa5, 0xfa, 0x26,
		0xfc, 0xe6, 0x6a, 0xf0, 0xac, 0xae, 0x25, 0x63, 0x37, 0x9c, 0x3e, 0x9a, 0xad, 0x0e, 0xb2, 0xad,
		0x0d, 0xca, 0xad, 0x0c, 0x53, 0x5b, 0x17, 0xd4, 0x5b, 0x15, 0x6c, 0x5b, 0x13, 0x6c, 0x5b, 0x11,
		0x06, 0xb7, 0x1e, 0xda, 0x8d, 0x28, 0xc8, 0xb6, 0x12, 0xe8, 0xb7, 0x0e, 0x08, 0xb7, 0x0a, 0x88,
		0xb7, 0x06, 0x68, 0x73, 0x44, 0xf4, 0x7b, 0xca, 0x4c, 0xa9, 0x7e, 0xf6, 0x74, 0x2e, 0x5f, 0xfa,
		0xf6, 0x3b, 0x6d, 0xf2, 0x8d, 0x6f, 0xca, 0xb8, 0x52, 0xf3, 0x87, 0x3c, 0x77, 0x1d, 0x49, 0xfd,
		0x5c, 0xb7, 0x15, 0xc7, 0x37, 0x89, 0x44, 0x3d, 0x57, 0xda, 0xc2, 0xce, 0x29, 0x8b, 0x0e, 0xdc,
		0x36, 0x46, 0xa6, 0xc1, 0xb6, 0x3e, 0xb0, 0x0d, 0xd8, 0x06, 0x6c, 0xe3, 0x8e, 0xe9, 0xf2, 0x81,
		0x6e, 0x3d, 0x3d, 0x0f, 0xbf, 0xc8, 0x8f, 0xa7, 0xe4, 0x5a, 0xbf, 0x29, 0x82, 0x68, 0xb2, 0x69,
		0x8b, 0xda, 0xc8, 0x8b, 0xd9, 0x38, 0x8a, 0xd8, 0x4c, 0x17, 0xaf, 0x71, 0x15, 0xad, 0xb1, 0x17,
		0xab, 0xb1, 0x17, 0xa9, 0xb5, 0x50, 0x9c, 0xd6, 0xad, 0x3d, 0x73, 0xf2, 0x22, 0x34, 0xbe, 0xe2,
		0x33, 0x86, 0xa2, 0x33, 0xa6, 0x62, 0x33, 0x9e, 0x7e, 0x46, 0x7c, 0x35, 0xa7, 0xcc, 0x45, 0x65,
		0xc6, 0x0a, 0x88, 0xf8, 0x0b, 0x87, 0xbe, 0xf3, 0x34, 0x92, 0xe2, 0x9f, 0x5a, 0xee, 0x62, 0xb1,
		0x63, 0x9a, 0xe3, 0x8e, 0x16, 0x5b, 0x5d, 0x77, 0xa5, 0x78, 0xe2, 0x2d, 0x21, 0xb0, 0xc6, 0x73,
		0xdf, 0xcb, 0x05, 0xab, 0xd9, 0xf0, 0x00, 0x55, 0x80, 0x2a, 0x40, 0x15, 0xa0, 0x0a, 0x50, 0x05,
		0xa8, 0x02, 0x54, 0x01, 0xaa, 0x00, 0x55, 0x80, 0xea, 0xbe, 0x93, 0xf8, 0xdc, 0x74, 0x87, 0x37,
		0xb9, 0x5a, 0x2a, 0x05, 0xd8, 0x0a, 0x6c, 0x05, 0xb6, 0x02, 0x5b, 0x81, 0xad, 0xc0, 0x56, 0x60,
		0x2b, 0xb0, 0x15, 0xd8, 0x0a, 0x6c, 0xad, 0x83, 0xad, 0x3c, 0x29, 0xd6, 0x0d, 0x09, 0xc0, 0x55,
		0xe0, 0x2a, 0x70, 0x15, 0xb8, 0x0a, 0x5c, 0x05, 0xae, 0x02, 0x57, 0x81, 0xab, 0xc0, 0xd5, 0x57,
		0x82, 0xab, 0xe8, 0xa5, 0x40, 0x75, 0x70, 0x7d, 0x79, 0x06, 0xfa, 0x84, 0xb8, 0x30, 0xdf, 0x6a,
		0xe9, 0x40, 0xfb, 0xe7, 0xfc, 0x1b, 0xdd, 0x7c, 0xf6, 0x5c, 0xf9, 0xee, 0xbd, 0xd0, 0xe2, 0xf7,
		0xf4, 0xeb, 0x1c, 0xee, 0x29, 0x0c, 0xa9, 0x54, 0xa8, 0x62, 0xf2, 0x23, 0x18, 0x8b, 0x61, 0x71,
		0xfe, 0xa2, 0xed, 0x28, 0x09, 0xe7, 0x2f, 0x70, 0xfe, 0xa2, 0xea, 0x40, 0x8e, 0x72, 0xa8, 0xec,
		0xc2, 0x86, 0xba, 0x17, 0xc6, 0x46, 0x8a, 0x05, 0x29, 0x16, 0xa4, 0x58, 0x90, 0x62, 0x41, 0x8a,
		0x05, 0x29, 0x16, 0xa4, 0x58, 0x90, 0x62, 0x41, 0x8a, 0xe5, 0x95, 0xa4, 0x58, 0x08, 0xa2, 0x9a,
		0x0c, 0x21, 0x17, 0x77, 0xc8, 0xc5, 0x8c, 0xa5, 0x6c, 0x5b, 0xe4, 0x00, 0x5d, 0x81, 0xae, 0x40,
		0x57, 0xa0, 0x2b, 0xd0, 0x15, 0xe8, 0x0a, 0x74, 0x05, 0xba, 0x02, 0x5d, 0x81, 0xae, 0xfb, 0x4e,
		0xe2, 0x54, 0x89, 0x99, 0x54, 0xb6, 0xb8, 0x0d, 0x15, 0x2b, 0xba, 0x6e, 0x91, 0x03, 0x74, 0x05,
		0xba, 0x02, 0x5d, 0x81, 0xae, 0x40, 0x57, 0xa0, 0x2b, 0xd0, 0x15, 0xe8, 0x0a, 0x74, 0x05, 0xba,
		0x56, 0x44, 0xd7, 0x3b, 0x4f, 0x04, 0xda, 0x40, 0xf2, 0x75, 0xb7, 0x38, 0x80, 0x2c, 0x40, 0x16,
		0x20, 0x0b, 0x90, 0x05, 0xc8, 0x02, 0x64, 0x01, 0xb2, 0x00, 0x59, 0x80, 0x2c, 0x40, 0xb6, 0x22,
		0xc8, 0xaa, 0xc4, 0x24, 0xc7, 0x96, 0x4b, 0x03, 0xc6, 0x02, 0x63, 0x81, 0xb1, 0xc0, 0x58, 0x60,
		0x2c, 0x30, 0x16, 0x18, 0x0b, 0x8c, 0x05, 0xc6, 0x02, 0x63, 0xf7, 0x9d, 0x44, 0x2f, 0x88, 0x12,
		0x6d, 0x7b, 0x41, 0x9c, 0x4c, 0xa7, 0x9e, 0xe3, 0xc9, 0x40, 0xdb, 0x4a, 0xc6, 0x19, 0xa5, 0xd8,
		0xf2, 0x9b, 0x0c, 0x34, 0xc3, 0x01, 0xae, 0x3d, 0x64, 0x02, 0x69, 0x81, 0xb4, 0x40, 0x5a, 0x20,
		0x2d, 0x90, 0x16, 0x48, 0x0b, 0xa4, 0x05, 0xd2, 0x02, 0x69, 0x81, 0xb4, 0xfb, 0x4e, 0xe2, 0x4c,
		0x38, 0xfc, 0xa5, 0xb1, 0x65, 0x42, 0x00, 0xad, 0x80, 0x56, 0x40, 0x2b, 0xa0, 0x15, 0xd0, 0x0a,
		0x68, 0x05, 0xb4, 0x02, 0x5a, 0x01, 0xad, 0x80, 0xd6, 0x2a, 0xd0, 0x6a, 0xaa, 0x28, 0x76, 0x87,
		0x2c, 0x20, 0x2c, 0x10, 0x16, 0x08, 0x0b, 0x84, 0x05, 0xc2, 0x02, 0x61, 0x81, 0xb0, 0x40, 0x58,
		0x20, 0x2c, 0x10, 0xb6, 0x0a, 0xc2, 0x1a, 0x2a, 0x87, 0xdd, 0x2e, 0x0a, 0x00, 0x0b, 0x80, 0x05,
		0xc0, 0x02, 0x60, 0x01, 0xb0, 0x00, 0x58, 0x00, 0x2c, 0x00, 0x16, 0x00, 0xfb, 0x4a, 0x00, 0x16,
		0x97, 0xee, 0xf0, 0x5d, 0xba, 0x43, 0x76, 0xdb, 0x42, 0x17, 0x6e, 0xdc, 0xf9, 0x30, 0xff, 0x32,
		0x87, 0x7a, 0xdf, 0xce, 0x6d, 0xe1, 0x0a, 0x24, 0xda, 0x2b, 0x77, 0x6e, 0xc9, 0x2e, 0x57, 0xc2,
		0xad, 0x3b, 0xb8, 0x75, 0xe7, 0xa0, 0xc2, 0xa0, 0x23, 0xb9, 0x75, 0xe7, 0xd6, 0x5b, 0xdc, 0x3f,
		0xcc, 0x97, 0x79, 0xd9, 0x14, 0x81, 0x8c, 0x0b, 0x32, 0x2e, 0xc8, 0xb8, 0x20, 0xe3, 0x82, 0x8c,
		0x0b, 0x32, 0x2e, 0xc8, 0xb8, 0x20, 0xe3, 0x82, 0x8c, 0xcb, 0x2b, 0xc9, 0xb8, 0xbc, 0x25, 0x04,
		0xd6, 0x78, 0xee, 0x7b, 0xb9, 0x60, 0x35, 0x1b, 0x1e, 0xa0, 0x0a, 0x50, 0x05, 0xa8, 0x02, 0x54,
		0x01, 0xaa, 0x00, 0x55, 0x80, 0x2a, 0x40, 0x15, 0xa0, 0x0a, 0x50, 0xdd, 0x77, 0x12, 0xe7, 0x75,
		0x66, 0xdc, 0xc9, 0xd5, 0x52, 0x29, 0xc0, 0x56, 0x60, 0x2b, 0xb0, 0x15, 0xd8, 0x0a, 0x6c, 0x05,
		0xb6, 0x02, 0x5b, 0x81, 0xad, 0xc0, 0x56, 0x60, 0x6b, 0x1d, 0x6c, 0xe5, 0x49, 0xb1, 0x6e, 0x48,
		0x00, 0xae, 0x02, 0x57, 0x81, 0xab, 0xc0, 0x55, 0xe0, 0x2a, 0x70, 0x15, 0xb8, 0x0a, 0x5c, 0x05,
		0xae, 0xbe, 0x12, 0x5c, 0xc5, 0x01, 0x0c, 0xae, 0x03, 0x18, 0x74, 0x85, 0xf9, 0x56, 0x37, 0xce,
		0x60, 0xfc, 0xf4, 0x5e, 0x68, 0xf1, 0x7b, 0xfa, 0x75, 0x0e, 0xf7, 0x14, 0xc6, 0xe2, 0x4c, 0x0c,
		0xf5, 0x11, 0x0c, 0x92, 0xa3, 0x36, 0x38, 0x7f, 0x81, 0xf3, 0x17, 0x07, 0x15, 0x05, 0x1d, 0xc9,
		0xf9, 0x0b, 0x47, 0x39, 0x54, 0x76, 0x61, 0x43, 0xdd, 0x0b, 0x63, 0x23, 0xc5, 0x82, 0x14, 0x0b,
		0x52, 0x2c, 0x48, 0xb1, 0x20, 0xc5, 0x82, 0x14, 0x0b, 0x52, 0x2c, 0x48, 0xb1, 0x20, 0xc5, 0xf2,
		0x4a, 0x52, 0x2c, 0x04, 0x51, 0x4d, 0x86, 0x90, 0x06, 0x3a, 0xb4, 0x6d, 0x91, 0x03, 0x74, 0x05,
		0xba, 0x02, 0x5d, 0x81, 0xae, 0x40, 0x57, 0xa0, 0x2b, 0xd0, 0x15, 0xe8, 0x0a, 0x74, 0x05, 0xba,
		0xee, 0x3b, 0x89, 0x53, 0x25, 0x66, 0x52, 0xf1, 0x5f, 0xed, 0xb6, 0x45, 0x0e, 0xd0, 0x15, 0xe8,
		0x0a, 0x74, 0x05, 0xba, 0x02, 0x5d, 0x81, 0xae, 0x40, 0x57, 0xa0, 0x2b, 0xd0, 0x15, 0xe8, 0x5a,
		0x11, 0x5d, 0x4d, 0x5d, 0xf0, 0xb6, 0x5b, 0x1c, 0x40, 0x16, 0x20, 0x0b, 0x90, 0x05, 0xc8, 0x02,
		0x64, 0x01, 0xb2, 0x00, 0x59, 0x80, 0x2c, 0x40, 0x16, 0x20, 0x5b, 0x11, 0x64, 0x0d, 0x5d, 0xf3,
		0xb6, 0x53, 0x1a, 0x30, 0x16, 0x18, 0x0b, 0x8c, 0x05, 0xc6, 0x02, 0x63, 0x81, 0xb1, 0xc0, 0x58,
		0x60, 0x2c, 0x30, 0x16, 0x18, 0xbb, 0xef, 0x24, 0x7a, 0x41, 0x94, 0x68, 0xdb, 0x0b, 0xe2, 0x64,
		0x3a, 0xf5, 0x1c, 0x4f, 0x06, 0xda, 0x56, 0x32, 0xce, 0x28, 0xc5, 0x96, 0xdf, 0x64, 0xa0, 0x19,
		0x0e, 0x70, 0xed, 0x21, 0x13, 0x48, 0xfb, 0xff, 0xb1, 0xf7, 0xae, 0x4d, 0x6e, 0x1b, 0x49, 0xba,
		0xf0, 0x77, 0xfd, 0x0a, 0x04, 0x23, 0x36, 0x2c, 0xcd, 0x18, 0x12, 0x51, 0xb8, 0x33, 0x62, 0x63,
		0x42, 0x3b, 0x96, 0xdf, 0x55, 0xec, 0x8c, 0xed, 0xb0, 0xb4, 0xfb, 0xee, 0x59, 0xb9, 0x8f, 0x02,
		0x4d, 0xa2, 0x5b, 0x5c, 0x91, 0x20, 0x07, 0x04, 0xad, 0x96, 0x35, 0xfa, 0xef, 0x27, 0x00, 0x10,
		0xe0, 0x0d, 0x2c, 0x00, 0x59, 0x4f, 0xb1, 0xd9, 0xad, 0x9c, 0x0f, 0xbb, 0xb2, 0x2d, 0x3e, 0x00,
		0xaa, 0xf2, 0xc9, 0x5b, 0x65, 0x66, 0xb1, 0x4b, 0xcb, 0x2e, 0x2d, 0xbb, 0xb4, 0xec, 0xd2, 0xb2,
		0x4b, 0xcb, 0x2e, 0x2d, 0xbb, 0xb4, 0xec, 0xd2, 0xb2, 0x4b, 0xdb, 0x75, 0x13, 0xe7, 0xd1, 0x58,
		0x7f, 0x69, 0x6c, 0xd3, 0x43, 0xd8, 0x69, 0x65, 0xa7, 0x95, 0x9d, 0x56, 0x76, 0x5a, 0xd9, 0x69,
		0x65, 0xa7, 0x95, 0x9d, 0x56, 0x76, 0x5a, 0xd9, 0x69, 0x65, 0xa7, 0xb5, 0x8f, 0xd3, 0x7a, 0xae,
		0xa2, 0x58, 0xc9, 0xb3, 0xd8, 0x85, 0x65, 0x17, 0x96, 0x5d, 0x58, 0x76, 0x61, 0xd9, 0x85, 0x65,
		0x17, 0x96, 0x5d, 0x58, 0x76, 0x61, 0xd9, 0x85, 0x65, 0x17, 0xb6, 0x8f, 0x0b, 0x7b, 0xa6, 0x72,
		0xd8, 0xd3, 0x8f, 0x62, 0x07, 0x96, 0x1d, 0x58, 0x76, 0x60, 0xd9, 0x81, 0x65, 0x07, 0x96, 0x1d,
		0x58, 0x76, 0x60, 0xd9, 0x81, 0x65, 0x07, 0xf6, 0x1b, 0x71, 0x60, 0xf9, 0xd2, 0x1d, 0x7d, 0x97,
		0xee, 0xc0, 0x6e, 0x5b, 0xb8, 0x84, 0x1b, 0x77, 0x5e, 0x95, 0x1f, 0x73, 0x5f, 0xf7, 0xed, 0x3c,
		0x39, 0xa3, 0x7c, 0xa2, 0xe4, 0xf2, 0x52, 0xe4, 0x71, 0xa0, 0x72, 0x59, 0xd1, 0x7d, 0x4a, 0x1e,
		0x4d, 0xda, 0xfa, 0xcb, 0x4a, 0xbf, 0x5f, 0xf4, 0x94, 0xaa, 0x41, 0x7c, 0x97, 0xa5, 0x91, 0xb9,
		0x4e, 0x56, 0x59, 0x74, 0x3d, 0xa3, 0x39, 0xe8, 0x83, 0x4f, 0x1f, 0xe2, 0x84, 0xec, 0xda, 0x2a,
		0x48, 0x70, 0x15, 0x00, 0x3c, 0x7f, 0xde, 0x24, 0x7e, 0xc6, 0xbf, 0x1a, 0xdf, 0xad, 0xd2, 0xe5,
		0x77, 0x2a, 0x02, 0x06, 0x0a, 0x67, 0x77, 0xc3, 0xd7, 0x62, 0xb1, 0x14, 0x4d, 0x13, 0x3a, 0x58,
		0xdd, 0x0b, 0x4e, 0x5b, 0x56, 0xf3, 0x5e, 0x6e, 0x25, 0xfb, 0x21, 0x5e, 0x8d, 0xd3, 0xe9, 0x12,
		0x62, 0x8c, 0x77, 0xc5, 0xe6, 0x88, 0xf8, 0xf9, 0x67, 0xbe, 0xf9, 0xf5, 0x97, 0xef, 0x54, 0x77,
		0x08, 0x98, 0x07, 0xd9, 0x15, 0x9e, 0xc9, 0xce, 0x3a, 0x00, 0x2c, 0xb7, 0x8e, 0xa4, 0xc7, 0xa1,
		0x2c, 0x9d, 0x5e, 0xe2, 0x87, 0x65, 0xad, 0x9f, 0xe8, 0xf5, 0xa2, 0xfb, 0xea, 0x6d, 0x45, 0x2f,
		0xe0, 0xde, 0xac, 0x3f, 0x41, 0x6c, 0xcf, 0x6d, 0xe6, 0xfb, 0x09, 0x66, 0x77, 0xc1, 0xe8, 0xb1,
		0xc5, 0x83, 0x6c, 0x9d, 0x24, 0xf1, 0xcc, 0xbc, 0x4d, 0xf7, 0x16, 0xb3, 0xf7, 0x56, 0xd7, 0xba,
		0xee, 0x04, 0x5e, 0x4f, 0xa1, 0xa3, 0x5d, 0xbc, 0x48, 0xce, 0x94, 0xab, 0x64, 0xc4, 0x75, 0x65,
		0xbe, 0x55, 0x35, 0x3b, 0x2c, 0x93, 0x0d, 0x53, 0xde, 0x1a, 0x33, 0xd3, 0x7a, 0x5d, 0x57, 0xea,
		0xc5, 0x86, 0xb9, 0x15, 0xcd, 0xa6, 0x49, 0xc1, 0x00, 0x73, 0xba, 0x34, 0xa3, 0xc9, 0x24, 0x8d,
		0x57, 0xf4, 0x9e, 0xd8, 0x5a, 0xd4, 0x4e, 0xe0, 0x12, 0xb7, 0x45, 0xed, 0x96, 0x53, 0xe5, 0xe3,
		0x29, 0xc4, 0x71, 0x94, 0xee, 0xe3, 0x27, 0x1d, 0xfe, 0x39, 0xe4, 0x78, 0x49, 0xaf, 0x87, 0xae,
		0xe7, 0xf8, 0xe8, 0xbc, 0x59, 0x0c, 0xd5, 0x5b, 0x49, 0x07, 0xd1, 0xcd, 0x14, 0x17, 0x0a, 0xe4,
		0x60, 0x98, 0x4b, 0x89, 0x87, 0x7c, 0x29, 0xf1, 0x45, 0x44, 0x4d, 0x06, 0x5f, 0x4a, 0x7c, 0xc9,
		0xc9, 0x75, 0xd8, 0x69, 0x70, 0x2d, 0x9b, 0x6f, 0xd7, 0xc9, 0xac, 0x58, 0xa5, 0xe8, 0xc6, 0x9c,
		0x22, 0x6a, 0x46, 0x6a, 0x03, 0xec, 0x00, 0xb0, 0x5e, 0x25, 0xeb, 0x39, 0x4e, 0xae, 0xdf, 0x2e,
		0xde, 0x64, 0xe9, 0x34, 0xb9, 0xc5, 0x9e, 0xa7, 0x0f, 0x37, 0x81, 0xc2, 0xce, 0x32, 0x9a, 0xc9,
		0x22, 0x89, 0x91, 0x27, 0xeb, 0x56, 0xd3, 0x43, 0xa6, 0xcb, 0xdf, 0x3d, 0xe4, 0x43, 0x44, 0xf3,
		0x33, 0x9c, 0xc1, 0x65, 0x15, 0x44, 0x2c, 0x5e, 0x17, 0x3c, 0x07, 0xee, 0x60, 0xd3, 0x37, 0x8f,
		0x0c, 0xf1, 0xbd, 0xce, 0x27, 0x78, 0x39, 0x45, 0x86, 0xfa, 0x1e, 0x51, 0x48, 0xe0, 0xc8, 0x18,
		0x3e, 0x8e, 0x33, 0xc9, 0x7b, 0xc9, 0x9e, 0x6e, 0xe4, 0x00, 0xe4, 0x2b, 0x15, 0x68, 0xec, 0x2c,
		0xb1, 0xb3, 0xc4, 0xce, 0xd2, 0xc3, 0x77, 0x96, 0xa6, 0x49, 0x91, 0xa6, 0x40, 0xba, 0x4b, 0x01,
		0x00, 0xeb, 0x97, 0x28, 0xcb, 0xe2, 0x34, 0x81, 0xd5, 0xcb, 0x0d, 0x9e, 0x3e, 0x7d, 0x37, 0x34,
		0xc3, 0xab, 0x7f, 0xbe, 0xb3, 0xcc, 0xf0, 0xaa, 0xfc, 0xa3, 0x55, 0xfc, 0xbf, 0xf2, 0xcf, 0xe2,
		0xdd, 0xd0, 0x74, 0xaa, 0x3f, 0xbb, 0xef, 0x86, 0xa6, 0x7b, 0xf5, 0xec, 0xb7, 0xdf, 0x9e, 0x3f,
		0xfb, 0x62, 0x7f, 0xed, 0xff, 0xc3, 0xa7, 0xff, 0xf2, 0xee, 0xb7, 0xdf, 0x96, 0x5f, 0x7e, 0xfa,
		0x9a, 0xff, 0xdf, 0xbf, 0x7d, 0xbd, 0xfa, 0xf3, 0xb3, 0xbf, 0xa8, 0x4b, 0xe0, 0xd5, 0xbd, 0x4a,
		0x20, 0xe0, 0x94, 0xf8, 0x08, 0x53, 0xe9, 0xd4, 0xf8, 0xf0, 0x7f, 0x1a, 0xca, 0x4a, 0x9f, 0x3f,
		0x7f, 0x11, 0xdd, 0x4c, 0x8d, 0x7f, 0x35, 0xbe, 0x6b, 0x70, 0xab, 0xbe, 0x7b, 0x60, 0x45, 0xd3,
		0x80, 0x53, 0xe7, 0xb3, 0xe9, 0xf5, 0x46, 0xfd, 0xde, 0xb2, 0x1b, 0xb8, 0xa2, 0x69, 0xe0, 0xbe,
		0x22, 0x4f, 0xad, 0x65, 0x62, 0xfa, 0xf2, 0xc7, 0xd7, 0xf9, 0xc2, 0xbc, 0xfd, 0xcf, 0x9f, 0xfe,
		0xf6, 0xfe, 0x97, 0x1f, 0x5f, 0xbf, 0x7f, 0xf9, 0xe3, 0xfb, 0xd7, 0x3f, 0xbc, 0x7f, 0xfd, 0xcb,
		0x7f, 0x41, 0xc5, 0x54, 0xa7, 0xa8, 0x1a, 0x5a, 0xcf, 0xb9, 0xcf, 0x2e, 0xb9, 0x4d, 0xd2, 0x2b,
		0xdb, 0xa4, 0x0b, 0xad, 0x03, 0xfd, 0x7a, 0x21, 0x31, 0xd7, 0xd5, 0xc3, 0x8c, 0xb9, 0x3c, 0x68,
		0xcc, 0xe5, 0x71, 0xcc, 0xc5, 0x31, 0x17, 0xc7, 0x5c, 0x8f, 0x22, 0xe6, 0xf2, 0xbe, 0x95, 0xa0,
		0x6b, 0xf4, 0xcf, 0x3c, 0x34, 0x8a, 0xcc, 0x9b, 0x97, 0xe6, 0x8f, 0x57, 0x5f, 0x86, 0xdf, 0x3b,
		0x5f, 0x9f, 0x8d, 0x9e, 0x3d, 0x3d, 0xfc, 0x77, 0xa3, 0x67, 0x5f, 0x86, 0xdf, 0xbb, 0x5f, 0x9f,
		0x3e, 0x6d, 0xf8, 0x2f, 0x7f, 0x69, 0xc2, 0x78, 0xf6, 0xcf, 0xa7, 0x4f, 0x9f, 0x6e, 0xc2, 0xad,
		0xbd, 0x10, 0xec, 0xdd, 0xd0, 0xba, 0xfa, 0x4b, 0xf1, 0xc7, 0xf2, 0xff, 0xd6, 0x41, 0x5c, 0xa7,
		0xbf, 0xfc, 0xac, 0x31, 0x74, 0xfb, 0x1e, 0x16, 0x81, 0xfe, 0xdf, 0xd1, 0xd5, 0x9f, 0x47, 0xcf,
		0xbe, 0x78, 0x5f, 0xab, 0x3f, 0x17, 0xff, 0xf7, 0xd9, 0x3f, 0x9f, 0x3e, 0xff, 0xd3, 0x6f, 0xbf,
		0x3d, 0x7f, 0xfe, 0xa7, 0x67, 0xe5, 0x87, 0x6d, 0xfe, 0xde, 0x9f, 0xca, 0xff, 0xfa, 0x97, 0xd1,
		0xe8, 0xe8, 0x5f, 0x3d, 0x7b, 0xfa, 0x2f, 0xcf, 0x39, 0xaa, 0x7c, 0x74, 0x51, 0xa5, 0xc7, 0x51,
		0xe5, 0x05, 0x45, 0x95, 0x1e, 0x47, 0x95, 0xcd, 0x01, 0x8b, 0xc7, 0x51, 0xe5, 0xe5, 0x47, 0x95,
		0x1e, 0x47, 0x95, 0x97, 0x1a, 0x55, 0x72, 0xb7, 0x98, 0xac, 0x5e, 0xbc, 0xb9, 0x52, 0xf9, 0x05,
		0xb4, 0xb6, 0xd2, 0x38, 0x4b, 0x55, 0xf9, 0xdb, 0xe2, 0x4b, 0xfe, 0xbf, 0x74, 0xef, 0x5f, 0xfe,
		0xb0, 0xfd, 0x8e, 0xd7, 0xcb, 0x97, 0x9b, 0xaf, 0x38, 0x57, 0x27, 0xd9, 0xf7, 0xa8, 0x5a, 0x59,
		0x73, 0x16, 0x27, 0xb7, 0x85, 0x28, 0x68, 0x29, 0x99, 0xad, 0xe0, 0xd5, 0x2a, 0x67, 0x87, 0x5c,
		0x39, 0xab, 0xdd, 0xe4, 0x72, 0xe5, 0xec, 0xd9, 0x35, 0xba, 0x72, 0x66, 0x62, 0x6f, 0x70, 0x4a,
		0xa0, 0x22, 0x44, 0x1b, 0xa2, 0x29, 0x4c, 0x7a, 0x00, 0xcd, 0x45, 0x01, 0x04, 0x8e, 0xc8, 0xb9,
		0x27, 0xe8, 0x39, 0x27, 0xda, 0x66, 0x5e, 0xe0, 0x67, 0x5c, 0x20, 0x86, 0x8e, 0x21, 0xe7, 0x94,
		0xd4, 0x5b, 0x21, 0x5c, 0xf7, 0xdb, 0xdb, 0x8c, 0x7b, 0x72, 0x71, 0xaf, 0x2e, 0xd9, 0xa1, 0xb9,
		0x31, 0xaf, 0xa7, 0x59, 0x31, 0x80, 0x20, 0x06, 0xf8, 0x2f, 0xbb, 0x68, 0xec, 0xae, 0xb0, 0xbb,
		0xc2, 0xee, 0x8a, 0x36, 0x77, 0xa5, 0x8c, 0xa7, 0xcc, 0x8f, 0x91, 0x39, 0xb9, 0x51, 0x62, 0x9c,
		0x01, 0xaa, 0xee, 0xc7, 0x54, 0xf5, 0x63, 0xab, 0xf9, 0xcb, 0x2a, 0xfe, 0xc9, 0x74, 0x55, 0xa4,
		0xd4, 0x01, 0xc6, 0xd8, 0xca, 0xf1, 0xe2, 0xa4, 0x80, 0xbb, 0xdf, 0x13, 0x39, 0x58, 0xbd, 0x7c,
		0xbd, 0x3c, 0x10, 0xd3, 0x5d, 0x2d, 0xce, 0xc8, 0xb0, 0x1e, 0xf9, 0x44, 0x03, 0x8a, 0xb9, 0xfd,
		0x18, 0xc7, 0xcb, 0x68, 0x36, 0xfd, 0x3d, 0x36, 0xe7, 0xd1, 0xdd, 0x74, 0xbe, 0x9e, 0x9b, 0x69,
		0x9c, 0xa5, 0x9f, 0xd5, 0x2d, 0xef, 0x29, 0x60, 0x36, 0xc2, 0x6c, 0x84, 0xd9, 0x08, 0x73, 0xce,
		0x80, 0x73, 0x06, 0x9c, 0x33, 0xe0, 0x9c, 0x01, 0xe7, 0x0c, 0xb0, 0x4e, 0xcc, 0x32, 0x4e, 0xa7,
		0x8b, 0x09, 0xd2, 0x7b, 0xd9, 0x20, 0xb2, 0xdb, 0xc2, 0x6e, 0x0b, 0xbb, 0x2d, 0x5a, 0xdd, 0x16,
		0xcb, 0x03, 0xf8, 0x2d, 0x1e, 0xfb, 0x2d, 0xec, 0xb7, 0x5c, 0xba, 0xdf, 0xe2, 0xb9, 0xae, 0xcd,
		0x9e, 0x0b, 0x7b, 0x2e, 0xbb, 0x7e, 0x06, 0xe8, 0xc0, 0xe3, 0x10, 0x90, 0xfd, 0x16, 0xf6, 0x5b,
		0xd8, 0x6f, 0xd1, 0xe6, 0xb7, 0xf0, 0x99, 0x47, 0x17, 0x34, 0x3e, 0xf3, 0x68, 0x87, 0xe2, 0x33,
		0x8f, 0x33, 0x1a, 0x5d, 0xc8, 0xf9, 0x06, 0x9f, 0x65, 0xb0, 0x71, 0x65, 0xe3, 0xaa, 0x39, 0x29,
		0xa0, 0x74, 0x71, 0x1c, 0xe0, 0xa2, 0x38, 0x4e, 0x0a, 0x70, 0x52, 0xe0, 0x3c, 0x49, 0x01, 0xf4,
		0xc5, 0x6c, 0x9c, 0x19, 0x78, 0xe0, 0x99, 0x81, 0xcf, 0xc8, 0x42, 0xc8, 0x7d, 0x38, 0x76, 0x5c,
		0xd8, 0x71, 0x61, 0xc7, 0x45, 0x7b, 0x56, 0x20, 0xfe, 0xcc, 0x39, 0x01, 0x69, 0x4e, 0x20, 0xba,
		0x5e, 0xe5, 0x02, 0x84, 0x4a, 0x09, 0x2c, 0xd3, 0xb8, 0xc0, 0x7b, 0x2c, 0x39, 0x81, 0xcd, 0xf2,
		0x60, 0x52, 0x02, 0xd5, 0xe2, 0x70, 0x4e, 0xa0, 0x69, 0x75, 0x56, 0x85, 0xda, 0x86, 0x5e, 0x37,
		0x72, 0x0c, 0xc9, 0x37, 0x8d, 0xb0, 0xd9, 0x65, 0xb3, 0x7b, 0xf0, 0x3d, 0x7c, 0xd3, 0x88, 0x1e,
		0xda, 0x22, 0xe9, 0x7b, 0x2e, 0x1a, 0xa3, 0xe9, 0xac, 0x8d, 0xd6, 0xda, 0xe8, 0x7d, 0x46, 0x9a,
		0x83, 0xa2, 0x6f, 0xbe, 0x69, 0xe4, 0xfc, 0xbe, 0xb8, 0x1e, 0x9f, 0x7c, 0xdf, 0x37, 0xe7, 0x9b,
		0x46, 0xce, 0x90, 0x4a, 0x34, 0xf8, 0xa6, 0x91, 0xce, 0x8f, 0xe0, 0x9b, 0x46, 0x54, 0xa5, 0x8e,
		0x6f, 0x1a, 0x61, 0x67, 0x89, 0x9d, 0x25, 0x76, 0x96, 0xf8, 0xa6, 0x11, 0xbe, 0x69, 0x84, 0xb8,
		0x7c, 0x3c, 0x13, 0x96, 0x6f, 0x1a, 0x39, 0x9b, 0x5e, 0x6f, 0xd4, 0xef, 0x7c, 0xd3, 0xc8, 0x69,
		0x31, 0xe5, 0x9b, 0x46, 0x2e, 0x4c, 0x72, 0x0d, 0xbe, 0x69, 0x04, 0x89, 0xc2, 0x37, 0x8d, 0xf0,
		0x4d, 0x23, 0x1c, 0x73, 0x71, 0xcc, 0xf5, 0x68, 0x62, 0x2e, 0xbe, 0x69, 0x84, 0x6f, 0x1a, 0xe1,
		0x9b, 0x46, 0x38, 0xaa, 0xe4, 0x9b, 0x46, 0x2e, 0x38, 0xaa, 0xe4, 0x9b, 0x46, 0xf8, 0xa6, 0x91,
		0x87, 0x1b, 0x55, 0xf2, 0x4d, 0x23, 0x17, 0x1b, 0x55, 0xf2, 0x4d, 0x23, 0x84, 0x9b, 0x46, 0x50,
		0x65, 0x95, 0xc6, 0xfd, 0x5d, 0x32, 0x52, 0x6a, 0xb9, 0x07, 0x71, 0xbf, 0xc8, 0x66, 0xb5, 0x37,
		0x2b, 0x84, 0xa9, 0x88, 0x2d, 0xc0, 0xb8, 0x05, 0x85, 0x6b, 0x61, 0xb9, 0x16, 0x16, 0x9d, 0x6b,
		0xd8, 0x52, 0xad, 0x2c, 0x0b, 0x03, 0x34, 0x9e, 0x04, 0x17, 0xac, 0x9d, 0x36, 0x26, 0x62, 0xbe,
		0x98, 0x00, 0xb4, 0xd3, 0x2e, 0x18, 0x6b, 0x27, 0xd6, 0x4e, 0xac, 0x9d, 0xb4, 0x69, 0xa7, 0xb7,
		0x5b, 0xd7, 0x4e, 0x81, 0x6e, 0xc6, 0xa3, 0xef, 0x8f, 0x5b, 0x27, 0x1f, 0x93, 0xc5, 0xa7, 0x04,
		0xd6, 0x20, 0x77, 0x9b, 0x9a, 0xf1, 0xc2, 0x04, 0xd4, 0xed, 0x19, 0x75, 0x75, 0x6d, 0x0d, 0x89,
		0x28, 0xdc, 0x1d, 0xd8, 0x39, 0xe4, 0x1c, 0xfb, 0x9a, 0xce, 0x3e, 0x26, 0xe4, 0x3d, 0x5d, 0x50,
		0xfd, 0x63, 0x01, 0xe6, 0xd5, 0x07, 0x7b, 0x8f, 0xa5, 0x71, 0x71, 0x67, 0x03, 0xc9, 0x7d, 0x6b,
		0xcd, 0x80, 0x1e, 0xa6, 0x8c, 0xb9, 0xaa, 0x84, 0x75, 0x31, 0x50, 0x9e, 0xda, 0xe4, 0xd1, 0x1a,
		0x6a, 0xbe, 0xb7, 0x70, 0x36, 0x14, 0x31, 0x7f, 0x47, 0x44, 0x03, 0x43, 0xa5, 0x93, 0x54, 0x2b,
		0xb1, 0x1f, 0x67, 0x1f, 0xe9, 0x8e, 0x13, 0x69, 0x4e, 0xa6, 0x69, 0x3c, 0x56, 0x4a, 0xb8, 0x34,
		0xf9, 0xa6, 0x3b, 0xb0, 0xec, 0xa5, 0xb2, 0x97, 0xca, 0x5e, 0xaa, 0x4e, 0x2f, 0x75, 0x66, 0x4e,
		0x97, 0x35, 0xeb, 0xd8, 0x4d, 0x3d, 0xe1, 0xa6, 0x66, 0x07, 0x0b, 0x85, 0x6a, 0x16, 0x2b, 0x9d,
		0xd6, 0x23, 0xf4, 0x49, 0x3c, 0x8e, 0x96, 0x30, 0x07, 0xf6, 0x08, 0x3e, 0x4e, 0x40, 0xf0, 0x76,
		0x23, 0xfc, 0x3c, 0xba, 0x7b, 0x34, 0x7e, 0xde, 0x89, 0xad, 0xc1, 0xf8, 0x7c, 0x27, 0x36, 0x06,
		0xe3, 0xff, 0x35, 0x6e, 0x0b, 0xc6, 0xe5, 0x6a, 0x66, 0x03, 0xbb, 0x4b, 0x12, 0x77, 0x29, 0x5b,
		0xac, 0x60, 0x3e, 0x52, 0x8e, 0xc5, 0x8e, 0x11, 0x3b, 0x46, 0xec, 0x18, 0x69, 0x73, 0x8c, 0x78,
		0x30, 0xe7, 0xee, 0x8b, 0xf0, 0x60, 0x4e, 0x1e, 0xcc, 0xf9, 0x58, 0xf7, 0x84, 0x07, 0x73, 0x9e,
		0x74, 0x59, 0xb2, 0x19, 0xce, 0x65, 0xc9, 0x66, 0xec, 0xb2, 0xb0, 0xcb, 0xc2, 0x2e, 0x0b, 0xbb,
		0x2c, 0xec, 0xb2, 0xb0, 0xcb, 0xc2, 0x2e, 0x0b, 0xbb, 0x2c, 0xa0, 0x5f, 0xf4, 0x94, 0x50, 0x44,
		0x23, 0x8e, 0x5a, 0xe3, 0x0d, 0x40, 0xd5, 0x3f, 0x7f, 0xde, 0x54, 0x55, 0xbc, 0x69, 0xed, 0xd8,
		0x94, 0x9d, 0x7c, 0x77, 0x61, 0xfe, 0x04, 0xa0, 0x7f, 0x46, 0xaf, 0x37, 0xd1, 0x6d, 0x51, 0xef,
		0xa5, 0xc1, 0x1a, 0xd9, 0x06, 0xb3, 0x2b, 0x44, 0x47, 0x35, 0xdd, 0x45, 0x7f, 0x45, 0x59, 0xcf,
		0xfd, 0xeb, 0x2b, 0xd5, 0xd6, 0x17, 0x64, 0xab, 0x8b, 0xbe, 0xd6, 0x16, 0x2d, 0xad, 0x2c, 0x87,
		0x82, 0xd5, 0xb6, 0xd0, 0x8f, 0x3c, 0x6f, 0x7e, 0xa5, 0x55, 0xa3, 0x2b, 0xb6, 0x7d, 0xdc, 0x77,
		0xbb, 0xc7, 0x80, 0xd2, 0xb3, 0x70, 0x1f, 0x4d, 0x1d, 0xfd, 0xa4, 0xb4, 0xbb, 0x94, 0xf4, 0xd8,
		0xef, 0x2a, 0x9d, 0xb0, 0xbb, 0x7c, 0x7d, 0xf7, 0xfc, 0x30, 0x35, 0x41, 0xdf, 0x0a, 0xe2, 0xd8,
		0x72, 0x72, 0x4a, 0x42, 0x25, 0x15, 0xa1, 0x2b, 0x05, 0xa1, 0xaa, 0xe4, 0x61, 0x29, 0x07, 0x98,
		0x1e, 0xd7, 0x98, 0x62, 0xd0, 0xeb, 0xd9, 0x52, 0xc7, 0x8c, 0xe7, 0x06, 0x35, 0x9b, 0x26, 0x05,
		0x03, 0x8a, 0xc2, 0x3c, 0xdc, 0x05, 0x01, 0x27, 0x91, 0x39, 0x17, 0xc8, 0xb9, 0x40, 0xce, 0x05,
		0x6a, 0xcb, 0x05, 0x02, 0xb8, 0x66, 0x80, 0x46, 0xae, 0xc0, 0x46, 0xad, 0x3c, 0xdc, 0xb9, 0x96,
		0x57, 0x7c, 0x53, 0x2c, 0x6b, 0x74, 0xd6, 0xe8, 0xac, 0xd1, 0x15, 0x64, 0x8b, 0x4f, 0x77, 0x76,
		0x5f, 0x84, 0x4f, 0x77, 0xf8, 0x74, 0xe7, 0xb1, 0xee, 0x09, 0x17, 0xa4, 0x1c, 0xa7, 0xbb, 0xaa,
		0x81, 0x28, 0xc8, 0xd8, 0xb4, 0x09, 0x94, 0x9d, 0x18, 0x76, 0x62, 0xd8, 0x89, 0xe1, 0xb0, 0x94,
		0xc3, 0xd2, 0xcb, 0xd0, 0xf8, 0x3c, 0x94, 0x89, 0x35, 0x3c, 0x6b, 0xf8, 0x07, 0xa4, 0xe1, 0xbf,
		0x91, 0xa1, 0x4c, 0x90, 0xca, 0x68, 0x2e, 0x89, 0x66, 0x6d, 0xc4, 0xda, 0x88, 0x93, 0x66, 0x9c,
		0x34, 0xe3, 0xa4, 0x19, 0x27, 0xcd, 0x38, 0x69, 0x86, 0x76, 0x52, 0x36, 0x9d, 0x57, 0x2a, 0xda,
		0xf4, 0xa8, 0x8d, 0x2b, 0x07, 0x63, 0xa7, 0x85, 0x9d, 0x16, 0x76, 0x5a, 0x38, 0x84, 0x22, 0xfe,
		0x82, 0x1b, 0x36, 0x8e, 0x7b, 0x0b, 0xb8, 0x59, 0xa3, 0xa7, 0xca, 0x68, 0x5f, 0xd0, 0x6f, 0xa5,
		0x51, 0x83, 0xbb, 0x34, 0x60, 0x12, 0x25, 0x5d, 0x65, 0x6e, 0xd1, 0x50, 0xd0, 0xe1, 0x0f, 0xad,
		0x45, 0xe3, 0x61, 0xb4, 0x67, 0x9c, 0xa3, 0x37, 0xe3, 0x09, 0x50, 0x1c, 0xa8, 0x62, 0x70, 0xb6,
		0xed, 0xef, 0xb1, 0xd7, 0xda, 0xf7, 0xb8, 0xdb, 0x8e, 0xb6, 0xef, 0x4f, 0x87, 0xbd, 0x19, 0x4c,
		0x97, 0xa4, 0x8e, 0x9a, 0x9d, 0x73, 0x5d, 0xc2, 0x2a, 0xf6, 0xec, 0x9e, 0xe9, 0x1d, 0x00, 0x52,
		0x02, 0x3e, 0x74, 0x80, 0x47, 0x35, 0xae, 0xca, 0x01, 0x9c, 0xb2, 0xbd, 0xd4, 0x10, 0xa0, 0x61,
		0x75, 0x49, 0xdf, 0x6e, 0x97, 0xc1, 0xce, 0x75, 0x4a, 0xe4, 0x96, 0x31, 0xf2, 0x95, 0x4c, 0xc4,
		0xec, 0x07, 0xb7, 0x8a, 0xe9, 0xc8, 0x6a, 0x70, 0xab, 0x18, 0x39, 0x5b, 0x81, 0x2a, 0xe5, 0x51,
		0x29, 0xe1, 0x51, 0x2e, 0xdd, 0x79, 0x78, 0x25, 0x3b, 0x7a, 0xbd, 0xf3, 0x57, 0x77, 0x45, 0x76,
		0xbf, 0xff, 0x62, 0xaa, 0xf3, 0xf8, 0x2e, 0x1d, 0xc5, 0xbf, 0xc7, 0x49, 0x66, 0x66, 0xf1, 0x2c,
		0x9e, 0xc7, 0x59, 0xfa, 0xf9, 0xa2, 0x38, 0xfd, 0x66, 0x7d, 0x9d, 0x47, 0xb1, 0xd7, 0xb1, 0xf1,
		0xb6, 0x7a, 0x3f, 0xe3, 0x55, 0xfe, 0xbe, 0xba, 0x09, 0x7d, 0xa5, 0xa5, 0x7b, 0x7a, 0xb5, 0xbe,
		0x4e, 0xe2, 0xcc, 0x9c, 0x47, 0xab, 0x8f, 0xe6, 0x2c, 0x4e, 0x6e, 0x0b, 0x7f, 0x9a, 0x68, 0x0a,
		0x1b, 0xb0, 0xd8, 0x24, 0xb2, 0x49, 0xfc, 0x86, 0x4d, 0x22, 0xb9, 0xda, 0x40, 0xa1, 0xca, 0x40,
		0xb1, 0xba, 0x40, 0x21, 0xb5, 0x8d, 0xa8, 0x26, 0x40, 0x55, 0x11, 0xc0, 0x4f, 0xaa, 0x71, 0x27,
		0xd4, 0x2a, 0xd9, 0x64, 0x44, 0x95, 0x00, 0xbc, 0x3a, 0xe0, 0x92, 0xd7, 0xfa, 0x51, 0xe4, 0x4a,
		0xd9, 0x1b, 0x7b, 0xc8, 0xde, 0xd8, 0x63, 0xcc, 0x97, 0x2e, 0xef, 0x3d, 0x47, 0xba, 0xbc, 0xaf,
		0xc4, 0xe8, 0xca, 0x9c, 0x44, 0xf3, 0x65, 0x9c, 0x4c, 0x93, 0x5b, 0x33, 0x4e, 0xa2, 0xeb, 0x59,
		0x3c, 0x21, 0xa4, 0x47, 0x9b, 0x50, 0xfa, 0x25, 0x49, 0x87, 0x9c, 0x24, 0xe5, 0x24, 0x69, 0x7f,
		0x05, 0xd2, 0xdb, 0xa9, 0xad, 0xf7, 0xf6, 0x7a, 0xb1, 0x98, 0xc5, 0x51, 0x2f, 0xb6, 0x57, 0x29,
		0x1d, 0xeb, 0xdc, 0x04, 0xcd, 0x22, 0x73, 0x9a, 0xfc, 0x1e, 0xa7, 0x19, 0x99, 0x9c, 0xbb, 0x08,
		0x4c, 0x4c, 0x26, 0x26, 0x13, 0x13, 0x40, 0xcc, 0x69, 0x92, 0xdd, 0x98, 0xb3, 0xc5, 0xed, 0x74,
		0x1c, 0xcd, 0x48, 0xbc, 0xdc, 0x03, 0x60, 0x5a, 0x32, 0x2d, 0x99, 0x96, 0x00, 0x5a, 0xce, 0x84,
		0x39, 0x5b, 0x2c, 0x96, 0x44, 0x5b, 0xb9, 0xfd, 0x35, 0x13, 0x92, 0x09, 0xc9, 0x84, 0xc4, 0x10,
		0x32, 0x4b, 0xa3, 0x64, 0xb5, 0x5c, 0xa4, 0x99, 0x52, 0x90, 0xd9, 0x08, 0xc4, 0x34, 0x65, 0x9a,
		0x32, 0x4d, 0x01, 0x34, 0x9d, 0x47, 0xd3, 0x24, 0x8b, 0x93, 0x28, 0x19, 0xc7, 0x4a, 0x2c, 0x6d,
		0xc2, 0x61, 0x92, 0x32, 0x49, 0x99, 0xa4, 0x00, 0x92, 0xae, 0xc6, 0x69, 0x34, 0xbf, 0x9e, 0xa9,
		0x31, 0xf4, 0x08, 0x84, 0xe9, 0xc9, 0xf4, 0x64, 0x7a, 0xaa, 0xd2, 0xf3, 0x63, 0x1c, 0x2f, 0xa3,
		0x59, 0x79, 0xd0, 0xdb, 0x93, 0x94, 0xdb, 0x9f, 0x32, 0x15, 0x99, 0x8a, 0x17, 0x4c, 0xc5, 0xde,
		0x35, 0x40, 0x84, 0xda, 0x1f, 0x62, 0xcd, 0x0f, 0xa1, 0xb2, 0x49, 0xa5, 0xc6, 0x47, 0xb5, 0xb6,
		0x07, 0x56, 0x67, 0xa2, 0x5e, 0x5f, 0x42, 0x99, 0xbe, 0xa0, 0x52, 0xbb, 0x03, 0xab, 0xd9, 0xb9,
		0xa4, 0x35, 0xd4, 0xd4, 0xa0, 0x76, 0x75, 0x46, 0x03, 0x36, 0x13, 0xe6, 0xb6, 0x44, 0x62, 0x95,
		0x45, 0xd9, 0x74, 0x95, 0x4d, 0xc7, 0xab, 0xfe, 0xe6, 0xec, 0x14, 0x10, 0x37, 0x4e, 0xb1, 0x71,
		0xd3, 0x6e, 0xdc, 0x7a, 0x37, 0x4e, 0x5d, 0xcf, 0x16, 0xe3, 0x8f, 0x66, 0x94, 0xa6, 0xd1, 0x67,
		0x7a, 0xb9, 0xf8, 0x2e, 0x08, 0xdf, 0xb2, 0xd5, 0x1b, 0x97, 0xeb, 0xc4, 0xb5, 0x99, 0x9a, 0x73,
		0xdd, 0xb2, 0x35, 0x5e, 0xac, 0x8b, 0xaf, 0x55, 0x9c, 0xc4, 0x54, 0xc2, 0xf0, 0x0c, 0x26, 0x9e,
		0xc1, 0xc4, 0x33, 0x98, 0x54, 0xc3, 0x36, 0x5c, 0x18, 0x07, 0x08, 0xeb, 0x40, 0x61, 0x9e, 0x7a,
		0xd8, 0x07, 0x0d, 0x03, 0xd1, 0x61, 0xa1, 0xb6, 0x10, 0x07, 0x1f, 0xf2, 0x80, 0xc4, 0x1a, 0x16,
		0x56, 0x6a, 0x0b, 0x33, 0x1f, 0xf2, 0x9e, 0xf0, 0xe0, 0xc8, 0xa3, 0x45, 0x9e, 0x44, 0x59, 0x04,
		0xb8, 0xfa, 0x33, 0x47, 0x61, 0x37, 0x85, 0xdd, 0x14, 0x76, 0x53, 0xb4, 0xb9, 0x29, 0x1f, 0xe2,
		0x3b, 0x13, 0x38, 0x2e, 0xf2, 0x22, 0x6e, 0x53, 0x79, 0x37, 0x34, 0xc3, 0xc8, 0xbc, 0x79, 0x69,
		0xfe, 0x78, 0xf5, 0x45, 0x7c, 0x7d, 0x3a, 0xda, 0xff, 0xe7, 0x67, 0x7f, 0x7a, 0xac, 0x37, 0x9e,
		0x80, 0xe6, 0xf4, 0xf2, 0x80, 0x5e, 0xd6, 0xba, 0xac, 0x75, 0xb5, 0x6a, 0xdd, 0x37, 0x59, 0x94,
		0xad, 0xcc, 0x22, 0x0f, 0xa3, 0x26, 0x4c, 0x95, 0xe2, 0x75, 0x14, 0x30, 0x5e, 0x25, 0xeb, 0xb9,
		0xba, 0x38, 0xbe, 0x5d, 0xbc, 0x29, 0xcd, 0x08, 0x64, 0x0a, 0xe8, 0xb0, 0x1c, 0x63, 0xbc, 0xb3,
		0x4a, 0x66, 0x1a, 0x65, 0x31, 0x62, 0x0c, 0xa8, 0x75, 0x0c, 0xad, 0x1c, 0xab, 0x6f, 0xc1, 0x1b,
		0x5e, 0x7c, 0x95, 0x8e, 0xcd, 0xeb, 0xdb, 0xa5, 0xb9, 0x8c, 0x20, 0x4f, 0x68, 0x78, 0xff, 0xeb,
		0x68, 0x35, 0x1d, 0x43, 0xc0, 0xc5, 0x31, 0xf8, 0x78, 0x31, 0x5f, 0x9a, 0xb7, 0x71, 0x12, 0xa7,
		0xa0, 0x67, 0xd8, 0x27, 0x9e, 0xb1, 0x4c, 0x17, 0xd9, 0x02, 0xf2, 0x04, 0xe7, 0xc4, 0x13, 0x70,
		0xeb, 0xe4, 0x1e, 0x3f, 0x21, 0x1a, 0x17, 0x7f, 0x52, 0xf3, 0xa4, 0xb6, 0x4f, 0xf0, 0x4e, 0x7c,
		0x03, 0xf8, 0x31, 0xfe, 0xf1, 0x63, 0x6e, 0x66, 0x8b, 0x4f, 0x10, 0xec, 0xe0, 0xc4, 0x27, 0xc0,
		0x1e, 0x10, 0x1e, 0x3f, 0x20, 0x9b, 0xce, 0xe3, 0x55, 0x16, 0xcd, 0x97, 0x88, 0x07, 0x88, 0x66,
		0x55, 0xe1, 0x39, 0x10, 0xf0, 0x06, 0x55, 0xf1, 0x8f, 0xc5, 0x0a, 0x01, 0xdd, 0xc0, 0x30, 0x20,
		0x81, 0x1b, 0xd8, 0x05, 0xa3, 0xae, 0xdb, 0xa4, 0x3e, 0x21, 0x7b, 0xd9, 0xc0, 0xa7, 0x62, 0x00,
		0xdd, 0x32, 0x8d, 0x21, 0xab, 0xe2, 0x9f, 0xc0, 0x9f, 0xac, 0xc6, 0x90, 0xf7, 0x6f, 0x20, 0xd3,
		0x7c, 0x39, 0x5b, 0x99, 0xf1, 0x1d, 0x04, 0x3e, 0x3c, 0xf1, 0xfa, 0x1b, 0xc3, 0xf5, 0xe4, 0x1e,
		0xb3, 0x96, 0x83, 0xb7, 0x8b, 0xd7, 0x0a, 0xc7, 0x5e, 0x7b, 0x50, 0x27, 0x55, 0xf6, 0xc8, 0xb0,
		0x00, 0xa9, 0xcb, 0x46, 0xbb, 0x3c, 0x32, 0x2c, 0x0b, 0x0e, 0x7d, 0x68, 0x0b, 0x46, 0x86, 0xe5,
		0xe9, 0x79, 0x48, 0xfd, 0x11, 0x8e, 0x1e, 0xfc, 0xc2, 0x1a, 0xa8, 0xe5, 0x0e, 0x64, 0xf0, 0x95,
		0xe2, 0x1b, 0x19, 0x96, 0xd0, 0xf3, 0x84, 0x52, 0xf9, 0x8d, 0x0c, 0xcb, 0x86, 0xe3, 0x57, 0x6b,
		0xe3, 0xc3, 0x91, 0xb7, 0xcb, 0x82, 0x7f, 0xeb, 0x5d, 0xc5, 0x31, 0x32, 0x42, 0x3d, 0xf8, 0x85,
		0x5e, 0x55, 0x3a, 0x1d, 0x93, 0xa1, 0x17, 0x56, 0x61, 0x64, 0xe0, 0x29, 0x55, 0xeb, 0xec, 0x91,
		0x81, 0x17, 0xf8, 0x4a, 0x12, 0xf1, 0x4c, 0xcd, 0x1d, 0x93, 0x91, 0x21, 0x86, 0x70, 0xe0, 0x22,
		0xaa, 0x83, 0x9c, 0xee, 0x9c, 0x8e, 0xba, 0x46, 0x86, 0xa5, 0x03, 0x3f, 0xdf, 0x43, 0xbc, 0xcd,
		0xd8, 0x3a, 0xb0, 0x23, 0xc3, 0xc2, 0x73, 0x67, 0x13, 0xea, 0xf6, 0xae, 0x85, 0xea, 0x08, 0xed,
		0xe5, 0xce, 0xa1, 0x78, 0xe4, 0x17, 0x5d, 0xe8, 0xad, 0x0e, 0xfa, 0xdb, 0x74, 0x95, 0xbd, 0xcc,
		0x32, 0x62, 0x89, 0xd0, 0xdf, 0xa7, 0xc9, 0xab, 0x59, 0x3c, 0x8f, 0x13, 0xea, 0xa1, 0xe9, 0xe0,
		0xef, 0xd1, 0xdd, 0x0e, 0x82, 0x15, 0x38, 0x8e, 0xe7, 0x3b, 0xce, 0xd0, 0xb7, 0xfd, 0x61, 0xe8,
		0xba, 0x96, 0x47, 0xf1, 0x93, 0x06, 0x3f, 0xa7, 0x93, 0x38, 0x8d, 0x27, 0xff, 0xf6, 0x79, 0x30,
		0x32, 0x92, 0xf5, 0x6c, 0xf6, 0x0d, 0x5d, 0x15, 0x72, 0xa2, 0x52, 0xf7, 0x05, 0xbd, 0x9c, 0xd1,
		0x40, 0x0e, 0x46, 0xfb, 0x9b, 0xa8, 0xff, 0xfc, 0xa6, 0x7e, 0xb9, 0xf7, 0xff, 0x96, 0xbf, 0xdc,
		0xcb, 0xe2, 0xdd, 0x74, 0x5d, 0x0b, 0xd2, 0xa3, 0x92, 0x77, 0xbc, 0x48, 0xb2, 0x8d, 0x3c, 0x12,
		0x6b, 0x47, 0x6b, 0x04, 0x1e, 0x30, 0xdc, 0x1b, 0x97, 0x0b, 0x47, 0x2f, 0xc5, 0x34, 0xa8, 0x0f,
		0x18, 0x2e, 0x0f, 0x1e, 0x8a, 0x4b, 0x6b, 0x88, 0x94, 0x30, 0x14, 0x8f, 0x1d, 0xd4, 0x8e, 0x1b,
		0x30, 0xc7, 0x0c, 0x03, 0x6b, 0xb8, 0x93, 0x7c, 0x2b, 0x56, 0x63, 0x35, 0x4d, 0x6e, 0x67, 0x2a,
		0xe7, 0x0b, 0x03, 0x6b, 0x68, 0x1d, 0x60, 0xfe, 0x1e, 0xa5, 0xd3, 0xe2, 0xc2, 0xc1, 0xf3, 0x9e,
		0x52, 0x29, 0x67, 0x4b, 0x1a, 0xd6, 0x25, 0x77, 0xa1, 0x15, 0x7c, 0xe8, 0xc6, 0x55, 0xc9, 0x31,
		0xad, 0xcb, 0x74, 0xd9, 0xb4, 0x58, 0xb1, 0xb8, 0xf4, 0xaa, 0x54, 0xdb, 0x20, 0xf6, 0x61, 0xb8,
		0x11, 0x82, 0xed, 0xd9, 0xb7, 0xd7, 0x08, 0xa1, 0xd2, 0x4f, 0x74, 0x24, 0x5f, 0x6a, 0x8e, 0xb8,
		0x02, 0xad, 0x94, 0xe9, 0x85, 0xa0, 0x99, 0x6e, 0xba, 0xa1, 0x68, 0x07, 0xa7, 0x1f, 0x9c, 0x86,
		0x67, 0xa0, 0xa3, 0x62, 0xa6, 0x83, 0x28, 0x5d, 0x54, 0x9a, 0xee, 0xc4, 0x6f, 0x6b, 0xc0, 0x01,
		0x0e, 0xa4, 0x7f, 0x49, 0x31, 0xb2, 0x83, 0x53, 0x17, 0x49, 0xe1, 0x73, 0x51, 0x19, 0x4d, 0x69,
		0x6d, 0xd4, 0xd6, 0x46, 0xf1, 0x33, 0x52, 0x5d, 0x3d, 0x2d, 0x6a, 0x20, 0x8e, 0x60, 0x55, 0x4b,
		0xdf, 0x8e, 0x64, 0x13, 0x57, 0x73, 0xa5, 0xde, 0x27, 0x55, 0x43, 0x61, 0xfa, 0xa5, 0xaa, 0xff,
		0x61, 0x58, 0x61, 0xa0, 0xfb, 0xa7, 0x6a, 0x50, 0x70, 0x1f, 0x55, 0x8d, 0xab, 0xab, 0x77, 0x67,
		0x2b, 0x43, 0xe8, 0x1e, 0x1e, 0x10, 0x4d, 0xf6, 0xb7, 0x0c, 0xd8, 0x67, 0x75, 0xb4, 0x65, 0xe8,
		0x7e, 0xab, 0xc7, 0xb0, 0x77, 0x4f, 0x2e, 0x03, 0xe5, 0xea, 0xbe, 0x4e, 0xbf, 0x14, 0x7c, 0x73,
		0xa5, 0x7e, 0xad, 0x23, 0xd5, 0xae, 0xd0, 0xb7, 0xc5, 0xee, 0x19, 0xbb, 0x67, 0xec, 0x9e, 0x5d,
		0x80, 0x7b, 0x06, 0xe9, 0x0b, 0x3b, 0xca, 0x8f, 0x20, 0x4a, 0x5e, 0x50, 0x7d, 0x62, 0x35, 0xa0,
		0xd6, 0x7e, 0xb1, 0x87, 0x6c, 0x15, 0x32, 0x84, 0x54, 0x21, 0xfa, 0xca, 0xd8, 0x2a, 0xb0, 0x55,
		0x60, 0xab, 0x70, 0x01, 0x56, 0x01, 0xd5, 0xb7, 0x76, 0x64, 0x18, 0x10, 0x15, 0x8b, 0x90, 0x3e,
		0xb6, 0xed, 0xe2, 0x21, 0xfb, 0xd9, 0x6a, 0x54, 0x7d, 0x7d, 0x6d, 0xf5, 0x23, 0x74, 0xf6, 0xb7,
		0x6d, 0x1f, 0xa2, 0xbb, 0xcf, 0x6d, 0xfb, 0x24, 0x8d, 0xfd, 0x6e, 0xdb, 0x87, 0xe8, 0xef, 0x7b,
		0xdb, 0x3e, 0x4b, 0x77, 0xff, 0xdb, 0xf6, 0x49, 0xba, 0xfb, 0xe0, 0xb6, 0x4f, 0xd2, 0xdd, 0x0f,
		0xb7, 0x7d, 0xd2, 0x59, 0xfa, 0xe2, 0xb6, 0x8f, 0xd3, 0xd7, 0x1f, 0xb7, 0x7d, 0x86, 0xe6, 0x3e,
		0xb9, 0xed, 0x83, 0x34, 0xf7, 0xcb, 0xd5, 0x0f, 0xd2, 0xd9, 0x37, 0xb7, 0x7d, 0x88, 0xb6, 0xfe,
		0xb9, 0xfa, 0x11, 0x5a, 0xfb, 0xe8, 0xea, 0xa7, 0x68, 0xec, 0xa7, 0xab, 0x9f, 0xa1, 0xad, 0xaf,
		0xae, 0x7e, 0x82, 0xe6, 0xfe, 0xba, 0xfa, 0x39, 0x9a, 0xfb, 0xec, 0xea, 0xe7, 0xe8, 0xed, 0xb7,
		0xab, 0x1f, 0xa3, 0xb3, 0xef, 0x0e, 0xe4, 0x47, 0xee, 0xb8, 0x44, 0xa8, 0x3e, 0xbc, 0x1a, 0x52,
		0x73, 0x3f, 0xde, 0x89, 0xe7, 0x20, 0xfb, 0xf2, 0x4e, 0x3c, 0x42, 0x4f, 0x7f, 0x9e, 0xec, 0x61,
		0xc8, 0x3e, 0x3d, 0xd9, 0x73, 0x80, 0xfd, 0x7a, 0xb2, 0xc7, 0x60, 0xfb, 0xf6, 0x64, 0x4f, 0x42,
		0xf6, 0xef, 0x9d, 0x78, 0x0e, 0xb0, 0x8f, 0xef, 0xc4, 0x13, 0xa0, 0xfd, 0x7c, 0x27, 0x9e, 0x01,
		0xef, 0xeb, 0x93, 0x3d, 0x07, 0xd7, 0xdf, 0x27, 0x7b, 0x0a, 0xae, 0xcf, 0xef, 0xc4, 0x53, 0xb0,
		0xfd, 0x7e, 0x27, 0x1e, 0x02, 0xec, 0xfb, 0x3b, 0xf1, 0x04, 0x5c, 0xff, 0xdf, 0x89, 0x07, 0xe0,
		0xfa, 0x00, 0x4f, 0x3c, 0x00, 0xde, 0x0f, 0x78, 0xf2, 0x39, 0xa0, 0xbe, 0xc0, 0x13, 0xf8, 0xe8,
		0xfe, 0xc0, 0x13, 0x8f, 0x41, 0xf6, 0x09, 0x4a, 0x1e, 0x01, 0xe8, 0x17, 0xc4, 0xe4, 0xda, 0x8c,
		0x7b, 0x9c, 0xe4, 0x79, 0xde, 0x6a, 0x3e, 0xa5, 0xfe, 0xc2, 0x1a, 0x45, 0xb9, 0xcf, 0x70, 0x8b,
		0xa4, 0xa1, 0xdf, 0xb0, 0x06, 0x57, 0xea, 0x3b, 0x54, 0x5d, 0x69, 0xc5, 0x3e, 0xc4, 0x2d, 0x6d,
		0xce, 0xd2, 0x8f, 0xb8, 0xd7, 0x57, 0xf0, 0x42, 0xbd, 0x28, 0xda, 0xd0, 0xdf, 0xa5, 0xb8, 0x91,
		0x9b, 0xa2, 0x4f, 0x91, 0xdc, 0xb2, 0x48, 0x67, 0x21, 0x65, 0x46, 0xe3, 0xc7, 0x18, 0x50, 0xb1,
		0x9e, 0x83, 0xf0, 0x84, 0x46, 0xae, 0x54, 0xe7, 0x4a, 0xf5, 0xc3, 0x0c, 0x05, 0xcf, 0xc5, 0x3d,
		0x0d, 0xf4, 0x38, 0xe6, 0xe2, 0xf2, 0xec, 0x85, 0xb3, 0xfa, 0x40, 0x8f, 0x73, 0xf6, 0x82, 0x4a,
		0x0f, 0xe5, 0x99, 0xfd, 0x9a, 0x4b, 0x98, 0xbf, 0x50, 0xc6, 0x6d, 0xd3, 0x09, 0xbd, 0x69, 0xb5,
		0x46, 0xe0, 0x7e, 0xd5, 0x73, 0xbb, 0x23, 0xdc, 0xaf, 0x0a, 0x53, 0x6e, 0xe4, 0x7e, 0xd5, 0x9b,
		0x38, 0xca, 0xd6, 0x69, 0x4c, 0xa1, 0xd0, 0x91, 0x78, 0xed, 0x60, 0x71, 0x0c, 0xc0, 0x31, 0x00,
		0xc7, 0x00, 0xda, 0x62, 0x00, 0xbe, 0xc2, 0xeb, 0xc0, 0xbb, 0xe5, 0x2b, 0xbc, 0xf8, 0x0a, 0xaf,
		0x47, 0xb9, 0x27, 0x0f, 0xeb, 0x0a, 0x2f, 0xa2, 0x62, 0x8c, 0xef, 0xb2, 0x34, 0x32, 0xd7, 0xc9,
		0x2a, 0xdb, 0x8c, 0xdf, 0x51, 0x50, 0x91, 0x9f, 0x3e, 0xc4, 0xc9, 0x25, 0x28, 0xa5, 0x4a, 0x55,
		0x3f, 0x7f, 0xfe, 0x62, 0x3a, 0x29, 0xe6, 0x0b, 0x19, 0xff, 0x6a, 0x7c, 0x57, 0x45, 0x1b, 0xe5,
		0xc0, 0xa1, 0x8d, 0xc3, 0xf4, 0xdd, 0x85, 0x17, 0xcf, 0x17, 0x4b, 0xfa, 0x90, 0x4a, 0xe7, 0x3b,
		0xad, 0xf9, 0x45, 0xe8, 0xcb, 0x1f, 0xe2, 0xd5, 0x38, 0x9d, 0x2e, 0x95, 0x4f, 0x62, 0x4e, 0x8b,
		0xde, 0xfb, 0x6a, 0x19, 0xde, 0xbc, 0x7d, 0xf9, 0xf6, 0xcd, 0xfb, 0xd7, 0x3f, 0xbc, 0x7f, 0xfb,
		0x7f, 0x7e, 0x79, 0xf5, 0xfe, 0xc7, 0x57, 0x2f, 0xdf, 0xfe, 0xe7, 0xaf, 0xaf, 0xbe, 0x43, 0xed,
		0x2b, 0x58, 0xfc, 0x0e, 0x45, 0x70, 0xb2, 0xb3, 0x4e, 0xc0, 0x63, 0x5f, 0x5d, 0xd2, 0xd8, 0x2c,
		0x91, 0x6d, 0x5b, 0xf1, 0x8d, 0x1f, 0x36, 0x5f, 0xf2, 0x05, 0x66, 0x88, 0xf0, 0x98, 0xc3, 0x62,
		0x0e, 0x8b, 0x39, 0x2c, 0xe6, 0xb0, 0x98, 0xc3, 0x62, 0x0e, 0x8b, 0x39, 0x2c, 0xe6, 0xb0, 0x98,
		0xc3, 0xe2, 0x13, 0x21, 0xda, 0x22, 0xfb, 0x10, 0xa7, 0x1c, 0x14, 0x9f, 0x31, 0x28, 0xde, 0xac,
		0xf8, 0xb7, 0x1d, 0x12, 0xff, 0xfc, 0xf6, 0xdf, 0x5f, 0xfd, 0xca, 0x01, 0xf1, 0xfd, 0x07, 0xc4,
		0x9b, 0x8d, 0xe0, 0x70, 0xf8, 0x82, 0xc3, 0x61, 0x13, 0x73, 0xa5, 0x77, 0x05, 0xc4, 0x81, 0x31,
		0x07, 0xc6, 0x1c, 0x18, 0x6b, 0x0b, 0x8c, 0xdf, 0xd0, 0x8a, 0x9c, 0x9a, 0xb8, 0xf6, 0x98, 0x2f,
		0xf4, 0xae, 0xdc, 0xa1, 0x75, 0xf2, 0x31, 0x59, 0x7c, 0x4a, 0xc0, 0x77, 0x7a, 0x57, 0xe8, 0xf3,
		0x69, 0x02, 0xbe, 0x02, 0xb8, 0x42, 0x5e, 0x2d, 0xa3, 0x34, 0x06, 0x5f, 0xd3, 0x5b, 0x61, 0x27,
		0x8b, 0x49, 0x0c, 0xbe, 0xa3, 0x77, 0xcf, 0xfb, 0x04, 0xdf, 0xd1, 0x7b, 0x70, 0xdc, 0x03, 0xbe,
		0xa7, 0xb7, 0xde, 0xca, 0xe8, 0xee, 0x91, 0x5d, 0x40, 0x7b, 0xb8, 0x6e, 0xc8, 0x8b, 0x04, 0x77,
		0x57, 0x0d, 0x79, 0x83, 0xe5, 0x2e, 0xb1, 0x90, 0xd7, 0x07, 0xee, 0x89, 0x3e, 0xf2, 0x3a, 0xd2,
		0x7d, 0xc1, 0x47, 0xde, 0x8a, 0xb9, 0xaf, 0x09, 0x46, 0x86, 0x80, 0x23, 0x57, 0xba, 0x71, 0x64,
		0x0c, 0x1f, 0xfb, 0x65, 0x8a, 0x14, 0xc7, 0xb8, 0xae, 0xe9, 0xfe, 0x10, 0x25, 0x93, 0x19, 0xc2,
		0x43, 0x3e, 0x44, 0x64, 0x57, 0x99, 0x5d, 0x65, 0x76, 0x95, 0xb5, 0xb9, 0xca, 0x75, 0xd7, 0x83,
		0x59, 0xf4, 0x50, 0x3c, 0x96, 0x16, 0xab, 0x77, 0x91, 0xf9, 0xc7, 0x4b, 0xf3, 0x7f, 0x86, 0x66,
		0xf8, 0x7c, 0xf4, 0xfe, 0x85, 0x79, 0xf5, 0xe7, 0x01, 0x27, 0xc1, 0x69, 0xff, 0x3b, 0x53, 0x12,
		0x7c, 0x3e, 0x4d, 0x38, 0x05, 0xae, 0x23, 0xe9, 0x28, 0x5b, 0xef, 0x6f, 0x3b, 0x01, 0xfe, 0xf7,
		0xd7, 0x3f, 0x71, 0xfa, 0xfb, 0xfe, 0xd3, 0xdf, 0xc5, 0x36, 0x70, 0xf2, 0xfb, 0x62, 0x7d, 0xfc,
		0x3c, 0x1c, 0x84, 0xf4, 0x4b, 0x55, 0x40, 0xec, 0xd1, 0xb3, 0x47, 0xcf, 0x1e, 0xbd, 0x36, 0x8f,
		0xfe, 0x27, 0x25, 0x9a, 0x19, 0x17, 0x38, 0x2d, 0xa1, 0xf6, 0xe5, 0xdf, 0x5f, 0xfd, 0xe9, 0xb7,
		0xdf, 0x26, 0x7f, 0x7e, 0xf1, 0xec, 0x8b, 0xf5, 0xbd, 0xf8, 0x7a, 0xfc, 0x1f, 0x9e, 0xb1, 0x97,
		0x7f, 0xd9, 0x5e, 0x7e, 0x6e, 0x02, 0xd8, 0xcd, 0x3f, 0xa3, 0x9b, 0x5f, 0x2e, 0xf8, 0xb7, 0xed,
		0xe7, 0xff, 0xf4, 0xf3, 0x0f, 0xdc, 0xf8, 0x71, 0x01, 0x8e, 0x7e, 0xb9, 0x0f, 0xec, 0xe9, 0x5f,
		0xac, 0xa7, 0xbf, 0x4e, 0xd6, 0xab, 0x18, 0xe0, 0xe8, 0x6f, 0x70, 0xd8, 0xcf, 0x67, 0x3f, 0x9f,
		0xfd, 0x7c, 0x6d, 0x7e, 0x3e, 0x77, 0x7f, 0xec, 0xbe, 0x08, 0x77, 0x7f, 0x70, 0xf7, 0xc7, 0x63,
		0xdd, 0x13, 0xee, 0xfe, 0x78, 0xc4, 0x21, 0xf1, 0xa6, 0xc0, 0x84, 0xa3, 0xe2, 0x33, 0x46, 0xc5,
		0xf5, 0x9a, 0x7f, 0xdb, 0x81, 0xf1, 0x7f, 0xfe, 0xf4, 0x1f, 0x3f, 0xfd, 0xfc, 0xff, 0xf3, 0x21,
		0xd8, 0x05, 0xc4, 0xc6, 0xf5, 0x56, 0x70, 0x78, 0x7c, 0x9e, 0xf0, 0x98, 0x67, 0xaf, 0xbe, 0x58,
		0xd1, 0xab, 0xe4, 0x35, 0x8f, 0x5d, 0x2d, 0xea, 0xf7, 0x5f, 0x4f, 0x2e, 0x67, 0xe2, 0x2a, 0xa9,
		0xfb, 0xe7, 0x60, 0xe6, 0x2a, 0xa1, 0xf1, 0x87, 0x98, 0x0b, 0xe1, 0xa9, 0xab, 0x3a, 0x72, 0x1c,
		0x3c, 0x75, 0x95, 0x9c, 0xbb, 0x38, 0x68, 0xcc, 0x29, 0x7c, 0xb0, 0xdf, 0xa3, 0x19, 0x45, 0x1a,
		0xe8, 0x39, 0x0b, 0xc5, 0x5c, 0x85, 0xda, 0x15, 0x2d, 0xea, 0xa9, 0x3a, 0x50, 0x4e, 0x02, 0x1e,
		0xf7, 0xe2, 0xe2, 0xdd, 0xaf, 0x6a, 0x77, 0xd7, 0xe0, 0x96, 0x18, 0x95, 0x6b, 0xb8, 0xe4, 0xb5,
		0x3e, 0x93, 0x9f, 0x75, 0xa5, 0xcb, 0x84, 0x3f, 0x01, 0x4a, 0x14, 0xd5, 0x5f, 0x3b, 0x8f, 0x9f,
		0x36, 0xe8, 0xe5, 0xad, 0x68, 0x74, 0xcb, 0xba, 0x99, 0xa3, 0xf6, 0x9d, 0xe9, 0xb0, 0x2b, 0x83,
		0x59, 0xb4, 0xca, 0x8a, 0x35, 0x88, 0xcd, 0x2c, 0x8d, 0x92, 0xd5, 0x34, 0xdf, 0x9c, 0xe2, 0xca,
		0xb5, 0xce, 0x3b, 0x54, 0x1b, 0x1d, 0x09, 0x56, 0x47, 0xf9, 0xe8, 0xe7, 0x86, 0xf5, 0x76, 0xbf,
		0x28, 0x6e, 0x17, 0xda, 0xdd, 0xa2, 0xba, 0x59, 0xca, 0xee, 0x95, 0xb2, 0x5b, 0xa5, 0xc1, 0x9d,
		0xc2, 0x6a, 0x97, 0xde, 0x6e, 0xd3, 0xde, 0x11, 0x4f, 0xaf, 0xbb, 0xba, 0x2b, 0x49, 0xed, 0x51,
		0xb8, 0x45, 0x74, 0x8b, 0x68, 0xb7, 0xb2, 0xd0, 0xbd, 0x78, 0x45, 0xf7, 0x07, 0x66, 0x8a, 0xd5,
		0x4d, 0xf0, 0x57, 0xda, 0x75, 0x34, 0xea, 0x4b, 0x87, 0xbb, 0xd1, 0xef, 0x92, 0x56, 0x53, 0x93,
		0x83, 0x71, 0x75, 0x4e, 0x63, 0x37, 0x4d, 0x4a, 0x83, 0x4f, 0x31, 0x6e, 0xdb, 0xdf, 0xb2, 0x31,
		0x63, 0x63, 0x76, 0xc1, 0xc6, 0xec, 0xf5, 0x7c, 0xe3, 0x84, 0xc5, 0xc9, 0x7a, 0x4e, 0xb0, 0x69,
		0x7d, 0x26, 0x71, 0xd0, 0x26, 0x6f, 0xa8, 0x4d, 0xda, 0x28, 0x27, 0x6b, 0x4c, 0xab, 0xaf, 0x4c,
		0x16, 0x99, 0x99, 0xc6, 0xd1, 0x84, 0x74, 0xab, 0x95, 0xb5, 0x07, 0x15, 0x4d, 0xe6, 0xd3, 0xc4,
		0x9c, 0xd0, 0x46, 0x74, 0x0c, 0xac, 0xfd, 0xf7, 0x8a, 0x93, 0x89, 0xb9, 0xfa, 0xb0, 0xce, 0xc8,
		0x70, 0xfb, 0xef, 0x76, 0x1d, 0xdf, 0x4e, 0x13, 0x33, 0x4e, 0xd3, 0x45, 0x6a, 0x4e, 0xa6, 0xab,
		0xe2, 0xec, 0x96, 0x82, 0x2a, 0x8e, 0x5e, 0x52, 0x1d, 0xd3, 0x6e, 0x78, 0xd3, 0xfc, 0xb3, 0xcd,
		0xdb, 0x34, 0x1a, 0xc7, 0x37, 0x6b, 0x52, 0x02, 0xca, 0x72, 0xf6, 0x50, 0xd3, 0x78, 0x15, 0x67,
		0x24, 0x1c, 0x77, 0x0f, 0x27, 0xe7, 0x74, 0x11, 0x81, 0xd2, 0xd2, 0x62, 0x96, 0x77, 0x24, 0x7c,
		0xaa, 0x88, 0xfe, 0x1e, 0x22, 0x7d, 0x46, 0xcc, 0xc0, 0x0a, 0xf6, 0x90, 0xf2, 0x70, 0x8c, 0x02,
		0xb3, 0x2f, 0x21, 0x54, 0xf1, 0xdd, 0x97, 0x89, 0xf5, 0x92, 0x82, 0xb1, 0x2f, 0x01, 0x2a, 0x64,
		0xda, 0x97, 0x81, 0x38, 0x55, 0x92, 0x77, 0xef, 0x68, 0x81, 0xcc, 0xe9, 0x7c, 0x1e, 0x4f, 0xa6,
		0xdd, 0x9d, 0x83, 0x3d, 0x3c, 0x5f, 0x82, 0x57, 0xea, 0x24, 0x0a, 0x6a, 0x70, 0x8c, 0xaa, 0x42,
		0xc7, 0xb0, 0x81, 0xe3, 0xf5, 0x8e, 0xe8, 0xcd, 0x86, 0x93, 0x67, 0xd1, 0x34, 0x6a, 0x76, 0xd2,
		0x24, 0x17, 0xb9, 0x76, 0x1b, 0x19, 0x96, 0xad, 0x8e, 0xb9, 0xaf, 0x87, 0x47, 0x86, 0x05, 0x78,
		0xcf, 0x7a, 0x87, 0x46, 0x46, 0xa8, 0x82, 0xb6, 0xc1, 0x10, 0xaa, 0x18, 0xbb, 0x6b, 0x16, 0x28,
		0x83, 0x6d, 0x59, 0x47, 0x1a, 0xfb, 0xd3, 0xc2, 0x39, 0xda, 0xe1, 0x87, 0xc4, 0xb4, 0x8e, 0x0c,
		0x4b, 0xa8, 0x22, 0xee, 0x6c, 0xa8, 0x35, 0x54, 0x02, 0x4b, 0x77, 0x5f, 0xcc, 0x55, 0x81, 0x2a,
		0x0c, 0x0d, 0xad, 0x8b, 0xed, 0xb4, 0x25, 0x1d, 0x19, 0x96, 0xa7, 0x8a, 0x57, 0xba, 0x85, 0xb4,
		0x8b, 0x69, 0x1b, 0x1d, 0x86, 0x91, 0x61, 0x29, 0xad, 0x54, 0xe9, 0xc4, 0xd0, 0x86, 0xdd, 0x35,
		0x18, 0x42, 0xd2, 0x84, 0xa7, 0x63, 0x57, 0x63, 0x64, 0x58, 0x4a, 0x92, 0xbe, 0x5e, 0x0e, 0x46,
		0x86, 0xfd, 0x20, 0x0e, 0x20, 0x5e, 0xdd, 0x15, 0x59, 0x94, 0xee, 0x29, 0x38, 0x7a, 0x5c, 0x7b,
		0x97, 0x8e, 0xe2, 0xdf, 0xe3, 0x24, 0x33, 0xb3, 0xe2, 0xee, 0xdd, 0x2c, 0xfd, 0x7c, 0xaf, 0x31,
		0xee, 0x9b, 0xf5, 0xf5, 0x6a, 0x9c, 0x4e, 0xaf, 0x63, 0xe3, 0x6d, 0xf5, 0x3e, 0xc6, 0xab, 0xfc,
		0xfd, 0xd0, 0x01, 0xee, 0x15, 0x2a, 0x55, 0xf3, 0xb1, 0x5f, 0x35, 0xc8, 0x6e, 0xa6, 0xe6, 0x63,
		0x9f, 0x22, 0x10, 0x4e, 0xd4, 0x70, 0xa2, 0xe6, 0xbe, 0x12, 0x35, 0x51, 0x96, 0xa5, 0x66, 0x2e,
		0xb0, 0x8f, 0x39, 0x4f, 0x53, 0x7f, 0x64, 0x59, 0x90, 0x12, 0xad, 0xb3, 0x85, 0x4a, 0xae, 0xe6,
		0x00, 0xee, 0x66, 0x91, 0x0b, 0xf6, 0x05, 0x47, 0x20, 0x4d, 0x9f, 0x4f, 0xf6, 0x49, 0x1a, 0x3f,
		0x7e, 0x64, 0x58, 0xf7, 0x6b, 0x7d, 0x31, 0x2a, 0x7f, 0xb1, 0x58, 0x5e, 0x47, 0xe3, 0x8f, 0xe6,
		0xb8, 0x50, 0xb0, 0xeb, 0xb4, 0x5f, 0xa1, 0xc0, 0x56, 0xff, 0x37, 0xe3, 0xb0, 0x31, 0x60, 0x63,
		0x70, 0xd9, 0xc6, 0x20, 0x7f, 0xf9, 0x5a, 0x78, 0x1f, 0x75, 0xf2, 0x3e, 0x59, 0xd4, 0x1f, 0x4a,
		0xb7, 0x04, 0x49, 0x16, 0xa7, 0x49, 0x34, 0x53, 0x42, 0x2a, 0x72, 0x9d, 0xf1, 0x1d, 0x00, 0xc9,
		0xae, 0x0f, 0x09, 0x6b, 0x94, 0x4b, 0xb5, 0x49, 0xc7, 0xdf, 0x4b, 0xcc, 0xec, 0x24, 0xc7, 0x38,
		0x94, 0x9c, 0xd5, 0xfe, 0xaa, 0x91, 0x06, 0x22, 0xef, 0x49, 0x54, 0xdf, 0x11, 0xc2, 0x97, 0x69,
		0x0e, 0xe7, 0xd1, 0xd8, 0x8c, 0x26, 0x93, 0x34, 0x5e, 0xad, 0xfa, 0xdb, 0xc0, 0xdd, 0x1f, 0xf7,
		0x33, 0x7c, 0x16, 0x1b, 0x3e, 0x36, 0x7c, 0xfd, 0x0d, 0xdf, 0x0f, 0xd3, 0xb4, 0xdf, 0xd6, 0xf6,
		0x15, 0xed, 0x23, 0x99, 0xe8, 0x27, 0xde, 0x44, 0xff, 0x8e, 0x2c, 0xee, 0x2a, 0x62, 0xaf, 0x4b,
		0xfc, 0x55, 0x69, 0x00, 0xa3, 0x03, 0x8c, 0x16, 0x1a, 0xe9, 0xd1, 0xdf, 0x38, 0x18, 0xf7, 0xd2,
		0xe9, 0xd1, 0x5f, 0xd3, 0x37, 0x6a, 0x7d, 0x4a, 0xee, 0x5e, 0x75, 0xf2, 0xdc, 0xe0, 0xdd, 0xd0,
		0x0c, 0x23, 0xf3, 0xe6, 0xa5, 0xf9, 0xe3, 0xd5, 0x17, 0xf1, 0xf5, 0xe9, 0x68, 0xff, 0x9f, 0x9f,
		0x7d, 0x71, 0xbf, 0x0e, 0x74, 0x17, 0xc2, 0xf7, 0xdc, 0xaf, 0xde, 0xf9, 0x63, 0x5a, 0x1e, 0x59,
		0x4b, 0x3e, 0x59, 0x2f, 0xeb, 0x00, 0xf9, 0x65, 0x1a, 0xe5, 0xae, 0xbe, 0xe9, 0x5e, 0x06, 0x1a,
		0xfd, 0x61, 0xfd, 0x0b, 0x7f, 0x8f, 0xc6, 0x2f, 0x37, 0x4f, 0x3f, 0xab, 0x6b, 0x7c, 0x67, 0x5e,
		0x47, 0xc9, 0xe4, 0xd3, 0x74, 0x52, 0xac, 0x62, 0x6f, 0xe7, 0x78, 0xf7, 0xe7, 0x9c, 0x17, 0x62,
		0xf7, 0xf8, 0x82, 0xf3, 0x42, 0xbd, 0xa7, 0x4f, 0x11, 0x3a, 0x37, 0xb9, 0x35, 0xa1, 0xa7, 0xef,
		0xf5, 0x60, 0x5b, 0x13, 0x54, 0x3b, 0x2e, 0xb9, 0x21, 0x41, 0x9f, 0x21, 0xf3, 0x1c, 0xf3, 0x7a,
		0x9a, 0x29, 0x9a, 0xb3, 0x0d, 0x08, 0x1b, 0x35, 0x36, 0x6a, 0x17, 0x6e, 0xd4, 0xb8, 0xdf, 0x8e,
		0x8d, 0x1a, 0xf7, 0xdb, 0x3d, 0x6e, 0xf3, 0x16, 0x4f, 0xa6, 0x11, 0xb1, 0x8a, 0x6b, 0xe7, 0xb7,
		0x6c, 0xcc, 0xd8, 0x98, 0x5d, 0xb0, 0x31, 0xab, 0xca, 0xb8, 0x0a, 0x89, 0x7d, 0xf4, 0x75, 0x5c,
		0x25, 0x2f, 0xa9, 0x57, 0x2b, 0xef, 0x17, 0x71, 0x95, 0x58, 0x2a, 0x1d, 0x4f, 0x0d, 0xaf, 0x66,
		0x0d, 0xaf, 0xa3, 0x55, 0x6c, 0xde, 0x2c, 0x69, 0x80, 0x8d, 0x88, 0xc3, 0x12, 0x73, 0xf2, 0x69,
		0x32, 0x37, 0x2d, 0xd7, 0x09, 0x4c, 0xd7, 0xa2, 0xa1, 0x5b, 0x1d, 0xd0, 0x7d, 0xd3, 0x17, 0x34,
		0x74, 0xd1, 0x01, 0xdd, 0x33, 0x43, 0x22, 0xba, 0xdd, 0x09, 0xdd, 0x22, 0xa2, 0x3b, 0x1d, 0xd0,
		0x5d, 0xd3, 0x26, 0xa2, 0xbb, 0x1d, 0xd0, 0x1d, 0xd3, 0xb5, 0x69, 0xe8, 0x5e, 0x07, 0x74, 0xdb,
		0xf4, 0x89, 0xe8, 0x7e, 0x07, 0x74, 0x61, 0x86, 0x0e, 0x0d, 0x3d, 0xe8, 0x84, 0x6e, 0x11, 0xd1,
		0xc3, 0x0e, 0xe8, 0x96, 0x69, 0xbb, 0x4a, 0x0d, 0xb2, 0x0d, 0xe4, 0xbf, 0xa6, 0x01, 0x76, 0x21,
		0xff, 0xd0, 0x74, 0x3d, 0x1a, 0x7a, 0x07, 0xf2, 0xdb, 0xa1, 0xe9, 0xfb, 0x34, 0xf4, 0x0e, 0xe4,
		0xb7, 0x03, 0x33, 0x0c, 0x68, 0xe8, 0x76, 0x27, 0x74, 0x2b, 0xa4, 0xa1, 0x77, 0x20, 0xbf, 0xed,
		0x9b, 0xce, 0x90, 0x86, 0xde, 0x81, 0xfc, 0xb6, 0x67, 0x7a, 0x34, 0x95, 0x6e, 0x75, 0x20, 0xbf,
		0xed, 0x9a, 0x01, 0x4d, 0x71, 0x59, 0x7e, 0x27, 0xf4, 0x21, 0x8d, 0x9e, 0x56, 0x07, 0xf2, 0xdb,
		0x8e, 0x29, 0x88, 0xf4, 0xec, 0x40, 0x7e, 0xdb, 0x36, 0x1d, 0x5f, 0xa9, 0x8f, 0xbd, 0x81, 0xfc,
		0xb4, 0x36, 0x6c, 0xd1, 0x81, 0xfc, 0xb6, 0x30, 0x3d, 0x1a, 0x81, 0x44, 0x17, 0xf2, 0x5b, 0x66,
		0x48, 0x13, 0x71, 0x21, 0x3a, 0xa1, 0x13, 0x6d, 0xb3, 0xe8, 0x42, 0xfe, 0xa1, 0x69, 0xd3, 0xec,
		0x9b, 0x68, 0x25, 0x7f, 0xb6, 0x4e, 0xe8, 0xe3, 0x0e, 0x1a, 0xc9, 0x7f, 0xbb, 0xfb, 0xea, 0x9e,
		0x65, 0x3a, 0xc4, 0x85, 0xf1, 0xda, 0xc1, 0x87, 0x54, 0xc5, 0x22, 0xfc, 0x56, 0x70, 0x37, 0x34,
		0x7d, 0x9a, 0xc6, 0x15, 0x41, 0x3b, 0x38, 0xd9, 0x58, 0x88, 0xb0, 0x0b, 0xb8, 0xe5, 0x2b, 0xcd,
		0x9a, 0x68, 0xe2, 0xfd, 0x87, 0x09, 0x0d, 0x72, 0xd8, 0xfe, 0xbe, 0xbe, 0x69, 0xd3, 0xac, 0xbe,
		0x6d, 0xb5, 0x83, 0x7b, 0xa6, 0x4b, 0x53, 0xb1, 0xb6, 0x68, 0x07, 0x77, 0x4d, 0x9f, 0x08, 0x6e,
		0xb7, 0x83, 0x3b, 0x54, 0xbf, 0xd3, 0x76, 0xba, 0x80, 0x5b, 0x34, 0x95, 0x62, 0xb7, 0x93, 0xde,
		0xb5, 0xa9, 0xfa, 0xca, 0x6e, 0x27, 0xbd, 0x2b, 0x4c, 0x97, 0xa6, 0x51, 0xec, 0x0e, 0xa4, 0xb7,
		0xa8, 0xf1, 0xa1, 0xdd, 0x81, 0xf4, 0x43, 0x6a, 0x78, 0x68, 0x87, 0x5d, 0xc0, 0x89, 0x16, 0xc8,
		0x91, 0x90, 0xfe, 0x86, 0x46, 0x7a, 0xa7, 0x9d, 0xf4, 0x4e, 0x48, 0x8d, 0x37, 0x9d, 0x76, 0xd2,
		0xd3, 0x93, 0x08, 0x4e, 0x3b, 0xe9, 0xe9, 0x39, 0x04, 0xa7, 0x9d, 0xf4, 0xf4, 0x14, 0x82, 0xe3,
		0x74, 0x01, 0xa7, 0xca, 0x48, 0x3b, 0xe9, 0xe9, 0x09, 0x04, 0xa7, 0x9d, 0xf4, 0xf4, 0xfc, 0x81,
		0xd3, 0x4e, 0x7a, 0x7a, 0xfa, 0xc0, 0x69, 0x27, 0x3d, 0x3d, 0x7b, 0xe0, 0x84, 0x5d, 0xc0, 0x89,
		0xc9, 0x83, 0xe6, 0xb0, 0xad, 0xc0, 0xce, 0x88, 0x88, 0x1d, 0x38, 0x4f, 0xce, 0x46, 0xb8, 0x1d,
		0x38, 0x4f, 0xce, 0x1d, 0xb8, 0xed, 0x9c, 0xa7, 0xa7, 0x0e, 0xdc, 0x76, 0xce, 0xd3, 0x33, 0x07,
		0xae, 0xd3, 0x05, 0x9c, 0x98, 0x38, 0x70, 0xdb, 0x39, 0x4f, 0xcf, 0x1b, 0xb8, 0xed, 0x9c, 0xa7,
		0xa7, 0x0d, 0xdc, 0x76, 0xce, 0xd3, 0xb3, 0x06, 0x6e, 0xd0, 0x05, 0x9c, 0x98, 0x34, 0x70, 0xdb,
		0x39, 0x4f, 0xcf, 0x19, 0x78, 0x12, 0xce, 0xdf, 0xd1, 0x10, 0xdb, 0x39, 0x4f, 0x4f, 0x42, 0x78,
		0xed, 0x9c, 0xa7, 0xa7, 0x0c, 0xbc, 0x0e, 0x9c, 0x27, 0x67, 0x0c, 0x3c, 0xbb, 0x0b, 0x38, 0xd1,
		0x14, 0x7b, 0x1d, 0x38, 0x4f, 0xce, 0x17, 0x78, 0x6d, 0x9c, 0x57, 0x49, 0x17, 0x78, 0x0d, 0x02,
		0xe8, 0xa0, 0xd2, 0x05, 0x9e, 0xdf, 0x0e, 0x4e, 0x4e, 0x17, 0x78, 0x41, 0x2b, 0x38, 0x3d, 0x5d,
		0xe0, 0x85, 0xed, 0xe0, 0x64, 0x0b, 0xe1, 0xcb, 0x38, 0x4f, 0x0c, 0xe9, 0xfd, 0x61, 0x97, 0x17,
		0x26, 0xa6, 0x20, 0x7c, 0xab, 0x1d, 0x9c, 0x9c, 0x2f, 0xf0, 0x45, 0x3b, 0x38, 0x39, 0x5f, 0xe0,
		0xdb, 0xed, 0xe0, 0xe4, 0x7c, 0x81, 0xef, 0xb4, 0x83, 0x93, 0xf3, 0x05, 0xbe, 0xdb, 0x05, 0x9c,
		0x98, 0x2f, 0xf0, 0xdb, 0x59, 0x4f, 0xcf, 0x17, 0xf8, 0xed, 0xac, 0xa7, 0xe7, 0x0b, 0xfc, 0x0e,
		0xac, 0x27, 0xe7, 0x0b, 0xfc, 0x0e, 0xac, 0x27, 0xe7, 0x0b, 0x02, 0x19, 0xeb, 0x89, 0x31, 0x7d,
		0x30, 0xec, 0xf2, 0xc2, 0x44, 0xa3, 0x16, 0xb4, 0xb3, 0x9e, 0x9e, 0x30, 0x08, 0xda, 0x59, 0x4f,
		0x4f, 0x18, 0x04, 0xed, 0xac, 0xa7, 0x27, 0x0c, 0x82, 0x76, 0xd6, 0xd3, 0x13, 0x06, 0x81, 0xdb,
		0x05, 0x9c, 0xba, 0xa1, 0xed, 0xac, 0xa7, 0x27, 0x0c, 0x82, 0x76, 0xd6, 0xd3, 0x13, 0x06, 0x41,
		0x3b, 0xeb, 0xe9, 0x09, 0x83, 0xa0, 0x9d, 0xf5, 0xf4, 0x84, 0x41, 0x78, 0x9a, 0xf5, 0x37, 0x34,
		0xff, 0x3e, 0x1c, 0x76, 0x79, 0x5d, 0x62, 0x0a, 0x22, 0xec, 0xc0, 0x79, 0x72, 0xc2, 0x20, 0xec,
		0xc0, 0x79, 0x72, 0xc2, 0x20, 0x6c, 0xe7, 0x3c, 0x3d, 0x61, 0x10, 0xb6, 0x73, 0x9e, 0x9e, 0x30,
		0x08, 0xdd, 0x2e, 0xe0, 0xc4, 0x84, 0x41, 0xd8, 0xce, 0x79, 0x7a, 0xc2, 0x20, 0x6c, 0xe7, 0x3c,
		0x3d, 0x61, 0x10, 0xb6, 0x73, 0x9e, 0x9e, 0x30, 0x08, 0xc3, 0x2e, 0xe0, 0xb4, 0x84, 0x41, 0x83,
		0x94, 0x47, 0xeb, 0x29, 0x09, 0x69, 0x28, 0xd3, 0x1e, 0xb4, 0x48, 0x41, 0x0c, 0xdb, 0xf5, 0x07,
		0x39, 0x9d, 0x21, 0x86, 0xed, 0xfa, 0x83, 0x9c, 0x7c, 0x10, 0xc3, 0x76, 0xfd, 0x41, 0x4e, 0x3e,
		0x88, 0x61, 0x07, 0xfd, 0x41, 0x4d, 0x3e, 0x88, 0xa1, 0xd3, 0x05, 0x9c, 0x66, 0xd6, 0xc5, 0xb0,
		0x83, 0xfe, 0xa0, 0x26, 0x1f, 0xc4, 0xb0, 0x4d, 0x7f, 0x28, 0x24, 0x1f, 0xc4, 0x89, 0x4a, 0x3f,
		0x4c, 0xf6, 0x41, 0x9c, 0xa8, 0xf4, 0xc3, 0xa4, 0x1f, 0xc4, 0x89, 0x4a, 0x3f, 0x4c, 0xfe, 0xe1,
		0x44, 0xf1, 0xcc, 0x86, 0xf8, 0xb4, 0x60, 0x41, 0x9c, 0x28, 0xf6, 0xc3, 0x24, 0x35, 0xc4, 0x89,
		0x62, 0x3f, 0x4c, 0x06, 0x42, 0x9c, 0x28, 0xf6, 0xc3, 0xa4, 0x20, 0xc4, 0x89, 0x62, 0x3f, 0x4c,
		0x0e, 0x42, 0x9c, 0x28, 0xf6, 0xc3, 0x24, 0x21, 0xc4, 0x89, 0x53, 0x23, 0x4c, 0x16, 0x42, 0x9c,
		0xc8, 0x4f, 0x63, 0xd2, 0x10, 0xc2, 0xea, 0xc0, 0x7f, 0x72, 0x1e, 0x42, 0x58, 0x1d, 0xf8, 0x4f,
		0x4e, 0x44, 0x08, 0xab, 0x0b, 0xff, 0xa9, 0x99, 0x88, 0x13, 0xe5, 0x6d, 0x05, 0x76, 0x7c, 0x47,
		0x43, 0xec, 0xc2, 0x7e, 0x6a, 0x72, 0x43, 0x08, 0xab, 0x13, 0x3a, 0xd1, 0xc2, 0x89, 0x0e, 0xec,
		0x27, 0xa7, 0x22, 0x84, 0xe8, 0xc0, 0x7e, 0x72, 0x2e, 0x42, 0x88, 0x0e, 0xec, 0x27, 0x27, 0x23,
		0x84, 0xe8, 0xc0, 0x7e, 0x72, 0x36, 0x42, 0x08, 0xaf, 0x13, 0x3a, 0x75, 0x57, 0x3b, 0xb0, 0x9f,
		0x9c, 0x8f, 0x10, 0xa2, 0x03, 0xfb, 0xc9, 0x09, 0x09, 0x21, 0x3a, 0xb0, 0x9f, 0x9c, 0x91, 0x38,
		0x21, 0x90, 0x1b, 0xf6, 0x13, 0xdd, 0x7e, 0xbb, 0x03, 0xff, 0xc9, 0x69, 0x0e, 0x61, 0x5b, 0x9d,
		0xd0, 0x2d, 0x22, 0x7a, 0x17, 0xfe, 0x53, 0xd3, 0x12, 0xc2, 0xee, 0xc2, 0x7f, 0x6a, 0x5e, 0x42,
		0xd8, 0x1d, 0xf8, 0x4f, 0x4e, 0x4c, 0x08, 0xbb, 0x03, 0xff, 0xc9, 0x99, 0x09, 0x61, 0x7b, 0x9d,
		0xd0, 0x69, 0xa9, 0x09, 0x61, 0x77, 0xe0, 0x3f, 0x39, 0x37, 0x21, 0xec, 0x0e, 0xfc, 0x27, 0x27,
		0x27, 0x84, 0xdd, 0x81, 0xff, 0xe4, 0xec, 0xc4, 0x09, 0x93, 0xb1, 0xe1, 0x3f, 0xd1, 0xfb, 0x77,
		0x86, 0x9d, 0xde, 0x98, 0x98, 0xf2, 0x70, 0x3a, 0xf0, 0x9f, 0x9e, 0x55, 0x70, 0x3a, 0xf0, 0x9f,
		0x9e, 0x56, 0x70, 0x3a, 0xf0, 0x9f, 0x9e, 0x57, 0x70, 0xba, 0xf0, 0x9f, 0x9c, 0x58, 0x70, 0xdc,
		0x4e, 0xe8, 0x44, 0x0b, 0xed, 0x74, 0xe1, 0x3f, 0x39, 0xb5, 0xe0, 0xb4, 0xf2, 0x5f, 0x25, 0xb7,
		0xe0, 0x48, 0xd2, 0x87, 0x1f, 0x53, 0xa2, 0x94, 0x4b, 0xb2, 0x86, 0x63, 0x22, 0xa6, 0xac, 0xe8,
		0x8f, 0xb6, 0x6b, 0xae, 0x24, 0xc1, 0xb7, 0xa2, 0xbe, 0xa5, 0x24, 0xaf, 0x77, 0x93, 0xd2, 0x20,
		0x65, 0xa4, 0x1e, 0xa7, 0x16, 0x8d, 0x10, 0xae, 0x8c, 0xcc, 0x2b, 0x32, 0xaa, 0x24, 0x7f, 0x37,
		0x26, 0xaf, 0xa9, 0xa4, 0xae, 0x67, 0xfc, 0x69, 0x32, 0xa7, 0x81, 0x7a, 0x72, 0x50, 0x25, 0x4e,
		0xc9, 0x6a, 0xf8, 0x0a, 0x70, 0xcb, 0xf1, 0x89, 0x0b, 0x1c, 0xb4, 0x22, 0x13, 0x35, 0xa4, 0xac,
		0x7a, 0xaf, 0x44, 0x76, 0x89, 0x42, 0x21, 0x2b, 0xdd, 0x13, 0x44, 0x2f, 0x5d, 0x56, 0xbc, 0x37,
		0xae, 0x14, 0x2e, 0x0d, 0xd9, 0x6a, 0x45, 0x76, 0x89, 0xc8, 0xa2, 0x15, 0x99, 0x28, 0x15, 0xb2,
		0x9a, 0xbd, 0x0d, 0x32, 0x51, 0x2a, 0x64, 0x05, 0x7b, 0x25, 0xb2, 0x47, 0x95, 0x0a, 0x49, 0x36,
		0x9e, 0xcc, 0x6a, 0x59, 0x95, 0x9e, 0x32, 0xab, 0x65, 0x55, 0x7a, 0x6a, 0xac, 0x96, 0x95, 0xe8,
		0xa9, 0xb1, 0x5a, 0x56, 0x9f, 0xa7, 0xc6, 0x6a, 0x59, 0x71, 0x9e, 0x20, 0xfa, 0xde, 0xb2, 0xe2,
		0x3c, 0x35, 0x56, 0xcb, 0x2a, 0xf3, 0xd4, 0x58, 0x2d, 0x2b, 0xcb, 0x53, 0x63, 0xb5, 0xac, 0x26,
		0x4f, 0x8d, 0xd5, 0xb2, 0x82, 0x3c, 0x35, 0x56, 0xfb, 0x32, 0x3f, 0x9b, 0x4c, 0x6b, 0xdf, 0x6b,
		0x41, 0x55, 0xe2, 0xb5, 0xef, 0xb7, 0xa1, 0x93, 0x89, 0xed, 0x07, 0xed, 0xd0, 0xd4, 0x3d, 0x0c,
		0x5b, 0xa1, 0xa9, 0xd4, 0x96, 0x35, 0xff, 0xd3, 0x92, 0xea, 0xc1, 0xb0, 0xfd, 0x65, 0x89, 0xcc,
		0x0e, 0xac, 0x76, 0x68, 0x22, 0xb5, 0x03, 0xd1, 0x0e, 0x4d, 0x14, 0x8c, 0xc0, 0x6e, 0x87, 0x26,
		0x0a, 0x46, 0xe0, 0xb4, 0x42, 0x53, 0xd9, 0x2d, 0xab, 0xba, 0x8b, 0x67, 0xcb, 0x6b, 0x1a, 0xa8,
		0x8c, 0xdc, 0x74, 0x54, 0x19, 0xa9, 0x67, 0xd4, 0xf8, 0x46, 0x52, 0x5f, 0x47, 0xc3, 0x93, 0x91,
		0xf8, 0xe3, 0x92, 0x16, 0x2f, 0xc9, 0xa6, 0x6b, 0xdc, 0x7d, 0x98, 0xd0, 0x18, 0x1c, 0xca, 0x18,
		0x4c, 0xcd, 0x13, 0x84, 0x12, 0x5f, 0x7b, 0x96, 0xd2, 0x6c, 0x45, 0x28, 0xf3, 0xb2, 0xef, 0x88,
		0xef, 0x79, 0xda, 0xbf, 0xa6, 0xe1, 0x49, 0xbc, 0xea, 0x8f, 0xd4, 0x77, 0x94, 0x44, 0xc9, 0x1f,
		0x69, 0x99, 0x87, 0x50, 0x12, 0x23, 0x2f, 0x89, 0x90, 0x12, 0xb7, 0x71, 0x46, 0x94, 0x4c, 0x49,
		0xc1, 0xf8, 0x1f, 0x44, 0x48, 0x19, 0x85, 0xae, 0xef, 0xcc, 0x09, 0xf9, 0x1e, 0xb8, 0xa6, 0x56,
		0x75, 0x52, 0xae, 0xd7, 0x96, 0x0d, 0xa5, 0x21, 0xe6, 0xbe, 0x6d, 0xe9, 0x8c, 0xbb, 0xeb, 0x3b,
		0x73, 0x4d, 0x43, 0xb5, 0xa4, 0xa8, 0x62, 0x48, 0x5c, 0x4f, 0xe9, 0x54, 0xbb, 0x02, 0x97, 0xf8,
		0xbe, 0xb6, 0x14, 0xd7, 0x21, 0xbf, 0xaf, 0xd3, 0x8a, 0x1b, 0xd1, 0x80, 0xdd, 0x36, 0x60, 0xe2,
		0x42, 0x78, 0x52, 0xdc, 0x80, 0xbc, 0x10, 0x7e, 0x1b, 0x2e, 0xf1, 0x7d, 0x03, 0x29, 0xae, 0x45,
		0x97, 0xb4, 0xb0, 0x15, 0x98, 0xf6, 0xc6, 0x32, 0x66, 0xd0, 0xd4, 0xa1, 0x6d, 0x49, 0x32, 0x63,
		0x64, 0xd5, 0x65, 0x59, 0x52, 0x50, 0xe2, 0xc7, 0x0b, 0x19, 0xa8, 0x45, 0xdd, 0x2c, 0xcb, 0x6e,
		0x81, 0x25, 0xbe, 0xad, 0x23, 0x83, 0x25, 0x8b, 0x96, 0xe5, 0xb6, 0xc0, 0x12, 0xdf, 0xd6, 0x93,
		0xc1, 0x92, 0x55, 0x98, 0xe5, 0xb7, 0xc0, 0x12, 0xdf, 0x36, 0x90, 0xc1, 0x92, 0xf5, 0x8c, 0x15,
		0xb6, 0xc0, 0xd2, 0xde, 0x56, 0x48, 0x49, 0x4b, 0x4b, 0x68, 0xdb, 0x42, 0x4a, 0x5b, 0xba, 0xea,
		0x12, 0x56, 0x1b, 0x2e, 0x71, 0x11, 0xa4, 0x83, 0xe5, 0x52, 0xaa, 0xf6, 0x92, 0xd6, 0x98, 0xc5,
		0xa9, 0x33, 0xa3, 0xa1, 0x3a, 0xd2, 0xc3, 0x2e, 0x87, 0x06, 0xea, 0xca, 0x8e, 0x0f, 0xcd, 0x6b,
		0xe2, 0x7e, 0x35, 0x10, 0x57, 0xb8, 0xd5, 0x61, 0x1f, 0x0d, 0xd2, 0x97, 0x41, 0x9a, 0x2b, 0x1a,
		0x68, 0x70, 0x1a, 0xf4, 0x23, 0xf1, 0x3d, 0x43, 0x19, 0x24, 0xf1, 0x3d, 0x6d, 0x29, 0x59, 0x6f,
		0x68, 0xd1, 0xb0, 0xdd, 0xe4, 0x7d, 0x57, 0xaf, 0x4a, 0xfb, 0xf8, 0x26, 0x57, 0xa0, 0x42, 0x5c,
		0x11, 0x21, 0x85, 0x64, 0xdf, 0xa9, 0x98, 0xf6, 0x69, 0xcc, 0x09, 0x31, 0xbd, 0x6b, 0x37, 0x95,
		0x7e, 0xed, 0x82, 0xaa, 0x64, 0x77, 0xed, 0xa6, 0xca, 0xaf, 0x7a, 0x15, 0xc8, 0x6f, 0xec, 0xc9,
		0x41, 0xd5, 0xde, 0x58, 0x96, 0xba, 0x5a, 0xae, 0xe6, 0x34, 0x75, 0x25, 0xad, 0xf3, 0x8a, 0x89,
		0x09, 0x31, 0x5b, 0x5a, 0xdf, 0x95, 0xa3, 0xd2, 0x14, 0xb6, 0x2c, 0x52, 0x5a, 0xd1, 0x28, 0x2b,
		0xad, 0xeb, 0x8a, 0xc6, 0x63, 0x1a, 0xa8, 0x2c, 0xf9, 0x1c, 0x2d, 0x88, 0xa0, 0x6d, 0x69, 0x67,
		0x9a, 0x00, 0x38, 0x92, 0xe3, 0x24, 0xb2, 0x54, 0x49, 0xab, 0xb6, 0x88, 0xa5, 0x3e, 0xb6, 0xb4,
		0x58, 0x2b, 0x1a, 0x67, 0xc5, 0x85, 0xee, 0x34, 0x64, 0x59, 0xae, 0x79, 0x19, 0xad, 0x14, 0x90,
		0x1b, 0x48, 0xeb, 0xd6, 0xeb, 0x20, 0x68, 0x98, 0xc1, 0x69, 0xcc, 0x15, 0x15, 0x33, 0x3c, 0x8d,
		0xb9, 0x5c, 0xcd, 0x69, 0xa0, 0xae, 0x94, 0xae, 0x44, 0x8f, 0xb8, 0xa9, 0x3c, 0x4b, 0xa8, 0x8a,
		0x56, 0x73, 0x7d, 0x56, 0x5d, 0xa0, 0x45, 0x04, 0x15, 0x12, 0xd0, 0x09, 0x15, 0x54, 0x56, 0xd3,
		0x41, 0x33, 0xde, 0xb2, 0x89, 0x6b, 0x54, 0x65, 0xe5, 0x4a, 0xbc, 0x60, 0x32, 0xa6, 0xa4, 0x8a,
		0x23, 0x1a, 0xd3, 0xe2, 0x15, 0xd7, 0x97, 0xea, 0x14, 0x22, 0xa8, 0xac, 0x1a, 0x6b, 0x6d, 0xd1,
		0x7c, 0x0b, 0x69, 0x21, 0xd6, 0xda, 0xa6, 0x81, 0x7a, 0x52, 0x86, 0x12, 0xd3, 0xc5, 0xd2, 0x22,
		0xac, 0xb5, 0x4b, 0x7c, 0x53, 0x49, 0xc0, 0x1a, 0x8d, 0xd7, 0x3e, 0x11, 0x55, 0x48, 0x51, 0xad,
		0x21, 0x11, 0xb6, 0xc9, 0xa6, 0xde, 0x59, 0xc3, 0x5b, 0x73, 0x73, 0x86, 0x45, 0x43, 0x75, 0xa4,
		0x62, 0x65, 0x52, 0x57, 0x56, 0x56, 0x47, 0xb9, 0x16, 0x44, 0x50, 0x4f, 0x0a, 0x4a, 0x7e, 0x57,
		0x5f, 0xaa, 0xaa, 0x88, 0xd4, 0xf2, 0x02, 0x29, 0x2a, 0x75, 0x09, 0x42, 0x29, 0x2a, 0x91, 0xb1,
		0xb2, 0x1c, 0xf9, 0x98, 0xe6, 0x02, 0xfb, 0x43, 0xe9, 0x8b, 0x12, 0xb7, 0xca, 0xb7, 0xa4, 0xa8,
		0x44, 0xc2, 0xfa, 0x42, 0x2e, 0x00, 0x44, 0xc2, 0xca, 0x6a, 0xaa, 0x22, 0xb2, 0xca, 0x96, 0xd5,
		0x53, 0x45, 0x64, 0x9d, 0x2d, 0x9b, 0x6c, 0x16, 0x91, 0xf5, 0xab, 0x2f, 0x37, 0xae, 0xd4, 0xed,
		0xf2, 0xe5, 0xeb, 0x4a, 0xdd, 0x2e, 0x49, 0x96, 0x89, 0xbe, 0x5b, 0xa1, 0x0c, 0x94, 0xa8, 0x04,
		0x02, 0x29, 0x5d, 0x89, 0x55, 0x17, 0x76, 0x30, 0x94, 0xbd, 0x2a, 0x51, 0xae, 0x02, 0x4b, 0x06,
		0x4a, 0x14, 0x2b, 0x69, 0xad, 0xd4, 0x6a, 0x4e, 0xcd, 0x61, 0x05, 0xb2, 0xfc, 0x9d, 0x20, 0x9f,
		0x67, 0x05, 0x4e, 0x1b, 0xac, 0x39, 0xa5, 0x01, 0xbb, 0x2d, 0xc0, 0x34, 0x47, 0x33, 0xf0, 0xda,
		0x60, 0xa9, 0xef, 0xeb, 0x4b, 0x42, 0x97, 0x71, 0x1a, 0xd0, 0x40, 0x03, 0x69, 0xba, 0x9d, 0x9a,
		0x1a, 0x6f, 0x9e, 0x3f, 0x56, 0x97, 0x0b, 0xd1, 0xde, 0x35, 0x94, 0xf2, 0x96, 0xe8, 0x18, 0x37,
		0x8f, 0x1e, 0x53, 0x8c, 0x8a, 0x42, 0x59, 0xe8, 0x4a, 0x4d, 0x60, 0x85, 0x42, 0x0a, 0xaa, 0x90,
		0x6a, 0x69, 0x9e, 0x33, 0x86, 0x48, 0xb5, 0x34, 0x55, 0x4f, 0x05, 0x77, 0xe6, 0xea, 0x66, 0x59,
		0x27, 0x5c, 0x68, 0x2c, 0x6b, 0x2a, 0xa1, 0x12, 0x77, 0x3b, 0x55, 0x83, 0x01, 0xf1, 0x10, 0xa2,
		0xa9, 0x90, 0x6a, 0x07, 0x98, 0x7a, 0x02, 0xd5, 0x54, 0x4c, 0xb5, 0x03, 0x4b, 0x4e, 0xea, 0x35,
		0x55, 0x54, 0xed, 0xe0, 0xd2, 0x53, 0x90, 0x4d, 0x75, 0x55, 0x7b, 0x0b, 0x4c, 0x82, 0x6d, 0x10,
		0x87, 0x9b, 0xc5, 0x34, 0x25, 0x65, 0x9e, 0x1d, 0x49, 0x05, 0x14, 0x0d, 0x4f, 0x96, 0x76, 0xa6,
		0x75, 0x04, 0x3a, 0x43, 0x4b, 0x5a, 0xdb, 0x4a, 0xc3, 0x14, 0xf2, 0x83, 0xd7, 0x1b, 0x1a, 0x6a,
		0x5b, 0xcb, 0xb0, 0xa0, 0xc1, 0x4a, 0x0e, 0x8c, 0xc8, 0xd1, 0xa1, 0x33, 0x74, 0xa5, 0xa8, 0x82,
		0x88, 0xea, 0x49, 0x51, 0x6d, 0x22, 0xaa, 0x2f, 0x45, 0x75, 0x89, 0xa8, 0x81, 0x14, 0xd5, 0x27,
		0xa2, 0x86, 0xf2, 0xdd, 0xa2, 0xc5, 0x06, 0x8e, 0xac, 0x76, 0x2a, 0xa3, 0xe5, 0x9c, 0x1d, 0x4b,
		0x6a, 0xb8, 0xe3, 0x31, 0x0d, 0xd4, 0x6a, 0x4e, 0x12, 0xa9, 0x29, 0x01, 0x4b, 0x66, 0xb9, 0xff,
		0x20, 0x1e, 0x97, 0x3b, 0x96, 0x2d, 0x47, 0x5d, 0xce, 0xd6, 0x2b, 0x2a, 0xb4, 0xb4, 0xc1, 0x9f,
		0xfc, 0xc2, 0xae, 0xd4, 0x29, 0xa4, 0x19, 0x94, 0xa6, 0xea, 0xa9, 0x7f, 0xac, 0x48, 0xc5, 0x99,
		0x8e, 0xac, 0x4e, 0x26, 0xa3, 0xf9, 0x97, 0xb2, 0xab, 0x98, 0x48, 0x71, 0xa6, 0xec, 0xfa, 0xa5,
		0x19, 0xad, 0x1e, 0x5d, 0x76, 0xe9, 0x12, 0x4d, 0xe0, 0x25, 0x89, 0x46, 0xda, 0x8d, 0xe3, 0xb2,
		0xdb, 0x95, 0x88, 0x56, 0x54, 0x92, 0x5f, 0xa4, 0x05, 0xc0, 0xb2, 0x7b, 0x94, 0x88, 0x35, 0x1c,
		0xee, 0xa9, 0x3a, 0x74, 0x92, 0x2d, 0x96, 0xdd, 0x9c, 0xf4, 0x89, 0x04, 0x28, 0x49, 0x27, 0xc6,
		0x34, 0x44, 0x49, 0x2a, 0x71, 0x46, 0x43, 0x94, 0x10, 0x70, 0x45, 0x43, 0x94, 0x30, 0xf0, 0x0f,
		0xda, 0x36, 0x37, 0xec, 0x73, 0x30, 0x14, 0x66, 0x48, 0x52, 0x63, 0x4d, 0x47, 0x72, 0xe9, 0xff,
		0x3a, 0xa4, 0xd6, 0x05, 0x57, 0x96, 0xda, 0xa6, 0x75, 0x6c, 0xb8, 0xd2, 0xf4, 0x1b, 0xb1, 0xca,
		0xc7, 0x0d, 0x5b, 0x40, 0xc9, 0x7d, 0xa1, 0x8d, 0xaa, 0xec, 0x3a, 0x5d, 0x44, 0x13, 0xda, 0x60,
		0x4e, 0x6f, 0xd8, 0xfe, 0xa6, 0xb4, 0x6e, 0x42, 0xcf, 0x6a, 0x45, 0x26, 0x76, 0x99, 0x7a, 0xa2,
		0x1d, 0x99, 0xd6, 0x12, 0xea, 0xd9, 0xed, 0xc8, 0xb4, 0x8e, 0x50, 0xcf, 0x69, 0x47, 0x26, 0x4a,
		0x84, 0xdb, 0x8e, 0x4c, 0xdc, 0x41, 0xaf, 0x15, 0x99, 0xd8, 0x0e, 0xea, 0xb5, 0xdc, 0x54, 0x46,
		0xc2, 0x0c, 0xa4, 0xa1, 0x2d, 0xc9, 0x15, 0xf1, 0xda, 0xae, 0x1b, 0xa7, 0x80, 0xfa, 0xa7, 0xac,
		0x28, 0x09, 0xac, 0xcb, 0x0d, 0xe3, 0xa4, 0xe1, 0x51, 0x7e, 0x97, 0xdb, 0xc5, 0x49, 0xe3, 0xc0,
		0xfc, 0x0e, 0x37, 0x8b, 0x3b, 0xa4, 0xa1, 0x71, 0x7e, 0x87, 0x5b, 0xc5, 0x69, 0x96, 0xc7, 0x77,
		0x3a, 0x20, 0x93, 0x86, 0xf4, 0xf9, 0x6e, 0x3b, 0x32, 0x6d, 0x84, 0xa6, 0xef, 0x75, 0x40, 0xa6,
		0xed, 0xa0, 0xdf, 0x8e, 0x4c, 0x1b, 0xfb, 0x27, 0xbb, 0x7c, 0x88, 0x48, 0x62, 0xd9, 0x95, 0x43,
		0x31, 0x0d, 0x32, 0x38, 0x79, 0x77, 0x30, 0x31, 0x7d, 0x20, 0x9d, 0x72, 0x40, 0x7d, 0x49, 0x19,
		0x81, 0x69, 0x23, 0x8e, 0x03, 0x79, 0xdf, 0x24, 0xb5, 0xf1, 0x2a, 0xb0, 0xdb, 0x60, 0x49, 0x59,
		0xf9, 0xc0, 0xe9, 0x22, 0xa5, 0xc4, 0xd9, 0xf7, 0x41, 0x07, 0xda, 0x92, 0x47, 0xdf, 0x07, 0x5d,
		0x98, 0x4b, 0x9d, 0x7c, 0x1f, 0x74, 0x20, 0x2f, 0x79, 0x48, 0x7d, 0x10, 0x74, 0x02, 0xa7, 0xcd,
		0xa8, 0x0f, 0xc2, 0x2e, 0x0a, 0x8d, 0x38, 0xa2, 0x3e, 0x3c, 0xcd, 0x69, 0x5a, 0xae, 0x25, 0xec,
		0x60, 0x9a, 0xc9, 0x23, 0xef, 0xc3, 0x0e, 0xd6, 0x99, 0x3c, 0xf1, 0x3e, 0xec, 0x60, 0xa0, 0xc9,
		0x03, 0xef, 0x43, 0xbb, 0x13, 0x38, 0x6d, 0xde, 0x7d, 0xe8, 0x74, 0x31, 0xa6, 0xc4, 0x71, 0x9a,
		0x61, 0x17, 0x4b, 0x4d, 0x9d, 0x76, 0x1f, 0x76, 0xa1, 0x3c, 0x75, 0xd8, 0x7d, 0xd8, 0x85, 0xf2,
		0xd4, 0xc9, 0xf4, 0x61, 0xd0, 0x09, 0x9c, 0x36, 0x20, 0x35, 0x0c, 0xbb, 0xf8, 0x5d, 0xa6, 0x2d,
		0x06, 0xbd, 0xb0, 0xbf, 0xf6, 0x7b, 0x95, 0xc1, 0xdb, 0xc5, 0xeb, 0x24, 0x1b, 0x8c, 0x8c, 0x2f,
		0xfd, 0xbf, 0xe0, 0xc4, 0x89, 0xe0, 0xc8, 0x70, 0x86, 0xdf, 0xa3, 0xd0, 0x36, 0xf5, 0x2c, 0x23,
		0xc3, 0x0e, 0x6c, 0x30, 0xa8, 0x39, 0x2d, 0x60, 0x1d, 0x2c, 0xec, 0xba, 0x00, 0x75, 0xc1, 0xa0,
		0x9b, 0x77, 0xf5, 0x70, 0xb0, 0x9b, 0x65, 0x15, 0x61, 0x08, 0xc5, 0x2c, 0x3e, 0x7f, 0x38, 0x44,
		0x62, 0x16, 0xbe, 0xd7, 0xc8, 0x08, 0x04, 0x18, 0x34, 0x7f, 0x55, 0xa4, 0x50, 0x55, 0x1d, 0xc9,
		0xf9, 0x02, 0x04, 0x68, 0xd8, 0x72, 0x5d, 0xa1, 0x7b, 0x55, 0xbf, 0xac, 0x05, 0x46, 0x2d, 0xdf,
		0x15, 0xba, 0x5d, 0x4e, 0xf5, 0xae, 0x36, 0x1a, 0x35, 0x2a, 0x60, 0x1d, 0x30, 0x6c, 0xb9, 0x04,
		0x2e, 0x12, 0x35, 0xa8, 0x96, 0xc0, 0x03, 0xa3, 0x96, 0xef, 0xea, 0xe3, 0x50, 0x8b, 0xdc, 0xf2,
		0xc8, 0x70, 0x03, 0x2c, 0x64, 0x99, 0x59, 0x1e, 0x19, 0x6e, 0x08, 0xc7, 0x2d, 0x1c, 0x5a, 0x6f,
		0x88, 0xc6, 0x75, 0x8b, 0xa3, 0x73, 0xcf, 0x82, 0xe3, 0x16, 0xad, 0xd6, 0x9e, 0x80, 0xe3, 0x16,
		0x07, 0x57, 0x9e, 0x0d, 0xc7, 0x2d, 0xf6, 0xcd, 0x73, 0xe0, 0xb8, 0xe5, 0xbe, 0xb9, 0x68, 0x5c,
		0xaf, 0xdc, 0x37, 0x20, 0xd1, 0xc6, 0x77, 0x39, 0xc9, 0x90, 0x1c, 0xbb, 0xbb, 0x29, 0xb4, 0x01,
		0x92, 0x0b, 0x45, 0x45, 0x76, 0xee, 0x66, 0xe0, 0x30, 0xcb, 0xa1, 0x17, 0x23, 0xc3, 0x16, 0x40,
		0x61, 0x9d, 0x94, 0xfa, 0xc5, 0x0b, 0xb1, 0x90, 0xf5, 0x7d, 0x04, 0x23, 0xc3, 0x12, 0x36, 0x1e,
		0xbb, 0xb8, 0x49, 0x21, 0xc7, 0x16, 0x3a, 0xb0, 0x0b, 0x2a, 0x58, 0xc2, 0xc2, 0x63, 0x17, 0xb7,
		0x57, 0xe4, 0xd8, 0x43, 0x3c, 0x76, 0xbe, 0xd8, 0xbe, 0x0e, 0x5c, 0xb3, 0x28, 0x64, 0xb0, 0x2c,
		0x0d, 0x32, 0x52, 0xdc, 0x44, 0x92, 0x63, 0x07, 0x78, 0xec, 0xe2, 0x0e, 0x95, 0x1c, 0xdb, 0xd7,
		0x81, 0x5d, 0x24, 0x39, 0x2d, 0xcb, 0xc3, 0x63, 0x17, 0x77, 0xe1, 0xe4, 0xd8, 0x2e, 0x1e, 0x3b,
		0xdf, 0x48, 0x5f, 0x83, 0x5c, 0x17, 0xb7, 0x03, 0xe5, 0xef, 0xec, 0xe0, 0xb1, 0x8b, 0x7b, 0x8d,
		0x72, 0x6c, 0x5b, 0x07, 0x76, 0x91, 0x97, 0xb0, 0x2c, 0x0d, 0x7a, 0xa4, 0xb8, 0x4b, 0x2a, 0xc7,
		0xc6, 0xaf, 0x77, 0x79, 0x0b, 0x56, 0x8e, 0x8d, 0xe7, 0x7b, 0x51, 0xf7, 0xe8, 0x0b, 0x0d, 0xb8,
		0x66, 0xd1, 0xc7, 0x6f, 0x0d, 0xf1, 0x7a, 0xa4, 0xbc, 0xd1, 0x2c, 0xc7, 0x0e, 0x74, 0x60, 0x87,
		0x25, 0x36, 0x5e, 0x8f, 0x94, 0x37, 0xd3, 0xe5, 0xd8, 0x78, 0x3d, 0x52, 0xde, 0xa9, 0x97, 0x63,
		0xe3, 0xf5, 0x48, 0x51, 0x7c, 0xe7, 0xdb, 0x1a, 0x70, 0xcd, 0x62, 0xa8, 0x90, 0x35, 0xc4, 0xeb,
		0x91, 0xf2, 0x7e, 0xc4, 0x1c, 0xdb, 0xd6, 0x81, 0x1d, 0x96, 0xd8, 0x1a, 0x78, 0x53, 0xdc, 0x49,
		0x99, 0x63, 0x6b, 0xd0, 0x23, 0xc5, 0x6d, 0x9a, 0x39, 0xb6, 0x06, 0x3d, 0x92, 0x2b, 0x6d, 0x5f,
		0xc3, 0x3e, 0x86, 0xa5, 0x8c, 0x84, 0x78, 0x35, 0x52, 0xe6, 0x9f, 0x47, 0x46, 0x18, 0xe8, 0x80,
		0x2e, 0x24, 0x24, 0xc4, 0x2b, 0x91, 0x32, 0xdf, 0x3f, 0x32, 0x42, 0xbc, 0x0e, 0x29, 0xcf, 0x29,
		0x46, 0x46, 0x88, 0x57, 0x21, 0x85, 0x6e, 0xf2, 0x75, 0xe0, 0x96, 0x61, 0x47, 0x88, 0x97, 0xbc,
		0xf2, 0xbc, 0x69, 0x64, 0x84, 0xb6, 0x0e, 0xe8, 0xc2, 0xc8, 0x84, 0x78, 0xfd, 0x51, 0x9e, 0xef,
		0x8d, 0x8c, 0x10, 0xaf, 0x3e, 0xca, 0x73, 0xc9, 0x91, 0x11, 0xe2, 0xb5, 0x47, 0x51, 0xc3, 0xe9,
		0x6b, 0x90, 0xe8, 0xe2, 0xe0, 0x77, 0x64, 0x04, 0x1a, 0xb4, 0x47, 0x71, 0x60, 0x3d, 0x32, 0x82,
		0x40, 0x07, 0x74, 0xe1, 0xa7, 0x06, 0x1a, 0xb4, 0x47, 0x51, 0x20, 0x30, 0x32, 0x02, 0xfc, 0x5a,
		0x97, 0x85, 0x0d, 0x23, 0x23, 0xc0, 0xb3, 0xbc, 0xc0, 0xf5, 0x7d, 0x0d, 0xb8, 0x66, 0xd1, 0x50,
		0x11, 0xa0, 0xb5, 0x47, 0x35, 0xaf, 0x2f, 0x8f, 0xfd, 0x81, 0xd8, 0xf1, 0x5d, 0xfe, 0xb2, 0x40,
		0x66, 0x97, 0x19, 0x26, 0x28, 0xe0, 0x4d, 0x99, 0x09, 0xb3, 0x91, 0x98, 0x1f, 0x8a, 0x84, 0x1d,
		0x50, 0x59, 0xae, 0x8a, 0x77, 0x74, 0x90, 0x80, 0x65, 0x52, 0xd1, 0x43, 0x42, 0x96, 0x9f, 0x0d,
		0xa4, 0x53, 0x56, 0xbc, 0xa4, 0x03, 0x5c, 0xc8, 0xac, 0x78, 0x47, 0x07, 0x28, 0x41, 0xf9, 0xce,
		0x08, 0xa0, 0x4e, 0xdd, 0x6c, 0x0c, 0xd0, 0x66, 0x6d, 0x92, 0xbd, 0x02, 0x68, 0x53, 0xfe, 0xc8,
		0x01, 0x5d, 0x88, 0x82, 0xdb, 0x2a, 0x0a, 0x4c, 0xb6, 0x74, 0x7b, 0xfd, 0xf1, 0xc8, 0xc0, 0xe8,
		0xb2, 0xed, 0x85, 0xea, 0x23, 0x03, 0x93, 0x2d, 0x2e, 0x1b, 0x1f, 0xf3, 0x6f, 0xc6, 0x64, 0x2d,
		0x37, 0x78, 0xe5, 0x37, 0x5b, 0x40, 0xc4, 0xf2, 0x9b, 0x87, 0x30, 0xc4, 0x59, 0x29, 0x88, 0x38,
		0xc1, 0xc9, 0x72, 0x73, 0x28, 0x5c, 0x20, 0x5e, 0xb9, 0x88, 0xc8, 0x37, 0x2c, 0x17, 0xd1, 0xc3,
		0x21, 0x16, 0xf9, 0x1e, 0xe0, 0x37, 0x17, 0x82, 0x08, 0x7c, 0xbf, 0x52, 0x10, 0x31, 0x49, 0xf3,
		0x0d, 0x62, 0xb1, 0x86, 0x16, 0x6e, 0x57, 0xfe, 0x28, 0x05, 0x11, 0xf2, 0x8a, 0xdb, 0x11, 0x24,
		0xb9, 0x8d, 0x1e, 0x22, 0x21, 0x37, 0x03, 0x48, 0x72, 0x5c, 0x17, 0x89, 0x5b, 0x14, 0x02, 0x60,
		0xf4, 0xf7, 0x76, 0xaa, 0x4b, 0xfe, 0x96, 0x16, 0x0e, 0xb2, 0xb8, 0xdb, 0x39, 0x27, 0xb7, 0x40,
		0x62, 0x3a, 0xc5, 0x6b, 0x3a, 0x40, 0xc8, 0xf2, 0x88, 0x52, 0xf8, 0x2e, 0x16, 0xb3, 0xaa, 0x81,
		0x10, 0xbe, 0x0f, 0x07, 0x0e, 0x4b, 0xe0, 0x00, 0x0d, 0x5c, 0x56, 0x41, 0x08, 0x3f, 0x84, 0x03,
		0x17, 0x65, 0x10, 0x22, 0x18, 0xc2, 0x81, 0xdd, 0x12, 0xd8, 0x82, 0x03, 0x97, 0x9b, 0x17, 0x08,
		0x38, 0x70, 0xb9, 0x79, 0x98, 0x72, 0xb6, 0xdb, 0xa3, 0x52, 0x08, 0x11, 0x80, 0xb9, 0xb1, 0x13,
		0x5b, 0x0a, 0x4c, 0xc6, 0x64, 0x77, 0x0c, 0x4f, 0x4e, 0x66, 0xe0, 0x12, 0x17, 0x73, 0x18, 0xf2,
		0xf8, 0x00, 0xb8, 0x08, 0x07, 0x05, 0x07, 0xc2, 0xf1, 0xf0, 0xd8, 0x9b, 0x82, 0x03, 0x81, 0xb4,
		0x12, 0x07, 0x05, 0x07, 0xc2, 0xd1, 0xb0, 0x26, 0x9b, 0x82, 0x03, 0xe1, 0xd8, 0x78, 0xec, 0x4d,
		0x61, 0x80, 0x80, 0xca, 0xc7, 0x7e, 0x61, 0x80, 0x40, 0xda, 0xbb, 0x83, 0xc2, 0x00, 0x81, 0xf4,
		0x24, 0x0e, 0x0a, 0x03, 0x84, 0x1d, 0xe2, 0xb1, 0x37, 0x85, 0x01, 0xc2, 0x0e, 0xf0, 0xd8, 0x9b,
		0x03, 0x7c, 0x61, 0xfb, 0x78, 0xec, 0xcd, 0x01, 0xbe, 0xb0, 0x3d, 0x1d, 0xd8, 0x45, 0x62, 0x54,
		0xd8, 0x1a, 0x78, 0xb9, 0x39, 0xc0, 0x17, 0x36, 0x9e, 0x97, 0xd5, 0x01, 0xbe, 0xb0, 0xf1, 0xbc,
		0xac, 0x0e, 0xda, 0x85, 0x8d, 0xe7, 0x65, 0x75, 0xd0, 0x2e, 0x6c, 0x4b, 0x07, 0x76, 0x58, 0x62,
		0xe3, 0x79, 0x59, 0x1d, 0xb4, 0x0b, 0x81, 0xe7, 0x65, 0x75, 0xd0, 0x2e, 0x04, 0x9e, 0x97, 0xd5,
		0x81, 0xb8, 0x10, 0x78, 0x5e, 0x56, 0x07, 0xe2, 0x42, 0x78, 0x3a, 0xb0, 0xc3, 0x12, 0x1b, 0xcf,
		0xcb, 0xea, 0x40, 0x5c, 0x08, 0x0d, 0xbc, 0xdc, 0x1c, 0x88, 0x0b, 0xa1, 0x81, 0x97, 0x61, 0xb5,
		0x97, 0x78, 0x5e, 0x56, 0x27, 0xd7, 0x42, 0x58, 0x3a, 0xb0, 0x37, 0x7b, 0x89, 0xe7, 0x65, 0x75,
		0x76, 0x2d, 0x2c, 0x3c, 0x2f, 0xab, 0xc3, 0x6b, 0x61, 0xe1, 0x79, 0x59, 0x9d, 0x32, 0x0b, 0x0b,
		0xcf, 0xcb, 0xea, 0x98, 0x59, 0x58, 0x9e, 0x0e, 0xec, 0x52, 0xc7, 0x5a, 0x78, 0x5e, 0x56, 0x07,
		0xcd, 0x42, 0x83, 0x6f, 0x5f, 0x9d, 0x34, 0x0b, 0x0b, 0xcf, 0xcb, 0xea, 0x48, 0x58, 0x58, 0x1a,
		0x78, 0xb9, 0x39, 0x13, 0x16, 0x96, 0xa5, 0x03, 0xbb, 0xf4, 0x7d, 0x2c, 0x0d, 0xbc, 0xdc, 0x9c,
		0x0a, 0x8b, 0x21, 0x9e, 0x97, 0xd5, 0xb1, 0xb0, 0x18, 0xe2, 0x79, 0x59, 0x9d, 0xdf, 0x8a, 0x21,
		0x9a, 0x97, 0x3b, 0x41, 0xb6, 0x03, 0xc6, 0x16, 0x45, 0x9b, 0x27, 0x50, 0xb0, 0xe3, 0xd9, 0xf2,
		0xba, 0xc8, 0x34, 0x00, 0x15, 0x48, 0x5c, 0x26, 0x0b, 0x6d, 0x64, 0xf0, 0x51, 0xde, 0xdf, 0x96,
		0x83, 0x86, 0x48, 0xd0, 0x5c, 0xc1, 0x21, 0x13, 0x59, 0xc5, 0x74, 0xda, 0x7c, 0x8b, 0x04, 0x14,
		0xb3, 0xf8, 0x72, 0xa4, 0x9f, 0x71, 0x93, 0x16, 0x6f, 0x09, 0xfc, 0xf2, 0x8f, 0xcb, 0xc2, 0x58,
		0x04, 0xc0, 0xed, 0xf9, 0x58, 0x6c, 0x8f, 0x08, 0x81, 0x6f, 0x39, 0x2b, 0xbf, 0xdb, 0x42, 0x22,
		0x6e, 0x52, 0x75, 0x3e, 0x12, 0x33, 0xff, 0x70, 0x0f, 0x48, 0x9f, 0x7a, 0xc8, 0xf9, 0xc8, 0xb0,
		0x91, 0x39, 0xaf, 0x62, 0xae, 0x77, 0xce, 0x4a, 0xe0, 0xd7, 0x97, 0x37, 0x34, 0x8c, 0x0c, 0x1b,
		0x99, 0xaf, 0x2d, 0x47, 0xfd, 0xe7, 0xa0, 0x01, 0x12, 0x74, 0x73, 0x2a, 0x62, 0x23, 0x31, 0x8b,
		0x05, 0x85, 0x04, 0x2c, 0x9b, 0xb9, 0x00, 0x3e, 0x08, 0xca, 0xbc, 0xb9, 0x2e, 0x1a, 0x09, 0x60,
		0x70, 0xb3, 0xa2, 0xc6, 0x09, 0x07, 0x57, 0x1e, 0x75, 0x3a, 0x38, 0xc0, 0xf2, 0xa4, 0xd3, 0x86,
		0x01, 0x2e, 0x8b, 0x02, 0x6a, 0x14, 0x5c, 0x59, 0x91, 0x13, 0xc2, 0xe0, 0x8a, 0xaf, 0x0d, 0x40,
		0x70, 0xb9, 0xa7, 0xe2, 0x82, 0xb0, 0x72, 0x77, 0x1e, 0xb2, 0x09, 0x9b, 0xb1, 0x96, 0x23, 0x03,
		0xa1, 0x02, 0x6f, 0x37, 0xf4, 0x12, 0x90, 0x22, 0xdf, 0xbd, 0xfb, 0x89, 0x46, 0x86, 0x0d, 0x69,
		0x33, 0xde, 0xbd, 0x4a, 0x29, 0xc7, 0xb4, 0x70, 0x98, 0xe5, 0x19, 0xb3, 0xeb, 0x20, 0x11, 0x37,
		0x9f, 0xee, 0x0b, 0x28, 0x68, 0xf9, 0xe9, 0x3e, 0x12, 0x53, 0x94, 0x98, 0x01, 0x12, 0xd3, 0x2e,
		0x31, 0x43, 0x24, 0xa6, 0x5b, 0xae, 0xe7, 0x10, 0x89, 0x59, 0x8a, 0x92, 0x8f, 0x13, 0xa5, 0x6a,
		0xd2, 0x8c, 0x35, 0x44, 0x42, 0x16, 0x55, 0x15, 0x16, 0xf2, 0x2d, 0x37, 0x03, 0x51, 0x6c, 0x4b,
		0x60, 0x41, 0xcb, 0x37, 0xb5, 0x91, 0xa0, 0xd5, 0x8c, 0x11, 0x31, 0x04, 0xa3, 0x16, 0xef, 0x2a,
		0x90, 0xab, 0x5a, 0xbd, 0xaa, 0xe5, 0x60, 0x41, 0xcb, 0x55, 0x75, 0x81, 0xa0, 0xd5, 0x30, 0x14,
		0xcb, 0xc3, 0x82, 0x96, 0x6f, 0xea, 0x03, 0x41, 0xab, 0x99, 0x25, 0x56, 0x80, 0x05, 0x2d, 0xdf,
		0x14, 0xa7, 0xa1, 0xc6, 0x85, 0x9b, 0xef, 0xe2, 0x44, 0x7f, 0x5c, 0x04, 0x0e, 0x0e, 0xf0, 0x0d,
		0xcb, 0x2b, 0x4e, 0x73, 0xc5, 0xec, 0x20, 0x41, 0x0b, 0x48, 0x37, 0x00, 0x42, 0x8a, 0xea, 0x3d,
		0x3d, 0x24, 0x68, 0x09, 0xe9, 0x02, 0x21, 0x4b, 0x33, 0xe7, 0x22, 0xb7, 0x68, 0xf3, 0xe1, 0x38,
		0x5d, 0x57, 0x95, 0x91, 0xb9, 0x2e, 0x14, 0xb2, 0xae, 0x22, 0x73, 0x7d, 0x34, 0x6e, 0x59, 0x15,
		0x82, 0x14, 0xa8, 0xdd, 0x1a, 0x32, 0xe4, 0x6e, 0xed, 0x96, 0x90, 0x81, 0xb7, 0xac, 0xae, 0x20,
		0x03, 0xfa, 0xb9, 0x7b, 0x05, 0x64, 0x40, 0x9f, 0x7c, 0xaf, 0x7e, 0xcc, 0xb3, 0xc1, 0xb8, 0x9b,
		0xf2, 0x31, 0xa4, 0xce, 0x3a, 0x48, 0x6c, 0xbb, 0x40, 0x35, 0x73, 0x57, 0xa6, 0xf9, 0x70, 0x8b,
		0x5b, 0x4d, 0xaa, 0xf1, 0xa1, 0x88, 0xbb, 0x83, 0x6a, 0x80, 0x2b, 0x7b, 0x38, 0xa7, 0x06, 0x28,
		0x0c, 0x87, 0x63, 0x6a, 0x3c, 0x01, 0x87, 0xae, 0xa6, 0xd4, 0x00, 0x29, 0x77, 0x38, 0x4c, 0x06,
		0xa8, 0x25, 0x0e, 0x67, 0xc9, 0x00, 0x15, 0xdb, 0xe1, 0x28, 0x19, 0xa0, 0x2e, 0x3e, 0x9c, 0x24,
		0xe3, 0xe2, 0xe5, 0xba, 0x1a, 0x24, 0x03, 0xa4, 0xf5, 0xe1, 0xbc, 0x17, 0xa0, 0x31, 0x3d, 0x1c,
		0xf7, 0xe2, 0x3a, 0x1a, 0xa0, 0xcb, 0x69, 0x2f, 0x2e, 0x9e, 0x8d, 0xd5, 0xb0, 0x17, 0x17, 0xce,
		0xc6, 0x7a, 0xd6, 0x8b, 0x0b, 0x67, 0x63, 0x3d, 0x92, 0xc5, 0x85, 0xb3, 0xb1, 0x9e, 0xc8, 0xe2,
		0x84, 0x1a, 0xa0, 0xcb, 0x81, 0x2c, 0x0e, 0x9c, 0x8d, 0xf5, 0x3c, 0x16, 0x07, 0xce, 0xc6, 0x7a,
		0x1c, 0x8b, 0x03, 0x67, 0x63, 0x3d, 0x35, 0xc5, 0x81, 0xb3, 0xb1, 0x1e, 0x9a, 0xe2, 0x38, 0x1a,
		0xa0, 0xcb, 0x99, 0x29, 0x0e, 0x9c, 0x8d, 0xf5, 0xc8, 0x14, 0x07, 0xcf, 0xc6, 0x6a, 0x62, 0x8a,
		0x83, 0x67, 0x63, 0x58, 0x6d, 0x23, 0x9c, 0x8d, 0x55, 0x79, 0x98, 0x65, 0x87, 0x1a, 0xa0, 0xcb,
		0x6d, 0xb4, 0xe1, 0x6c, 0xac, 0x8a, 0xc3, 0x2c, 0x1b, 0xce, 0xc6, 0xaa, 0x36, 0xcc, 0xb2, 0xe1,
		0x6c, 0xac, 0x4a, 0xc3, 0x2c, 0x1b, 0xce, 0xc6, 0xaa, 0x32, 0xcc, 0xb2, 0x1d, 0x0d, 0xd0, 0xa5,
		0x52, 0xb5, 0xe1, 0x6c, 0xac, 0xea, 0xc2, 0x2c, 0x1b, 0xce, 0xc6, 0xaa, 0x2c, 0xcc, 0xb2, 0xe1,
		0x6c, 0xac, 0xaa, 0xc2, 0x2c, 0x1b, 0xcf, 0xc6, 0x4d, 0x51, 0x98, 0x25, 0x42, 0x0d, 0xd0, 0xa5,
		0x8b, 0x23, 0xf0, 0x6c, 0xdc, 0x94, 0x84, 0x59, 0x02, 0xce, 0xc6, 0xaa, 0x22, 0xcc, 0x12, 0x70,
		0x36, 0x56, 0x05, 0x61, 0x96, 0x00, 0xb3, 0x71, 0x67, 0xa0, 0x07, 0x30, 0x95, 0x16, 0x17, 0xa9,
		0x4e, 0xdc, 0x2a, 0xc4, 0x9f, 0x06, 0x23, 0x03, 0xe8, 0x38, 0x7e, 0x4c, 0x8b, 0xa8, 0x1e, 0xf7,
		0xc1, 0x1f, 0x37, 0x79, 0x02, 0x9c, 0x42, 0x2b, 0xab, 0x81, 0x7c, 0x20, 0x5e, 0x91, 0x36, 0x0c,
		0x71, 0x8b, 0x38, 0x2b, 0x36, 0x05, 0xa7, 0x0c, 0x67, 0xc5, 0x1a, 0x02, 0x3d, 0xb4, 0x65, 0xb9,
		0xcb, 0x38, 0x31, 0x2c, 0xb6, 0x04, 0x27, 0x34, 0xe5, 0x81, 0x00, 0x4e, 0xc3, 0xad, 0x8a, 0x0d,
		0xc1, 0x19, 0xbe, 0x02, 0x0e, 0x67, 0x36, 0xee, 0xf2, 0xaf, 0xc5, 0xbd, 0xdd, 0x1f, 0xf9, 0xea,
		0x01, 0xa2, 0x6b, 0x71, 0xd0, 0xf3, 0x0d, 0xf8, 0xe2, 0x83, 0x5b, 0xdb, 0x47, 0x86, 0x03, 0xa8,
		0x3f, 0xde, 0xbf, 0xb8, 0x3f, 0xc7, 0x74, 0x90, 0x98, 0xa2, 0xc4, 0x74, 0x91, 0x98, 0x76, 0x89,
		0xe9, 0x21, 0x31, 0xdd, 0x12, 0xd3, 0x47, 0x62, 0xfa, 0x25, 0x66, 0x00, 0xc3, 0x2c, 0x0f, 0x0f,
		0x85, 0x07, 0x04, 0x2c, 0xfa, 0x8d, 0x6d, 0x81, 0xfb, 0xee, 0xf2, 0x3c, 0xd2, 0x06, 0x78, 0xb3,
		0x35, 0xe2, 0xe6, 0xec, 0xd0, 0x07, 0x2e, 0xe4, 0xe6, 0x98, 0xcf, 0x0f, 0x81, 0x90, 0xe5, 0x31,
		0x5f, 0x30, 0x04, 0x42, 0x96, 0xc7, 0x7c, 0x80, 0xe9, 0x00, 0x35, 0x64, 0x79, 0x4c, 0x60, 0xdb,
		0x2e, 0x14, 0x72, 0xc7, 0xdf, 0xb3, 0x6d, 0x9c, 0x78, 0x4e, 0xaa, 0xb7, 0xb5, 0xa1, 0x90, 0x7b,
		0x6f, 0x8b, 0xd3, 0x76, 0x1f, 0x4b, 0x76, 0x06, 0x40, 0xc0, 0x0d, 0x3b, 0x71, 0x52, 0x5a, 0x72,
		0x13, 0x27, 0xa2, 0x1b, 0xb2, 0x03, 0x04, 0xf4, 0xee, 0x78, 0xb2, 0x02, 0x60, 0x3c, 0xce, 0x0e,
		0x6c, 0x59, 0x61, 0x6e, 0x03, 0x06, 0xe3, 0xee, 0x81, 0x06, 0xe5, 0x1e, 0x01, 0x9c, 0xfe, 0x1d,
		0xd8, 0xaa, 0xc6, 0x1c, 0x30, 0xa9, 0x6a, 0x07, 0x75, 0x53, 0x67, 0x0d, 0xf0, 0x5c, 0x9d, 0x83,
		0xa9, 0x43, 0x00, 0xf7, 0xdf, 0x69, 0x9a, 0x3a, 0x04, 0x38, 0x20, 0xdd, 0xe2, 0xc6, 0xe3, 0x62,
		0xb4, 0xc6, 0x10, 0x08, 0x59, 0x56, 0x84, 0x86, 0x40, 0xc8, 0x71, 0x1a, 0x14, 0x2a, 0xdf, 0xc7,
		0x41, 0x4e, 0x36, 0x0e, 0x28, 0x70, 0x2d, 0x6f, 0x36, 0x90, 0xc0, 0x6d, 0x2f, 0xe9, 0xe9, 0x00,
		0xca, 0xd7, 0x76, 0x20, 0xcb, 0xb5, 0x0c, 0x71, 0x90, 0xbb, 0x4d, 0x25, 0x80, 0x1a, 0xe8, 0x1a,
		0xf7, 0x8f, 0xd4, 0x5c, 0xce, 0xd6, 0xab, 0xcd, 0xf4, 0x17, 0x2c, 0x70, 0x89, 0x89, 0xd8, 0xfd,
		0xba, 0xfc, 0x1b, 0xd0, 0x51, 0xe2, 0x1c, 0x0c, 0x03, 0xf3, 0x90, 0x88, 0x55, 0x55, 0xb5, 0x0f,
		0x05, 0x2d, 0x31, 0x6d, 0x24, 0x66, 0xe9, 0x33, 0x02, 0xe6, 0xc0, 0xef, 0x60, 0x6e, 0x2a, 0xa0,
		0x5d, 0x24, 0xe6, 0xa6, 0x02, 0x1a, 0xb8, 0x49, 0x9b, 0x62, 0x7a, 0xdc, 0x5b, 0x96, 0x71, 0xb6,
		0x70, 0x42, 0x1c, 0x62, 0x69, 0x30, 0x85, 0x8b, 0xdb, 0x9e, 0xaa, 0xcc, 0xce, 0x73, 0xa1, 0x90,
		0x75, 0x99, 0x9d, 0xe7, 0xa3, 0x71, 0x37, 0xe5, 0x5a, 0x01, 0x18, 0x77, 0x53, 0x66, 0xe7, 0x85,
		0x68, 0xdc, 0xb2, 0xcc, 0xce, 0x1f, 0xa2, 0x71, 0xcb, 0x32, 0x3b, 0xdf, 0x42, 0xe3, 0x6e, 0x86,
		0xec, 0x09, 0x34, 0xee, 0x66, 0xc6, 0x9e, 0x0d, 0xc6, 0xdd, 0x94, 0xd9, 0xf9, 0x58, 0x4a, 0xec,
		0x96, 0xd9, 0x79, 0x38, 0x25, 0x73, 0x38, 0xfa, 0x6c, 0xe8, 0xc2, 0xa1, 0xab, 0xc9, 0x67, 0x43,
		0x47, 0x03, 0x74, 0xb9, 0x87, 0x43, 0x1b, 0x0e, 0x5d, 0xcd, 0x3d, 0x1b, 0x0a, 0x38, 0x74, 0x35,
		0xf6, 0x6c, 0x68, 0xc1, 0xa1, 0xab, 0xa9, 0x67, 0xc3, 0x21, 0x1c, 0xba, 0x2a, 0x61, 0x0b, 0x43,
		0x0d, 0xd0, 0x65, 0x09, 0x5b, 0x18, 0xc0, 0xa1, 0xab, 0x12, 0xb6, 0xd0, 0x87, 0x43, 0x57, 0x25,
		0x6c, 0x21, 0x9e, 0x8d, 0x55, 0x09, 0x5b, 0xe8, 0x6a, 0x80, 0x2e, 0xcf, 0x77, 0x43, 0x3c, 0x1b,
		0xab, 0x12, 0xb6, 0x10, 0xce, 0xc6, 0xba, 0x84, 0x2d, 0x84, 0xb3, 0xb1, 0x2e, 0x61, 0x0b, 0xe1,
		0x6c, 0xac, 0x4b, 0xd8, 0xc2, 0xa1, 0x06, 0xe8, 0xb2, 0xda, 0x22, 0x80, 0xb3, 0xb1, 0x2e, 0x61,
		0x0b, 0xe0, 0x6c, 0xac, 0x4b, 0xd8, 0x02, 0x38, 0x1b, 0xeb, 0x12, 0xb6, 0x00, 0xce, 0xc6, 0xba,
		0x84, 0x2d, 0x70, 0x35, 0x40, 0x97, 0xb5, 0x4f, 0x01, 0x9c, 0x8d, 0x75, 0x09, 0x5b, 0x80, 0x67,
		0x63, 0x55, 0xc2, 0x16, 0xe0, 0xd9, 0x58, 0x95, 0xb0, 0x05, 0x70, 0x36, 0xd6, 0x25, 0x6c, 0xc1,
		0x50, 0x03, 0x74, 0xb9, 0x8d, 0x3e, 0x9c, 0x8d, 0x75, 0x09, 0x9b, 0x0f, 0x67, 0x63, 0x5d, 0xc2,
		0xe6, 0xc3, 0xd9, 0x58, 0x97, 0xb0, 0xf9, 0x70, 0x36, 0xd6, 0x25, 0x6c, 0xbe, 0xab, 0x01, 0xba,
		0x54, 0xaa, 0x3e, 0x9c, 0x8d, 0x75, 0x09, 0x9b, 0x0f, 0x67, 0x63, 0x5d, 0xc2, 0xe6, 0xc3, 0xd9,
		0x58, 0x97, 0xb0, 0xf9, 0x78, 0x36, 0x56, 0x25, 0x6c, 0xfe, 0x50, 0x03, 0x74, 0xe9, 0xe2, 0x78,
		0x78, 0x36, 0x56, 0x25, 0x6c, 0x1e, 0x9c, 0x8d, 0x75, 0x09, 0x9b, 0x07, 0x67, 0x63, 0x5d, 0xc2,
		0x86, 0x8e, 0x1b, 0x77, 0x42, 0xd2, 0x21, 0x0e, 0xba, 0x1e, 0x3e, 0x86, 0x23, 0x78, 0x39, 0xd2,
		0x0b, 0xa8, 0x9d, 0x8b, 0x49, 0x59, 0xc2, 0xc5, 0xd1, 0x62, 0x33, 0xd5, 0xca, 0xc1, 0xc9, 0x55,
		0x79, 0x5a, 0x00, 0x34, 0x1b, 0xd5, 0x89, 0x9b, 0x83, 0x53, 0x61, 0xf5, 0xfc, 0x25, 0xe1, 0x02,
		0x31, 0xcb, 0x8c, 0x24, 0x40, 0xaf, 0xdc, 0x1d, 0x4c, 0x46, 0x03, 0x0c, 0x8e, 0xc8, 0x31, 0x6f,
		0xcd, 0x6d, 0x9d, 0xa1, 0x0d, 0x68, 0xec, 0x73, 0xeb, 0xf4, 0xae, 0x28, 0xf6, 0xc7, 0x87, 0x21,
		0x2e, 0x57, 0xf3, 0x12, 0x32, 0x84, 0x41, 0xae, 0x36, 0x2f, 0xa9, 0x2e, 0x97, 0xc1, 0x50, 0x98,
		0x61, 0x34, 0x18, 0x19, 0x80, 0x0c, 0x79, 0x70, 0x67, 0xae, 0x6e, 0x96, 0xf5, 0x42, 0x16, 0xe7,
		0x2d, 0x80, 0x08, 0x39, 0x5a, 0x4f, 0x73, 0x59, 0x54, 0xc6, 0xb9, 0x59, 0x4c, 0xd3, 0x59, 0x2e,
		0x81, 0xca, 0x48, 0x8b, 0xec, 0x43, 0x51, 0x22, 0xac, 0xce, 0x8e, 0x7f, 0xac, 0xa2, 0x82, 0x13,
		0xea, 0x8a, 0x3f, 0xfd, 0xdf, 0xe2, 0x3a, 0x68, 0xc0, 0xf9, 0xd6, 0x3a, 0xf9, 0x98, 0x2c, 0x3e,
		0x25, 0xb9, 0xad, 0xeb, 0x05, 0xf5, 0xf5, 0x09, 0xf6, 0x6f, 0xb6, 0xff, 0xad, 0xaf, 0xed, 0xdf,
		0x3a, 0x98, 0x67, 0xb9, 0x1c, 0x7e, 0xe9, 0xf4, 0xc4, 0xc1, 0x4f, 0xd1, 0x3c, 0x37, 0xc4, 0xc5,
		0x8f, 0xba, 0xad, 0xe3, 0xe0, 0x3f, 0xa6, 0xc9, 0xa4, 0xbb, 0x28, 0x0c, 0xfe, 0xba, 0x48, 0x6e,
		0xa6, 0xb7, 0x3d, 0x7e, 0xf0, 0x4b, 0x1a, 0xdf, 0x4c, 0xef, 0x3a, 0x7f, 0xc2, 0xde, 0x67, 0xfc,
		0x75, 0xba, 0x1a, 0x2f, 0xcc, 0xd7, 0x3f, 0xbf, 0x31, 0xff, 0xfb, 0x57, 0x73, 0x79, 0x33, 0x35,
		0xa7, 0x73, 0x73, 0x3c, 0x9f, 0x98, 0x8b, 0x65, 0x9c, 0x0e, 0xba, 0xcb, 0xc9, 0xe0, 0xcd, 0x62,
		0x9d, 0x8e, 0xe3, 0x5e, 0xef, 0x50, 0xae, 0x4d, 0xfc, 0xf9, 0xd3, 0x22, 0xcd, 0x97, 0x67, 0xb0,
		0x2c, 0x3f, 0xa3, 0x9f, 0x70, 0x0e, 0xfe, 0x3d, 0x5a, 0xbd, 0x4c, 0x6f, 0xd7, 0xf3, 0x38, 0xc9,
		0x06, 0x23, 0x23, 0x4b, 0xd7, 0x71, 0x4f, 0x80, 0x9d, 0x5f, 0xcb, 0x57, 0x03, 0x2d, 0xbb, 0x1d,
		0x77, 0xf7, 0xed, 0xe7, 0x65, 0x4c, 0xdb, 0xdb, 0xf5, 0x34, 0xc9, 0x6c, 0xd1, 0x67, 0x17, 0x37,
		0x92, 0xda, 0xc3, 0xb0, 0x0d, 0x7e, 0x8d, 0x92, 0xdb, 0xfc, 0x69, 0xef, 0x7a, 0xad, 0xfa, 0x97,
		0xfe, 0x1a, 0xe8, 0xef, 0xd3, 0xa4, 0xb7, 0x78, 0xd5, 0x3f, 0xfe, 0xaf, 0x68, 0xb6, 0x8e, 0x69,
		0xea, 0xb8, 0xf8, 0xfd, 0x8f, 0x69, 0x34, 0xce, 0xa6, 0x8b, 0xe4, 0x87, 0xe9, 0xed, 0x34, 0x5b,
		0x29, 0x00, 0xfd, 0x14, 0xdf, 0x46, 0xd9, 0xf4, 0xf7, 0xfc, 0x5d, 0x6e, 0xa2, 0xd9, 0x2a, 0xee,
		0x8d, 0xf2, 0x95, 0xa0, 0xbc, 0xff, 0x1e, 0xdd, 0xa9, 0x2f, 0x9d, 0x23, 0x42, 0x27, 0xf4, 0x7c,
		0x52, 0x4f, 0xc9, 0xa5, 0xad, 0xa1, 0x26, 0xa3, 0x75, 0x05, 0x25, 0xfe, 0xab, 0xbb, 0x62, 0x95,
		0xba, 0x13, 0x8b, 0xae, 0x7a, 0xef, 0xd2, 0x51, 0xfc, 0x7b, 0x9c, 0x64, 0x66, 0x16, 0xcf, 0xe2,
		0x79, 0x9c, 0xa5, 0x9f, 0xef, 0x55, 0x0d, 0xbf, 0x59, 0x5f, 0xaf, 0xc6, 0xe9, 0xf4, 0x3a, 0x36,
		0xde, 0x56, 0xef, 0x63, 0xbc, 0xca, 0xdf, 0x0f, 0xad, 0x83, 0xaf, 0x20, 0xfe, 0xc3, 0x62, 0x9d,
		0x99, 0x37, 0xb3, 0xc5, 0x27, 0x73, 0xbc, 0x48, 0xb2, 0x74, 0x31, 0xeb, 0xef, 0x4c, 0x1c, 0x21,
		0xb0, 0x67, 0xc1, 0x9e, 0xc5, 0x05, 0x7b, 0x16, 0xaf, 0x37, 0xd1, 0x00, 0x41, 0x66, 0x77, 0xe5,
		0xb6, 0xcf, 0xd4, 0xc1, 0xc1, 0xab, 0x64, 0x3d, 0xef, 0x2f, 0x05, 0x6f, 0x17, 0x6f, 0xb2, 0x74,
		0x9a, 0xdc, 0x92, 0xec, 0xdf, 0x60, 0x98, 0x7f, 0xec, 0xb4, 0xe1, 0x63, 0xcd, 0xc5, 0xcd, 0xcd,
		0x80, 0x60, 0x89, 0xad, 0xd3, 0x80, 0x09, 0x05, 0x4f, 0x9c, 0xc4, 0x4b, 0x16, 0x99, 0xb9, 0x5a,
		0x2f, 0x29, 0xa0, 0xf6, 0x49, 0xd0, 0x65, 0x3a, 0x5d, 0xa4, 0xd3, 0xec, 0xf3, 0xe0, 0x89, 0x46,
		0x97, 0x65, 0xf0, 0x76, 0xf1, 0xba, 0x20, 0xcd, 0x17, 0x7a, 0x98, 0xda, 0xb8, 0x14, 0x6a, 0x19,
		0x82, 0xa3, 0xed, 0x57, 0x0b, 0xee, 0x0f, 0x37, 0x7f, 0x64, 0x58, 0x28, 0xb4, 0x7a, 0x97, 0x46,
		0x86, 0xfd, 0x08, 0xc2, 0xf3, 0x65, 0x94, 0xe6, 0xae, 0xc9, 0x34, 0xc9, 0xe2, 0xf4, 0x26, 0x1a,
		0xc7, 0x66, 0x52, 0x6a, 0xa1, 0x9e, 0x36, 0xb6, 0x19, 0x86, 0x0d, 0x2d, 0x1b, 0xda, 0x4b, 0x36,
		0xb4, 0x14, 0x69, 0xdd, 0x33, 0xb1, 0x3d, 0xf2, 0xbf, 0x83, 0x5f, 0xa2, 0x2c, 0x8b, 0xd3, 0xa4,
		0x77, 0x34, 0x3f, 0x78, 0x17, 0x99, 0x7f, 0xbc, 0x34, 0xff, 0x67, 0x68, 0x86, 0xcf, 0x47, 0xef,
		0x5f, 0x98, 0x57, 0x7f, 0x1e, 0xa0, 0x63, 0x26, 0x88, 0x26, 0x59, 0x2d, 0xe3, 0x78, 0xd2, 0x5f,
		0x73, 0x94, 0x3f, 0x63, 0x4d, 0xc1, 0x9a, 0x82, 0x93, 0x7d, 0x9c, 0xec, 0xe3, 0x64, 0x1f, 0x27,
		0xfb, 0xce, 0x6e, 0xb8, 0xb2, 0x28, 0x23, 0xb8, 0xbc, 0xe5, 0xcf, 0xd8, 0x70, 0xb1, 0xe1, 0xba,
		0xec, 0x5c, 0x52, 0x21, 0xa7, 0x66, 0x9c, 0xac, 0xe7, 0x8f, 0x39, 0x89, 0x54, 0x7e, 0x65, 0xb2,
		0xc8, 0xcc, 0x34, 0x8e, 0x26, 0x9f, 0x55, 0xd2, 0x47, 0x25, 0x54, 0x34, 0x99, 0x4f, 0x13, 0x73,
		0xb2, 0xf8, 0x44, 0x4a, 0x1d, 0x59, 0xfb, 0xef, 0x15, 0x27, 0x13, 0x73, 0xf5, 0x61, 0x9d, 0x91,
		0xe1, 0xf6, 0xdf, 0xed, 0x3a, 0xbe, 0x9d, 0x26, 0x66, 0x9c, 0xa6, 0x8b, 0xd4, 0x9c, 0x4c, 0x57,
		0x45, 0xf9, 0x1a, 0x05, 0x55, 0x1c, 0xbd, 0xa4, 0x3a, 0xa6, 0xdd, 0xf0, 0xa6, 0xf9, 0x67, 0x9b,
		0xb7, 0x69, 0x34, 0x8e, 0x6f, 0xd6, 0x33, 0x12, 0xaa, 0xb3, 0x87, 0x9a, 0xc6, 0xab, 0x38, 0x23,
		0xe1, 0xb8, 0x7b, 0x38, 0x39, 0xa7, 0xa3, 0xdc, 0x90, 0x46, 0xb4, 0xb7, 0xf2, 0x8e, 0x84, 0x4f,
		0x15, 0xd1, 0xdf, 0x43, 0xac, 0x2a, 0x41, 0x28, 0x48, 0xc1, 0x1e, 0xd2, 0x2c, 0x5a, 0x65, 0x2a,
		0x29, 0xd0, 0x12, 0x85, 0x2a, 0xbe, 0xfb, 0x32, 0x41, 0xcb, 0x9b, 0xee, 0x4b, 0x80, 0x0a, 0x99,
		0xf6, 0x65, 0x20, 0x4e, 0x95, 0xe4, 0xdd, 0x3b, 0x5a, 0x20, 0x73, 0x3a, 0x2f, 0xea, 0x78, 0x32,
		0x12, 0x9e, 0x2f, 0xc1, 0x2b, 0x75, 0x12, 0x05, 0x35, 0x38, 0x46, 0x55, 0xa1, 0x63, 0xd8, 0xc0,
		0xf1, 0x7a, 0x47, 0x2e, 0x38, 0x7b, 0x7d, 0xa4, 0xd9, 0xc9, 0x79, 0xe1, 0xd3, 0xda, 0x8d, 0x7e,
		0xa9, 0xe2, 0x69, 0xdd, 0x4e, 0xbf, 0x99, 0xb2, 0x71, 0x87, 0xc8, 0x17, 0x2b, 0xee, 0x68, 0x01,
		0x72, 0xba, 0xbf, 0x49, 0x04, 0xc9, 0x57, 0x33, 0x36, 0xb2, 0x8e, 0x7c, 0x05, 0xa2, 0x84, 0x73,
		0xe4, 0x9b, 0x46, 0x4f, 0x99, 0x56, 0xfa, 0xed, 0xa0, 0x0d, 0x1e, 0x05, 0xfd, 0xe6, 0xcd, 0x63,
		0x1d, 0x48, 0xbe, 0xda, 0x72, 0xc7, 0xd0, 0xf4, 0xcb, 0x8c, 0x1e, 0x83, 0x1c, 0x5a, 0xd2, 0x91,
		0x61, 0x79, 0xaa, 0x78, 0xa5, 0x5b, 0x48, 0x3e, 0x56, 0x3a, 0x76, 0x18, 0x46, 0x86, 0xa5, 0xb4,
		0x52, 0xa5, 0x13, 0x43, 0xbf, 0xd4, 0xf5, 0xc0, 0x10, 0x92, 0xeb, 0x6a, 0xf7, 0x5d, 0x8d, 0x91,
		0x61, 0x29, 0x49, 0x7a, 0x71, 0x12, 0x78, 0xcf, 0x07, 0x63, 0x5c, 0x02, 0xd4, 0x12, 0xe3, 0x3e,
		0xb0, 0x12, 0xa0, 0x52, 0xb2, 0xb2, 0x34, 0x4a, 0x56, 0xd3, 0x9c, 0x7c, 0xe6, 0x78, 0xb1, 0xee,
		0xe1, 0x05, 0xec, 0x67, 0x6c, 0x8e, 0x71, 0x38, 0x85, 0xc3, 0x29, 0x1c, 0x3e, 0x7b, 0xe0, 0xb3,
		0x07, 0x3e, 0x7b, 0xe0, 0xb3, 0x87, 0x73, 0x9f, 0x3d, 0x14, 0xc6, 0x68, 0xb9, 0x48, 0x33, 0x73,
		0xbe, 0x98, 0x10, 0x0e, 0x21, 0x0e, 0x7e, 0xcf, 0xa6, 0x8c, 0x4d, 0xd9, 0x65, 0x9f, 0x46, 0x14,
		0x05, 0x75, 0x24, 0xa9, 0x35, 0x1e, 0x6c, 0x6d, 0xeb, 0xfe, 0xe7, 0x2a, 0x65, 0x75, 0x25, 0xb0,
		0xb3, 0x48, 0xbd, 0xc8, 0xf5, 0x00, 0xf2, 0x53, 0x94, 0x28, 0x97, 0xb8, 0x1e, 0x40, 0x2e, 0xb2,
		0xc4, 0xbc, 0xce, 0xa3, 0xfb, 0xb5, 0x15, 0xab, 0xa4, 0x81, 0xe5, 0xd8, 0x22, 0x56, 0x49, 0x0c,
		0x9f, 0xc2, 0x5e, 0x2c, 0xd7, 0xb6, 0x4a, 0x8e, 0x58, 0x82, 0xeb, 0x5c, 0x7c, 0xd1, 0x6f, 0x83,
		0xb4, 0xa9, 0x55, 0xd5, 0xca, 0x04, 0x63, 0x64, 0xd8, 0x3a, 0x90, 0x45, 0xac, 0xd8, 0x7e, 0x7c,
		0x4a, 0x28, 0xc8, 0x49, 0x33, 0xa9, 0x48, 0x90, 0x13, 0x99, 0x32, 0xad, 0xa3, 0x56, 0x58, 0xdd,
		0xa0, 0x20, 0x46, 0x86, 0xb8, 0xf4, 0x3a, 0xe8, 0x27, 0x0a, 0x5c, 0xca, 0x1d, 0x82, 0x82, 0xbf,
		0x7d, 0x8a, 0x45, 0x07, 0x7f, 0x9b, 0xae, 0xb2, 0x97, 0x59, 0x96, 0x76, 0xe2, 0x5c, 0x1e, 0x14,
		0xbd, 0x9a, 0xc5, 0xb9, 0xcd, 0xef, 0xe8, 0x50, 0xe7, 0xb1, 0xc0, 0xce, 0x2f, 0xac, 0xc0, 0x71,
		0x3c, 0xdf, 0x71, 0x86, 0xbe, 0xed, 0x0f, 0x43, 0xd7, 0xb5, 0xbc, 0x2e, 0xa9, 0xc9, 0xc1, 0xcf,
		0xe9, 0x24, 0x4e, 0xe3, 0xc9, 0xbf, 0xe5, 0xdf, 0x97, 0xac, 0x67, 0x33, 0xa5, 0x65, 0x7a, 0x99,
		0x24, 0x8b, 0xac, 0xc8, 0x8d, 0x76, 0xfb, 0xe6, 0xd5, 0xf8, 0x43, 0x3c, 0x8f, 0x96, 0x51, 0xf6,
		0x21, 0x5f, 0xdd, 0x17, 0x32, 0x47, 0xe7, 0x45, 0xbd, 0xf6, 0xab, 0xed, 0x1f, 0xcd, 0xbb, 0x9d,
		0x7f, 0x3f, 0xe8, 0x94, 0x45, 0x4a, 0xd7, 0xe3, 0x2c, 0xd9, 0x75, 0x33, 0xdf, 0xbf, 0xfe, 0xf9,
		0xcd, 0xfb, 0xff, 0xfe, 0xf5, 0x97, 0x9b, 0xe9, 0xeb, 0xf9, 0x5f, 0xe7, 0x93, 0x9f, 0x97, 0x71,
		0xfa, 0xbe, 0x2e, 0x0a, 0x5e, 0x6d, 0xff, 0xf8, 0xdf, 0x3b, 0xff, 0x5a, 0xae, 0xa8, 0x4f, 0x8b,
		0x5a, 0xf3, 0x7f, 0x39, 0xb1, 0xaa, 0x5d, 0x57, 0x13, 0xb1, 0x8a, 0x92, 0xb5, 0x53, 0x5b, 0xb3,
		0xe6, 0x95, 0x3a, 0x5e, 0x87, 0x86, 0x35, 0xd8, 0xb2, 0x6d, 0x75, 0xf2, 0xfb, 0x6b, 0xaf, 0x72,
		0xe7, 0xef, 0x9e, 0x58, 0xcd, 0xca, 0x6b, 0x3c, 0xf1, 0x9f, 0xdb, 0xe2, 0x9b, 0x2e, 0xf1, 0xcc,
		0xb6, 0x13, 0xa2, 0x73, 0xc8, 0xd2, 0x35, 0x44, 0xe9, 0x1d, 0x92, 0xf4, 0x0e, 0x41, 0xf6, 0x42,
		0x8e, 0xce, 0x51, 0x46, 0x3f, 0x89, 0xfe, 0x61, 0x2a, 0x57, 0x86, 0xdb, 0x6d, 0x6c, 0x5f, 0x90,
		0xa3, 0x9d, 0x6f, 0x5b, 0x10, 0xb9, 0x00, 0xf4, 0x0e, 0x74, 0xfb, 0x04, 0xb8, 0x04, 0xc1, 0xa0,
		0xc6, 0xb0, 0xe4, 0xd8, 0x95, 0x1c, 0xb3, 0xd2, 0x04, 0x07, 0x63, 0x97, 0xdb, 0x04, 0xaa, 0xfe,
		0x8b, 0x93, 0x78, 0x35, 0x4e, 0xa7, 0xcb, 0xce, 0xa6, 0x69, 0x6f, 0xd7, 0x76, 0x7f, 0xcc, 0xd9,
		0x15, 0xce, 0xae, 0x5c, 0x70, 0x76, 0x65, 0x55, 0xe6, 0x2b, 0x28, 0x6d, 0x4c, 0x67, 0xcc, 0x78,
		0x76, 0x57, 0xf3, 0x64, 0x75, 0xcf, 0x4c, 0x64, 0x26, 0xde, 0x6f, 0x9e, 0x93, 0x1b, 0x0b, 0x75,
		0x68, 0x0c, 0x62, 0x6f, 0xf2, 0xe3, 0x6b, 0x4a, 0xfe, 0xe6, 0xd5, 0x05, 0x6b, 0x08, 0xd6, 0x10,
		0x3b, 0xaf, 0x39, 0x9b, 0x26, 0xb1, 0x49, 0x6c, 0xe3, 0xda, 0xf9, 0x2d, 0x7b, 0x15, 0xec, 0x55,
		0x5c, 0xb2, 0xce, 0xe0, 0x5e, 0xae, 0xce, 0x50, 0xdc, 0xcb, 0xc5, 0xbd, 0x5c, 0xfd, 0xd0, 0xb8,
		0x97, 0xab, 0x1b, 0x0a, 0xf7, 0x72, 0x75, 0xc6, 0xe3, 0x5e, 0xae, 0x16, 0x63, 0xc1, 0xbd, 0x5c,
		0x54, 0x4c, 0xee, 0xe5, 0x22, 0xa0, 0x71, 0x2f, 0x57, 0x3f, 0x28, 0xee, 0xe5, 0xea, 0x8a, 0xc5,
		0xbd, 0x5c, 0xbd, 0x62, 0x25, 0xe3, 0xcc, 0x43, 0x0e, 0x79, 0xc2, 0x0b, 0x67, 0x05, 0x38, 0x2b,
		0xc0, 0x59, 0x01, 0xce, 0x0a, 0x70, 0x56, 0x80, 0xb3, 0x02, 0x9c, 0x15, 0xe0, 0xac, 0x00, 0x67,
		0x05, 0x38, 0x2b, 0xc0, 0x59, 0x01, 0xce, 0x0a, 0x70, 0x56, 0x80, 0xb3, 0x02, 0x8f, 0x32, 0x2b,
		0xc0, 0x2d, 0x3f, 0x8d, 0x20, 0x0f, 0xba, 0xe5, 0x67, 0x75, 0xb6, 0x86, 0x9f, 0xd5, 0x63, 0xed,
		0xf7, 0x59, 0x69, 0xea, 0xf6, 0x59, 0xa9, 0x35, 0xfb, 0xfc, 0x1e, 0x27, 0xd9, 0x22, 0xfd, 0x6c,
		0xae, 0xd6, 0xf3, 0x79, 0x94, 0x7e, 0xee, 0xd2, 0xf3, 0x73, 0xf8, 0x13, 0x6e, 0xfd, 0x31, 0x1e,
		0x7e, 0xeb, 0x4f, 0x39, 0x91, 0x69, 0x45, 0xe8, 0x00, 0xaa, 0x7e, 0xf9, 0x00, 0x1a, 0x81, 0x14,
		0xb3, 0xb1, 0x0f, 0xac, 0x2b, 0x48, 0x2d, 0xdb, 0x7a, 0xa6, 0x16, 0xa1, 0x6d, 0xc0, 0x68, 0x1e,
		0x48, 0x54, 0xff, 0x53, 0x03, 0x09, 0x16, 0x1f, 0x25, 0xf0, 0x51, 0xc2, 0x05, 0x1f, 0x25, 0xf0,
		0xa4, 0xb1, 0xfa, 0xc7, 0x3c, 0x69, 0x8c, 0x27, 0x8d, 0x51, 0xe2, 0x57, 0xe3, 0x62, 0x27, 0x8d,
		0x61, 0x8c, 0x1b, 0x9b, 0x35, 0x36, 0x6b, 0x6c, 0xd6, 0xd8, 0xac, 0xb1, 0x59, 0x63, 0xb3, 0x76,
		0x11, 0x66, 0x4d, 0xd9, 0xa2, 0xb1, 0x31, 0x63, 0x63, 0xc6, 0xc6, 0x8c, 0x8d, 0x19, 0x1b, 0x33,
		0x36, 0x66, 0xf7, 0x6d, 0xcc, 0xd6, 0x4b, 0xf5, 0x08, 0xad, 0x01, 0x83, 0x4d, 0x1a, 0x9b, 0x34,
		0x36, 0x69, 0x6c, 0xd2, 0xd8, 0xa4, 0xb1, 0x49, 0x83, 0x9a, 0xb4, 0x87, 0x51, 0x3d, 0x72, 0x50,
		0x29, 0xf0, 0xa2, 0xe7, 0x99, 0xb1, 0x41, 0x2d, 0x8d, 0xd8, 0x3c, 0xf7, 0x4d, 0xf9, 0xd8, 0xed,
		0x7f, 0xfb, 0x6b, 0xf9, 0x54, 0x6a, 0x5d, 0xc9, 0xf7, 0x5d, 0xce, 0xd1, 0xb3, 0x2e, 0xda, 0xb8,
		0x21, 0x06, 0x2e, 0x7e, 0xc7, 0x67, 0xe8, 0x30, 0xfb, 0xff, 0x0d, 0x9d, 0xa1, 0xf7, 0x2e, 0xe2,
		0x68, 0x4b, 0xc5, 0xac, 0x7a, 0x3a, 0xae, 0x16, 0x3b, 0xae, 0xec, 0xb8, 0xf6, 0x77, 0x5c, 0xbb,
		0x0a, 0x78, 0xfd, 0x03, 0x40, 0xb1, 0xc8, 0x91, 0x98, 0x28, 0x17, 0x8d, 0x10, 0xa3, 0x38, 0x32,
		0x29, 0x54, 0xc8, 0xa1, 0x8b, 0x24, 0xaa, 0x64, 0x81, 0x91, 0x06, 0x46, 0x1e, 0x8d, 0x24, 0x22,
		0x3a, 0x99, 0x7d, 0xbb, 0x79, 0xfa, 0x46, 0x85, 0xea, 0xd1, 0xa1, 0x42, 0x94, 0xa8, 0x18, 0x2d,
		0xd2, 0xa3, 0x46, 0x48, 0xf4, 0x88, 0x8a, 0x22, 0xe1, 0x91, 0x10, 0x2e, 0x22, 0x52, 0x88, 0x2e,
		0x21, 0x51, 0x26, 0x3c, 0xda, 0x7c, 0x08, 0x6b, 0xfd, 0xe4, 0x3c, 0xbf, 0xba, 0xd2, 0xd5, 0x52,
		0xd2, 0xc3, 0xcb, 0xc2, 0x1a, 0x75, 0x36, 0xe7, 0x6c, 0xce, 0xd9, 0x9c, 0xb3, 0x39, 0x67, 0x73,
		0xce, 0xe6, 0x9c, 0xcd, 0xf9, 0x3d, 0x98, 0x73, 0x98, 0x25, 0x67, 0x23, 0xce, 0x46, 0x9c, 0x8d,
		0x38, 0x1b, 0x71, 0x36, 0xe2, 0x6c, 0xc4, 0xd9, 0x88, 0x9f, 0xd7, 0x88, 0x2b, 0x14, 0x45, 0x1d,
		0x2b, 0xae, 0x25, 0xc7, 0xe3, 0x6c, 0xca, 0xd9, 0x94, 0xb3, 0x29, 0x67, 0x53, 0xce, 0xa6, 0x9c,
		0x4d, 0x39, 0xc2, 0x94, 0x43, 0x0f, 0xe3, 0x7b, 0x16, 0x85, 0xd5, 0xbf, 0xd3, 0x50, 0x1c, 0x96,
		0x7d, 0x5e, 0xc6, 0x2f, 0x88, 0x25, 0x29, 0x06, 0xba, 0x66, 0x2c, 0x57, 0xf4, 0xfd, 0x2a, 0xc8,
		0xba, 0xef, 0x4f, 0xbf, 0x36, 0xab, 0x7c, 0x59, 0x4c, 0xa5, 0x2b, 0x75, 0x25, 0x58, 0x5c, 0xa9,
		0xae, 0xea, 0x64, 0x71, 0xc1, 0x0f, 0xde, 0x69, 0x7a, 0xa8, 0x37, 0xec, 0x96, 0xfc, 0x52, 0xbd,
		0x34, 0x73, 0x0b, 0xc2, 0xec, 0x64, 0x76, 0x32, 0x3b, 0xc9, 0x7f, 0xe3, 0x2b, 0x0f, 0x90, 0x54,
		0xf3, 0xf6, 0x74, 0x79, 0x79, 0xe7, 0x6e, 0x00, 0x28, 0x44, 0xfc, 0x71, 0x8c, 0x95, 0xec, 0x36,
		0x85, 0x11, 0xb4, 0x82, 0x2a, 0x33, 0x26, 0x93, 0xc5, 0x64, 0x63, 0xca, 0x56, 0xb1, 0xa4, 0x36,
		0xbd, 0x56, 0x26, 0x07, 0x7f, 0x9f, 0xa7, 0x4b, 0x1a, 0x0f, 0x76, 0xba, 0xe4, 0xde, 0x56, 0x76,
		0x6f, 0x8a, 0xd9, 0xff, 0xd9, 0x03, 0xe8, 0x89, 0x79, 0xf4, 0x6d, 0x30, 0x97, 0xdf, 0xf9, 0xd2,
		0x36, 0xbf, 0xb6, 0x83, 0xbb, 0xdd, 0xae, 0x49, 0x09, 0x82, 0x77, 0x3f, 0xce, 0x36, 0x5f, 0x53,
		0xff, 0x40, 0x3b, 0x5c, 0xc8, 0xad, 0x5c, 0x12, 0xb9, 0xee, 0x9d, 0x3f, 0x23, 0x88, 0x37, 0x59,
		0xcc, 0x55, 0xc4, 0x5d, 0x57, 0x8c, 0xa9, 0xca, 0x05, 0x18, 0x27, 0x60, 0xdc, 0xd0, 0x18, 0x83,
		0xd2, 0xf2, 0xe2, 0x7d, 0x8f, 0xdb, 0xfa, 0x12, 0xa9, 0xfe, 0x21, 0xb0, 0x65, 0xec, 0x48, 0xdc,
		0x60, 0xad, 0x63, 0xc4, 0x04, 0x0e, 0x8c, 0x7c, 0x08, 0x12, 0xea, 0x26, 0x23, 0x8a, 0x94, 0x70,
		0x72, 0xc2, 0x49, 0x7a, 0x06, 0xb2, 0xd2, 0x48, 0x4b, 0x24, 0x2f, 0x3d, 0xc1, 0x74, 0x52, 0xb6,
		0xc8, 0x67, 0xe7, 0x87, 0x4c, 0xf3, 0x15, 0x20, 0xd4, 0xce, 0xd2, 0xab, 0xff, 0xa9, 0x49, 0xb1,
		0x81, 0x3a, 0x5b, 0xaf, 0xc1, 0x40, 0x67, 0xec, 0x35, 0x1e, 0xfa, 0xfc, 0x77, 0x2b, 0x0b, 0xa8,
		0x73, 0x60, 0x45, 0xb1, 0x3e, 0xcc, 0xf4, 0xe1, 0xb7, 0x02, 0x75, 0x16, 0xff, 0x10, 0xf7, 0xe4,
		0xc9, 0xfd, 0xfc, 0xfa, 0xea, 0x4c, 0xb5, 0x01, 0x94, 0x61, 0x3d, 0x7a, 0x9c, 0x19, 0x76, 0x63,
		0xd8, 0x8d, 0x61, 0x37, 0x86, 0xdd, 0x18, 0x76, 0x63, 0xd8, 0x8d, 0x61, 0x37, 0x86, 0xdd, 0x18,
		0xed, 0x6e, 0x0c, 0xdc, 0x83, 0x61, 0xe7, 0x85, 0x9d, 0x17, 0x76, 0x5e, 0xd8, 0x79, 0x61, 0xe7,
		0x85, 0x9d, 0x17, 0x76, 0x5e, 0xd8, 0x79, 0xd1, 0xe9, 0xbc, 0x00, 0x5a, 0x23, 0x8f, 0x15, 0xea,
		0x92, 0xf3, 0x2f, 0xec, 0xc2, 0xb0, 0x0b, 0xc3, 0x2e, 0x0c, 0xbb, 0x30, 0xec, 0xc2, 0xb0, 0x0b,
		0xc3, 0x2e, 0x8c, 0xa6, 0x5f, 0xf4, 0x2d, 0xbe, 0x21, 0xb6, 0x86, 0xd6, 0xbf, 0x27, 0xd6, 0xb8,
		0xef, 0x17, 0x82, 0xef, 0xff, 0xe3, 0x8b, 0xa3, 0xb2, 0xcd, 0x17, 0x8a, 0x05, 0x6f, 0x06, 0xad,
		0x52, 0xfe, 0xa7, 0xc5, 0xa4, 0xe8, 0x2a, 0x78, 0x13, 0x67, 0x7b, 0xff, 0xb0, 0xfd, 0x3b, 0xa4,
		0x5b, 0x08, 0xe8, 0x1b, 0x4c, 0x9b, 0xd2, 0x95, 0x51, 0x6c, 0x2a, 0xed, 0x16, 0x83, 0x53, 0x36,
		0x94, 0x2b, 0x0d, 0xb9, 0xd2, 0xf0, 0x02, 0x94, 0x1d, 0xb9, 0xd2, 0x50, 0xb9, 0x74, 0x57, 0x42,
		0x2b, 0xb2, 0x46, 0x53, 0x20, 0x18, 0x87, 0x83, 0x1c, 0x0e, 0x3e, 0x84, 0x70, 0x90, 0x4a, 0xd8,
		0x1a, 0x40, 0x43, 0x89, 0xf0, 0x91, 0xd8, 0xc2, 0x4b, 0x85, 0x41, 0xb9, 0x1e, 0x18, 0xc9, 0x91,
		0x64, 0x3f, 0x17, 0xe9, 0xd1, 0xe4, 0xd7, 0xa6, 0x04, 0xb4, 0x29, 0x83, 0x33, 0x2a, 0x05, 0x50,
		0x28, 0xa6, 0x28, 0x9d, 0xca, 0xb9, 0x23, 0x7c, 0x0e, 0x09, 0x98, 0x4b, 0x02, 0xe7, 0x94, 0x70,
		0xb9, 0x25, 0x2d, 0x39, 0x26, 0x5d, 0xb9, 0x26, 0xed, 0xf9, 0x0d, 0x7d, 0x79, 0x0e, 0x60, 0x0e,
		0x4a, 0x4b, 0x2e, 0x4a, 0x7b, 0x4e, 0xea, 0x31, 0xec, 0xdd, 0x93, 0xcb, 0x40, 0xb9, 0xba, 0xa7,
		0x9c, 0x99, 0xca, 0x08, 0x3c, 0xbd, 0x4e, 0x1c, 0xbb, 0x6f, 0xec, 0xbe, 0xb1, 0xfb, 0xc6, 0xee,
		0x1b, 0xbb, 0x6f, 0xec, 0xbe, 0xb1, 0xfb, 0xc6, 0xee, 0x1b, 0xbb, 0x6f, 0x60, 0xf7, 0x4d, 0x9b,
		0xe7, 0xc6, 0x4e, 0x1b, 0x3b, 0x6d, 0xec, 0xb4, 0xb1, 0xd3, 0xc6, 0x4e, 0x1b, 0x3b, 0x6d, 0xec,
		0xb4, 0xb1, 0xd3, 0xc6, 0x4e, 0x1b, 0xce, 0x69, 0x03, 0x96, 0xc2, 0x1f, 0x2b, 0xfa, 0x25, 0xe7,
		0xdb, 0xd8, 0x75, 0x63, 0xd7, 0x8d, 0x5d, 0x37, 0x76, 0xdd, 0xd8, 0x75, 0x63, 0xd7, 0x8d, 0x5d,
		0x37, 0x76, 0xdd, 0x20, 0xbf, 0xa4, 0x16, 0xdb, 0x29, 0xb6, 0x02, 0xd4, 0x38, 0xe7, 0x6e, 0x09,
		0x50, 0xbd, 0x52, 0xea, 0xf8, 0x03, 0xce, 0xd1, 0x29, 0x40, 0xbf, 0x7b, 0x4a, 0x5d, 0x4a, 0xd4,
		0x46, 0x7a, 0x90, 0xef, 0xaa, 0x3a, 0xe9, 0x38, 0x28, 0xdf, 0x5d, 0x05, 0x0e, 0x05, 0xb8, 0x2c,
		0xfa, 0x3e, 0x5d, 0x7c, 0x2e, 0x8b, 0xd6, 0xee, 0xba, 0xd3, 0x6f, 0xf7, 0x39, 0xc5, 0xb4, 0x8e,
		0xb7, 0xfd, 0x5c, 0x84, 0xee, 0xea, 0x75, 0x77, 0x57, 0x57, 0xa5, 0xd5, 0xe3, 0x2e, 0x2f, 0xd6,
		0x56, 0xac, 0xad, 0x58, 0x5b, 0x7d, 0x1b, 0xda, 0x4a, 0x6b, 0x3f, 0x5b, 0xaf, 0xbb, 0xcd, 0x9a,
		0x12, 0x10, 0xfd, 0xee, 0x3a, 0x6b, 0x8a, 0x87, 0x95, 0xef, 0x3e, 0x3b, 0x02, 0xed, 0x75, 0x17,
		0x9a, 0xea, 0x0a, 0x3e, 0xb4, 0xf6, 0x67, 0x42, 0x0f, 0xee, 0x79, 0x43, 0x9a, 0x01, 0x5f, 0x88,
		0xac, 0xba, 0xdd, 0x7a, 0x6f, 0x43, 0xee, 0xbc, 0xaf, 0xe7, 0xbc, 0x08, 0xb9, 0x58, 0x11, 0xda,
		0x95, 0xaa, 0xdb, 0x9f, 0x3e, 0x82, 0x8b, 0x54, 0xf9, 0x6e, 0xa7, 0x87, 0x7e, 0x5d, 0x6a, 0xce,
		0x28, 0x73, 0x3a, 0x21, 0xdd, 0x97, 0xda, 0xe3, 0x37, 0xbf, 0x44, 0x59, 0x16, 0xa7, 0x49, 0xef,
		0x73, 0x8d, 0xc1, 0xd3, 0x77, 0x91, 0xf9, 0xc7, 0x4b, 0xf3, 0x7f, 0x86, 0x66, 0xf8, 0xfe, 0xea,
		0x4f, 0xbf, 0xfd, 0x36, 0xf9, 0xf3, 0x8b, 0x67, 0x5f, 0xac, 0xef, 0xc5, 0xd7, 0xe3, 0xff, 0xf0,
		0xac, 0xfb, 0xea, 0x5f, 0x9d, 0x51, 0x57, 0x54, 0x8a, 0x93, 0xa8, 0x2f, 0xf6, 0x7f, 0xce, 0x3a,
		0x83, 0x75, 0xc6, 0xbd, 0xeb, 0x8c, 0xd7, 0xfb, 0x99, 0x84, 0xf6, 0x8b, 0x31, 0x1b, 0xd5, 0x87,
		0xd3, 0xe3, 0x37, 0xaf, 0x92, 0xf5, 0xbc, 0xff, 0xb6, 0xbf, 0x5d, 0xbc, 0x29, 0x03, 0x30, 0x92,
		0xab, 0x3c, 0xcc, 0x3f, 0xf5, 0x43, 0x94, 0x4e, 0x3e, 0x45, 0x69, 0xbc, 0x2d, 0xfd, 0xe8, 0x3b,
		0x2c, 0xe7, 0xfb, 0xbe, 0xef, 0xfc, 0x9a, 0x58, 0xb4, 0xd2, 0xf8, 0xae, 0x23, 0x63, 0x78, 0xbf,
		0x0e, 0x2e, 0xdf, 0x96, 0xfd, 0x30, 0x6f, 0xcb, 0x96, 0x85, 0x00, 0x7a, 0x6e, 0xca, 0x3e, 0xe5,
		0xe8, 0x3f, 0x8a, 0x3b, 0xb2, 0x3b, 0x5d, 0x24, 0x0d, 0x58, 0xb8, 0xce, 0x97, 0x63, 0x3f, 0x91,
		0x2c, 0x4a, 0xdb, 0x62, 0x10, 0x17, 0xa1, 0xe1, 0xab, 0xfb, 0x7f, 0xed, 0xfe, 0x07, 0x6e, 0x3f,
		0xa3, 0xfc, 0xd3, 0xe6, 0x43, 0x4e, 0x7d, 0xc0, 0x60, 0xba, 0xfa, 0x31, 0xfa, 0x18, 0xff, 0xba,
		0x58, 0x1c, 0x9b, 0xf1, 0xc3, 0x8f, 0x1a, 0xec, 0xfe, 0xa7, 0xbd, 0xb7, 0x3c, 0x7c, 0x99, 0xaf,
		0x4f, 0xbe, 0xfe, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x43,
		0xe3, 0xbf, 0xe2, 0xf7, 0x15, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes() {
	ΛEnumTypes = map[string][]reflect.Type{
		"/interfaces/interface-briefs/interface-brief/actual-line-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum)(0)),
		},
		"/interfaces/interface-briefs/interface-brief/actual-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum)(0)),
		},
		"/interfaces/interface-briefs/interface-brief/line-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum)(0)),
		},
		"/interfaces/interface-briefs/interface-brief/state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum)(0)),
		},
		"/interfaces/interface-non-dynamics/interface-non-dynamic/admin-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum)(0)),
		},
		"/interfaces/interface-non-dynamics/interface-non-dynamic/duplexity": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex)(0)),
		},
		"/interfaces/interface-non-dynamics/interface-non-dynamic/oper-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum)(0)),
		},
		"/interfaces/interface-xr/interface/duplexity": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImAttrDuplex)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/service-instance-details/local-traffic-stack/local-traffic-tag/ethertype": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/service-instance-details/payload-ethertype": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/service-instance-details/pushe/ethertype": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/service-instance-details/tags-to-match/ethertype": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/service-instance-details/tags-to-match/priority": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/encapsulation-details/vlan-encapsulation": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_VlanEncaps)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/mode": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_VlanSwitchedMode)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/trunk-vlan-ranges/local-traffic-stack/local-traffic-tag/ethertype": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/trunk-vlan-ranges/payload-ethertype": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_EfpPayloadEtype)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/trunk-vlan-ranges/pushe/ethertype": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/trunk-vlan-ranges/tags-to-match/ethertype": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_EfpTagEtype)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/dot1q-information/vlan-switched/trunk-vlan-ranges/tags-to-match/priority": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_EfpTagPriority)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/encapsulation-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImCmdEncapsEnum)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/frame-relay-information/fr-encapsulation-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImCmdFrTypeEnum)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/frame-relay-information/lmi-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImCmdLmiTypeEnum)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/ppp-information/lcp-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_PppFsmState)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/ppp-information/ncp-info-array/ncp-identifier": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_NcpIdent)(0)),
		},
		"/interfaces/interface-xr/interface/encapsulation-information/ppp-information/ncp-info-array/ncp-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_PppFsmState)(0)),
		},
		"/interfaces/interface-xr/interface/in-flow-control": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl)(0)),
		},
		"/interfaces/interface-xr/interface/interface-statistics/stats-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImCmdStatsEnum)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/member-mux-data/member-mux-state-reason": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_BmMbrStateReason)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/member-mux-data/member-mux-state-reason-data/reason-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_BmStateReasonTarget)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/member-mux-data/member-mux-state-reason-data/severity": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_BmSeverity)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/member-mux-data/member-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_BmdMemberState)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/member-mux-data/mux-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_BmMuxstate)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/member-mux-data/mux-state-reason": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_BmMuxreason)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/bundle-information/member/member-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_BmdMemberTypeEnum)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/gcc-information/derived-mode": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_GccDerState)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/gcc-information/sec-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_GccSecState)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/interface-type-info": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImCmdIntfTypeEnum)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/sonet-pos-information/aps-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SonetApsEt)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/asserted-failure/current-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/asserted-failure/debounced-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/asserted-failure/reported-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/asserted-failure/type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/remote-request": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/rx-message-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/rx-path-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/self-detected-request": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/tx-message-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/tx-path-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-a/wrap-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/asserted-failure/current-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/asserted-failure/debounced-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/asserted-failure/reported-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureStateEt)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/asserted-failure/type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtFailureEt)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/remote-request": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/rx-message-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/rx-path-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/self-detected-request": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/tx-message-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsReq)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/tx-path-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsPathInd)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/ips-info/local-information/side-b/wrap-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtIpsWrapState)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/srr-info/srr-detailed-info/inner-fail-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/srr-info/srr-detailed-info/node-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrNodeState)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/srr-info/srr-detailed-info/nodes-not-on-ring/inner-failure": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/srr-info/srr-detailed-info/nodes-not-on-ring/outer-failure": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/srr-info/srr-detailed-info/nodes-on-ring/inner-failure": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/srr-info/srr-detailed-info/nodes-on-ring/outer-failure": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/srp-information/srp-information/srr-info/srr-detailed-info/outer-fail-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_SrpMgmtSrrFailure)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/tunnel-gre-information/destination-ip-address/afi": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/tunnel-gre-information/df-bit-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/tunnel-gre-information/keepalive-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_TunnelKaDfState)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/tunnel-gre-information/key-bit-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_TunnelKeyState)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/tunnel-gre-information/source-ip-address/afi": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_TunlPfiAfId)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/tunnel-gre-information/tunnel-mode": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_TunnelGreMode)(0)),
		},
		"/interfaces/interface-xr/interface/interface-type-information/tunnel-gre-information/tunnel-mode-direction": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_TunlIpModeDir)(0)),
		},
		"/interfaces/interface-xr/interface/l2-interface-statistics/block-array/type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_StatsCounter)(0)),
		},
		"/interfaces/interface-xr/interface/l2-interface-statistics/contents": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_StatsTypeContents)(0)),
		},
		"/interfaces/interface-xr/interface/l2-interface-statistics/element-array/block-array/type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_StatsCounter)(0)),
		},
		"/interfaces/interface-xr/interface/l2-interface-statistics/stats-id/id-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_StatsId)(0)),
		},
		"/interfaces/interface-xr/interface/line-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum)(0)),
		},
		"/interfaces/interface-xr/interface/link-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImAttrLink)(0)),
		},
		"/interfaces/interface-xr/interface/loopback-configuration": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImCmdLoopbackEnum)(0)),
		},
		"/interfaces/interface-xr/interface/media-type": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImAttrMedia)(0)),
		},
		"/interfaces/interface-xr/interface/out-flow-control": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImAttrFlowControl)(0)),
		},
		"/interfaces/interface-xr/interface/state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum)(0)),
		},
		"/interfaces/interface-xr/interface/transport-mode": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImAttrTransportMode)(0)),
		},
		"/interfaces/interfaces/interface/line-state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum)(0)),
		},
		"/interfaces/interfaces/interface/state": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_ImStateEnum)(0)),
		},
		"/interfaces/node-type-sets/node-type-set/type-set-name": []reflect.Type{
			reflect.TypeOf((E_Cisco_IOS_XRPfiImCmdOper_InterfaceTypeSet)(0)),
		},
	}
}
